cscope 15 /mnt/external2/qemu/qemu-1.2.0/hw/usb               0000703561
	@bus.c

1 
	~"hw/hw.h
"

2 
	~"hw/usb.h
"

3 
	~"hw/qdev.h
"

4 
	~"sy£mu.h
"

5 
	~"m⁄ô‹.h
"

6 
	~"åa˚.h
"

8 
usb_bus_dev_¥öt
(
M⁄ô‹
 *
m⁄
, 
Devi˚Sèã
 *
qdev
, 
ödít
);

10 *
usb_gë_dev_∑th
(
Devi˚Sèã
 *
dev
);

11 *
usb_gë_fw_dev_∑th
(
Devi˚Sèã
 *
qdev
);

12 
usb_qdev_exô
(
Devi˚Sèã
 *
qdev
);

14 
Pr›îty
 
	gusb_¥›s
[] = {

15 
DEFINE_PROP_STRING
("p‹t", 
USBDevi˚
, 
p‹t_∑th
),

16 
DEFINE_PROP_BIT
("fuŒ-∑th", 
USBDevi˚
, 
Êags
,

17 
USB_DEV_FLAG_FULL_PATH
, 
åue
),

18 
DEFINE_PROP_END_OF_LIST
()

21 
	$usb_bus_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

23 
BusCœss
 *
k
 = 
	`BUS_CLASS
(
kœss
);

25 
k
->
¥öt_dev
 = 
usb_bus_dev_¥öt
;

26 
k
->
gë_dev_∑th
 = 
usb_gë_dev_∑th
;

27 
k
->
gë_fw_dev_∑th
 = 
usb_gë_fw_dev_∑th
;

28 
	}
}

30 c⁄° 
Ty≥Info
 
	gusb_bus_öfo
 = {

31 .
«me
 = 
TYPE_USB_BUS
,

32 .
	g∑ª¡
 = 
TYPE_BUS
,

33 .
	gö°™˚_size
 = (
USBBus
),

34 .
	g˛ass_öô
 = 
usb_bus_˛ass_öô
,

37 
	g√xt_usb_bus
 = 0;

38 
	$QTAILQ_HEAD
(, 
USBBus
Ë
bus£s
 = 
	`QTAILQ_HEAD_INITIALIZER
(busses);

40 
	$usb_devi˚_po°_lﬂd
(*
›aque
, 
vîsi⁄_id
)

42 
USBDevi˚
 *
dev
 = 
›aque
;

44 i‡(
dev
->
°©e
 =
USB_STATE_NOTATTACHED
) {

45 
dev
->
©èched
 = 0;

47 
dev
->
©èched
 = 1;

50 
	}
}

52 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_devi˚
 = {

53 .
«me
 = "USBDevice",

54 .
	gvîsi⁄_id
 = 1,

55 .
	gmöimum_vîsi⁄_id
 = 1,

56 .
	gpo°_lﬂd
 = 
usb_devi˚_po°_lﬂd
,

57 .
	gfõlds
 = (
VMSèãFõld
 []) {

58 
VMSTATE_UINT8
(
addr
, 
USBDevi˚
),

59 
VMSTATE_INT32
(
°©e
, 
USBDevi˚
),

60 
VMSTATE_INT32
(
ªmŸe_wakeup
, 
USBDevi˚
),

61 
VMSTATE_INT32
(
£tup_°©e
, 
USBDevi˚
),

62 
VMSTATE_INT32
(
£tup_Àn
, 
USBDevi˚
),

63 
VMSTATE_INT32
(
£tup_ödex
, 
USBDevi˚
),

64 
VMSTATE_UINT8_ARRAY
(
£tup_buf
, 
USBDevi˚
, 8),

65 
VMSTATE_END_OF_LIST
(),

69 
	$usb_bus_√w
(
USBBus
 *
bus
, 
USBBusOps
 *
›s
, 
Devi˚Sèã
 *
ho°
)

71 
	`qbus_¸óã_ö∂a˚
(&
bus
->
qbus
, 
TYPE_USB_BUS
, 
ho°
, 
NULL
);

72 
bus
->
›s
 = ops;

73 
bus
->
bu¢r
 = 
√xt_usb_bus
++;

74 
bus
->
qbus
.
Ælow_hŸ∂ug
 = 1;

75 
	`QTAILQ_INIT
(&
bus
->
‰ì
);

76 
	`QTAILQ_INIT
(&
bus
->
u£d
);

77 
	`QTAILQ_INSERT_TAIL
(&
bus£s
, 
bus
, 
√xt
);

78 
	}
}

80 
USBBus
 *
	$usb_bus_föd
(
bu¢r
)

82 
USBBus
 *
bus
;

84 i‡(-1 =
bu¢r
)

85  
	`QTAILQ_FIRST
(&
bus£s
);

86 
	`QTAILQ_FOREACH
(
bus
, &
bus£s
, 
√xt
) {

87 i‡(
bus
->
bu¢r
 == busnr)

88  
bus
;

90  
NULL
;

91 
	}
}

93 
	$usb_devi˚_öô
(
USBDevi˚
 *
dev
)

95 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

96 i‡(
kœss
->
öô
) {

97  
kœss
->
	`öô
(
dev
);

100 
	}
}

102 
USBDevi˚
 *
	$usb_devi˚_föd_devi˚
(
USBDevi˚
 *
dev
, 
uöt8_t
 
addr
)

104 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

105 i‡(
kœss
->
föd_devi˚
) {

106  
kœss
->
	`föd_devi˚
(
dev
, 
addr
);

108  
NULL
;

109 
	}
}

111 
	$usb_devi˚_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

113 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

114 i‡(
kœss
->
h™dÀ_de°roy
) {

115 
kœss
->
	`h™dÀ_de°roy
(
dev
);

117 
	}
}

119 
	$usb_devi˚_ˇn˚l_∑ckë
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

121 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

122 i‡(
kœss
->
ˇn˚l_∑ckë
) {

123 
kœss
->
	`ˇn˚l_∑ckë
(
dev
, 
p
);

125 
	}
}

127 
	$usb_devi˚_h™dÀ_©èch
(
USBDevi˚
 *
dev
)

129 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

130 i‡(
kœss
->
h™dÀ_©èch
) {

131 
kœss
->
	`h™dÀ_©èch
(
dev
);

133 
	}
}

135 
	$usb_devi˚_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

137 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

138 i‡(
kœss
->
h™dÀ_ª£t
) {

139 
kœss
->
	`h™dÀ_ª£t
(
dev
);

141 
	}
}

143 
	$usb_devi˚_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
, 
ªque°
,

144 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

146 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

147 i‡(
kœss
->
h™dÀ_c⁄åﬁ
) {

148  
kœss
->
	`h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
,

149 
d©a
);

151  -
ENOSYS
;

152 
	}
}

154 
	$usb_devi˚_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

156 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

157 i‡(
kœss
->
h™dÀ_d©a
) {

158  
kœss
->
	`h™dÀ_d©a
(
dev
, 
p
);

160  -
ENOSYS
;

161 
	}
}

163 c⁄° *
	$usb_devi˚_gë_¥odu˘_desc
(
USBDevi˚
 *
dev
)

165 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

166  
kœss
->
¥odu˘_desc
;

167 
	}
}

169 c⁄° 
USBDesc
 *
	$usb_devi˚_gë_usb_desc
(
USBDevi˚
 *
dev
)

171 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

172  
kœss
->
usb_desc
;

173 
	}
}

175 
	$usb_devi˚_£t_öãrÁ˚
(
USBDevi˚
 *
dev
, 
öãrÁ˚
,

176 
Æt_ﬁd
, 
Æt_√w
)

178 
USBDevi˚Cœss
 *
kœss
 = 
	`USB_DEVICE_GET_CLASS
(
dev
);

179 i‡(
kœss
->
£t_öãrÁ˚
) {

180 
kœss
->
	`£t_öãrÁ˚
(
dev
, 
öãrÁ˚
, 
Æt_ﬁd
, 
Æt_√w
);

182 
	}
}

184 
	$usb_qdev_öô
(
Devi˚Sèã
 *
qdev
)

186 
USBDevi˚
 *
dev
 = 
	`USB_DEVICE
(
qdev
);

187 
rc
;

189 
	`p°r˝y
(
dev
->
¥odu˘_desc
, (dev->product_desc),

190 
	`usb_devi˚_gë_¥odu˘_desc
(
dev
));

191 
dev
->
auto_©èch
 = 1;

192 
	`QLIST_INIT
(&
dev
->
°rögs
);

193 
	`usb_ï_öô
(
dev
);

194 
rc
 = 
	`usb_˛aim_p‹t
(
dev
);

195 i‡(
rc
 != 0) {

196  
rc
;

198 
rc
 = 
	`usb_devi˚_öô
(
dev
);

199 i‡(
rc
 != 0) {

200 
	`usb_ªÀa£_p‹t
(
dev
);

201  
rc
;

203 i‡(
dev
->
auto_©èch
) {

204 
rc
 = 
	`usb_devi˚_©èch
(
dev
);

205 i‡(
rc
 != 0) {

206 
	`usb_qdev_exô
(
qdev
);

207  
rc
;

211 
	}
}

213 
	$usb_qdev_exô
(
Devi˚Sèã
 *
qdev
)

215 
USBDevi˚
 *
dev
 = 
	`USB_DEVICE
(
qdev
);

217 i‡(
dev
->
©èched
) {

218 
	`usb_devi˚_dëach
(
dev
);

220 
	`usb_devi˚_h™dÀ_de°roy
(
dev
);

221 i‡(
dev
->
p‹t
) {

222 
	`usb_ªÀa£_p‹t
(
dev
);

225 
	}
}

227 
	sLegacyUSBFa˘‹y


229 c⁄° *
	m«me
;

230 c⁄° *
	musbdevi˚_«me
;

231 
	mUSBDevi˚
 *(*
	musbdevi˚_öô
)(
USBBus
 *
	mbus
, c⁄° *
	m∑øms
);

232 } 
	tLegacyUSBFa˘‹y
;

234 
GSLi°
 *
	gÀgacy_usb_Á˘‹y
;

236 
usb_Àgacy_ªgi°î
(c⁄° *
ty≥«me
, c⁄° *
usbdevi˚_«me
,

237 
USBDevi˚
 *(*
usbdevi˚_öô
)(
USBBus
 *
bus
,

238 c⁄° *
∑øms
))

240 i‡(
	gusbdevi˚_«me
) {

241 
LegacyUSBFa˘‹y
 *
	gf
 = 
g_mÆloc0
((*
f
));

242 
	gf
->
	g«me
 = 
ty≥«me
;

243 
	gf
->
	gusbdevi˚_«me
 = 
usbdevi˚_«me
;

244 
	gf
->
	gusbdevi˚_öô
 = 
usbdevi˚_öô
;

245 
	gÀgacy_usb_Á˘‹y
 = 
g_¶i°_≠≥nd
(
Àgacy_usb_Á˘‹y
, 
f
);

249 
USBDevi˚
 *
	$usb_¸óã
(
USBBus
 *
bus
, c⁄° *
«me
)

251 
Devi˚Sèã
 *
dev
;

253 
dev
 = 
	`qdev_¸óã
(&
bus
->
qbus
, 
«me
);

254  
	`USB_DEVICE
(
dev
);

255 
	}
}

257 
USBDevi˚
 *
	$usb_¸óã_sim∂e
(
USBBus
 *
bus
, c⁄° *
«me
)

259 
USBDevi˚
 *
dev
 = 
	`usb_¸óã
(
bus
, 
«me
);

260 
rc
;

262 i‡(!
dev
) {

263 
	`îr‹_ªp‹t
("FaûedÅÿ¸óã USB devi˚ '%s'", 
«me
);

264  
NULL
;

266 
rc
 = 
	`qdev_öô
(&
dev
->
qdev
);

267 i‡(
rc
 < 0) {

268 
	`îr‹_ªp‹t
("FaûedÅÿöôülizêUSB devi˚ '%s'", 
«me
);

269  
NULL
;

271  
dev
;

272 
	}
}

274 
	$usb_fûl_p‹t
(
USBP‹t
 *
p‹t
, *
›aque
, 
ödex
,

275 
USBP‹tOps
 *
›s
, 
•ìdmask
)

277 
p‹t
->
›aque
 = opaque;

278 
p‹t
->
ödex
 = index;

279 
p‹t
->
›s
 = ops;

280 
p‹t
->
•ìdmask
 = speedmask;

281 
	`usb_p‹t_loˇti⁄
(
p‹t
, 
NULL
, 
ödex
 + 1);

282 
	}
}

284 
	$usb_ªgi°î_p‹t
(
USBBus
 *
bus
, 
USBP‹t
 *
p‹t
, *
›aque
, 
ödex
,

285 
USBP‹tOps
 *
›s
, 
•ìdmask
)

287 
	`usb_fûl_p‹t
(
p‹t
, 
›aque
, 
ödex
, 
›s
, 
•ìdmask
);

288 
	`QTAILQ_INSERT_TAIL
(&
bus
->
‰ì
, 
p‹t
, 
√xt
);

289 
bus
->
n‰ì
++;

290 
	}
}

292 
	$usb_ªgi°î_com∑ni⁄
(c⁄° *
ma°îbus
, 
USBP‹t
 *
p‹ts
[],

293 
uöt32_t
 
p‹tcou¡
, uöt32_à
fú°p‹t
,

294 *
›aque
, 
USBP‹tOps
 *
›s
, 
•ìdmask
)

296 
USBBus
 *
bus
;

297 
i
;

299 
	`QTAILQ_FOREACH
(
bus
, &
bus£s
, 
√xt
) {

300 i‡(
	`°rcmp
(
bus
->
qbus
.
«me
, 
ma°îbus
) == 0) {

305 i‡(!
bus
 || !bus->
›s
->
ªgi°î_com∑ni⁄
) {

306 
	`qîr‹_ªp‹t
(
QERR_INVALID_PARAMETER_VALUE
, "masterbus",

308 i‡(
bus
) {

309 
	`îr‹_¥ötf_u∆ess_qmp
(

311 
ma°îbus
);

316 
i
 = 0; i < 
p‹tcou¡
; i++) {

317 
	`usb_fûl_p‹t
(
p‹ts
[
i
], 
›aque
, i, 
›s
, 
•ìdmask
);

320  
bus
->
›s
->
	`ªgi°î_com∑ni⁄
(bus, 
p‹ts
, 
p‹tcou¡
, 
fú°p‹t
);

321 
	}
}

323 
	$usb_p‹t_loˇti⁄
(
USBP‹t
 *
down°ªam
, USBP‹à*
up°ªam
, 
p‹är
)

325 i‡(
up°ªam
) {

326 
	`¢¥ötf
(
down°ªam
->
∑th
, (downstream->path), "%s.%d",

327 
up°ªam
->
∑th
, 
p‹är
);

329 
	`¢¥ötf
(
down°ªam
->
∑th
, (down°ªam->∑th), "%d", 
p‹är
);

331 
	}
}

333 
	$usb_uƒegi°î_p‹t
(
USBBus
 *
bus
, 
USBP‹t
 *
p‹t
)

335 i‡(
p‹t
->
dev
)

336 
	`qdev_‰ì
(&
p‹t
->
dev
->
qdev
);

337 
	`QTAILQ_REMOVE
(&
bus
->
‰ì
, 
p‹t
, 
√xt
);

338 
bus
->
n‰ì
--;

339 
	}
}

341 
	$usb_˛aim_p‹t
(
USBDevi˚
 *
dev
)

343 
USBBus
 *
bus
 = 
	`usb_bus_‰om_devi˚
(
dev
);

344 
USBP‹t
 *
p‹t
;

346 
	`as£π
(
dev
->
p‹t
 =
NULL
);

348 i‡(
dev
->
p‹t_∑th
) {

349 
	`QTAILQ_FOREACH
(
p‹t
, &
bus
->
‰ì
, 
√xt
) {

350 i‡(
	`°rcmp
(
p‹t
->
∑th
, 
dev
->
p‹t_∑th
) == 0) {

354 i‡(
p‹t
 =
NULL
) {

355 
	`îr‹_ªp‹t
("Error: usbÖort %s (bus %s)Çot found (in use?)",

356 
dev
->
p‹t_∑th
, 
bus
->
qbus
.
«me
);

360 i‡(
bus
->
n‰ì
 =1 && 
	`°rcmp
(
	`obje˘_gë_ty≥«me
(
	`OBJECT
(
dev
)), "usb-hub") != 0) {

362 
	`usb_¸óã_sim∂e
(
bus
, "usb-hub");

364 i‡(
bus
->
n‰ì
 == 0) {

365 
	`îr‹_ªp‹t
("Error:ÅriedÅoáttach usb device %sÅoá bus "

366 "wôhÇÿ‰ìÖ‹ts", 
dev
->
¥odu˘_desc
);

369 
p‹t
 = 
	`QTAILQ_FIRST
(&
bus
->
‰ì
);

371 
	`åa˚_usb_p‹t_˛aim
(
bus
->
bu¢r
, 
p‹t
->
∑th
);

373 
	`QTAILQ_REMOVE
(&
bus
->
‰ì
, 
p‹t
, 
√xt
);

374 
bus
->
n‰ì
--;

376 
dev
->
p‹t
 =Öort;

377 
p‹t
->
dev
 = dev;

379 
	`QTAILQ_INSERT_TAIL
(&
bus
->
u£d
, 
p‹t
, 
√xt
);

380 
bus
->
nu£d
++;

382 
	}
}

384 
	$usb_ªÀa£_p‹t
(
USBDevi˚
 *
dev
)

386 
USBBus
 *
bus
 = 
	`usb_bus_‰om_devi˚
(
dev
);

387 
USBP‹t
 *
p‹t
 = 
dev
->port;

389 
	`as£π
(
p‹t
 !
NULL
);

390 
	`åa˚_usb_p‹t_ªÀa£
(
bus
->
bu¢r
, 
p‹t
->
∑th
);

392 
	`QTAILQ_REMOVE
(&
bus
->
u£d
, 
p‹t
, 
√xt
);

393 
bus
->
nu£d
--;

395 
dev
->
p‹t
 = 
NULL
;

396 
p‹t
->
dev
 = 
NULL
;

398 
	`QTAILQ_INSERT_TAIL
(&
bus
->
‰ì
, 
p‹t
, 
√xt
);

399 
bus
->
n‰ì
++;

400 
	}
}

402 
	$usb_devi˚_©èch
(
USBDevi˚
 *
dev
)

404 
USBBus
 *
bus
 = 
	`usb_bus_‰om_devi˚
(
dev
);

405 
USBP‹t
 *
p‹t
 = 
dev
->port;

407 
	`as£π
(
p‹t
 !
NULL
);

408 
	`as£π
(!
dev
->
©èched
);

409 
	`åa˚_usb_p‹t_©èch
(
bus
->
bu¢r
, 
p‹t
->
∑th
);

411 i‡(!(
p‹t
->
•ìdmask
 & 
dev
->speedmask)) {

412 
	`îr‹_ªp‹t
("Warning: speed mismatchÅryingÅoáttach "

414 
dev
->
¥odu˘_desc
, 
bus
->
qbus
.
«me
);

418 
dev
->
©èched
++;

419 
	`usb_©èch
(
p‹t
);

422 
	}
}

424 
	$usb_devi˚_dëach
(
USBDevi˚
 *
dev
)

426 
USBBus
 *
bus
 = 
	`usb_bus_‰om_devi˚
(
dev
);

427 
USBP‹t
 *
p‹t
 = 
dev
->port;

429 
	`as£π
(
p‹t
 !
NULL
);

430 
	`as£π
(
dev
->
©èched
);

431 
	`åa˚_usb_p‹t_dëach
(
bus
->
bu¢r
, 
p‹t
->
∑th
);

433 
	`usb_dëach
(
p‹t
);

434 
dev
->
©èched
--;

436 
	}
}

438 
	$usb_devi˚_dñëe_addr
(
bu¢r
, 
addr
)

440 
USBBus
 *
bus
;

441 
USBP‹t
 *
p‹t
;

442 
USBDevi˚
 *
dev
;

444 
bus
 = 
	`usb_bus_föd
(
bu¢r
);

445 i‡(!
bus
)

448 
	`QTAILQ_FOREACH
(
p‹t
, &
bus
->
u£d
, 
√xt
) {

449 i‡(
p‹t
->
dev
->
addr
 ==áddr)

452 i‡(!
p‹t
)

454 
dev
 = 
p‹t
->dev;

456 
	`qdev_‰ì
(&
dev
->
qdev
);

458 
	}
}

460 c⁄° *
	$usb_•ìd
(
•ìd
)

462 c⁄° *
txt
[] = {

463 [ 
USB_SPEED_LOW
 ] = "1.5",

464 [ 
USB_SPEED_FULL
 ] = "12",

465 [ 
USB_SPEED_HIGH
 ] = "480",

466 [ 
USB_SPEED_SUPER
 ] = "5000",

468 i‡(
•ìd
 >
	`ARRAY_SIZE
(
txt
))

470  
txt
[
•ìd
];

471 
	}
}

473 
	$usb_bus_dev_¥öt
(
M⁄ô‹
 *
m⁄
, 
Devi˚Sèã
 *
qdev
, 
ödít
)

475 
USBDevi˚
 *
dev
 = 
	`USB_DEVICE
(
qdev
);

476 
USBBus
 *
bus
 = 
	`usb_bus_‰om_devi˚
(
dev
);

478 
	`m⁄ô‹_¥ötf
(
m⁄
, "%*saddr %d.%d,Öort %s, speed %s,Çame %s%s\n",

479 
ödít
, "", 
bus
->
bu¢r
, 
dev
->
addr
,

480 
dev
->
p‹t
 ? dev->p‹t->
∑th
 : "-",

481 
	`usb_•ìd
(
dev
->
•ìd
), dev->
¥odu˘_desc
,

482 
dev
->
©èched
 ? ",áttached" : "");

483 
	}
}

485 *
	$usb_gë_dev_∑th
(
Devi˚Sèã
 *
qdev
)

487 
USBDevi˚
 *
dev
 = 
	`USB_DEVICE
(
qdev
);

488 
Devi˚Sèã
 *
hcd
 = 
qdev
->
∑ª¡_bus
->
∑ª¡
;

489 *
id
 = 
NULL
;

491 i‡(
dev
->
Êags
 & (1 << 
USB_DEV_FLAG_FULL_PATH
)) {

492 
id
 = 
	`qdev_gë_dev_∑th
(
hcd
);

494 i‡(
id
) {

495 *
ªt
 = 
	`g_°rdup_¥ötf
("%s/%s", 
id
, 
dev
->
p‹t
->
∑th
);

496 
	`g_‰ì
(
id
);

497  
ªt
;

499  
	`g_°rdup
(
dev
->
p‹t
->
∑th
);

501 
	}
}

503 *
	$usb_gë_fw_dev_∑th
(
Devi˚Sèã
 *
qdev
)

505 
USBDevi˚
 *
dev
 = 
	`USB_DEVICE
(
qdev
);

506 *
fw_∑th
, *
ö
;

507 
ssize_t
 
pos
 = 0, 
fw_Àn
;

508 
ƒ
;

510 
fw_Àn
 = 32 + 
	`°æí
(
dev
->
p‹t
->
∑th
) * 6;

511 
fw_∑th
 = 
	`g_mÆloc
(
fw_Àn
);

512 
ö
 = 
dev
->
p‹t
->
∑th
;

513 
fw_Àn
 - 
pos
 > 0) {

514 
ƒ
 = 
	`°πﬁ
(
ö
, &in, 10);

515 i‡(
ö
[0] == '.') {

517 
pos
 +
	`¢¥ötf
(
fw_∑th
 +Öos, 
fw_Àn
 -Öos, "hub@%ld/", 
ƒ
);

518 
ö
++;

521 
pos
 +
	`¢¥ötf
(
fw_∑th
 +Öos, 
fw_Àn
 -Öos, "%s@%ld",

522 
	`qdev_fw_«me
(
qdev
), 
ƒ
);

526  
fw_∑th
;

527 
	}
}

529 
	$usb_öfo
(
M⁄ô‹
 *
m⁄
)

531 
USBBus
 *
bus
;

532 
USBDevi˚
 *
dev
;

533 
USBP‹t
 *
p‹t
;

535 i‡(
	`QTAILQ_EMPTY
(&
bus£s
)) {

536 
	`m⁄ô‹_¥ötf
(
m⁄
, "USB supportÇotÉnabled\n");

540 
	`QTAILQ_FOREACH
(
bus
, &
bus£s
, 
√xt
) {

541 
	`QTAILQ_FOREACH
(
p‹t
, &
bus
->
u£d
, 
√xt
) {

542 
dev
 = 
p‹t
->dev;

543 i‡(!
dev
)

545 
	`m⁄ô‹_¥ötf
(
m⁄
, " Device %d.%d, Port %s, Speed %s Mb/s, Product %s\n",

546 
bus
->
bu¢r
, 
dev
->
addr
, 
p‹t
->
∑th
, 
	`usb_•ìd
(dev->
•ìd
),

547 
dev
->
¥odu˘_desc
);

550 
	}
}

553 
USBDevi˚
 *
	$usbdevi˚_¸óã
(c⁄° *
cmdlöe
)

555 
USBBus
 *
bus
 = 
	`usb_bus_föd
(-1 );

556 
LegacyUSBFa˘‹y
 *
f
 = 
NULL
;

557 
GSLi°
 *
i
;

558 
drivî
[32];

559 c⁄° *
∑øms
;

560 
Àn
;

562 
∑øms
 = 
	`°rchr
(
cmdlöe
,':');

563 i‡(
∑øms
) {

564 
∑øms
++;

565 
Àn
 = 
∑øms
 - 
cmdlöe
;

566 i‡(
Àn
 > (
drivî
))

567 
Àn
 = (
drivî
);

568 
	`p°r˝y
(
drivî
, 
Àn
, 
cmdlöe
);

570 
∑øms
 = "";

571 
	`p°r˝y
(
drivî
, (drivî), 
cmdlöe
);

574 
i
 = 
Àgacy_usb_Á˘‹y
; i; i = i->
√xt
) {

575 
f
 = 
i
->
d©a
;

576 i‡(
	`°rcmp
(
f
->
usbdevi˚_«me
, 
drivî
) == 0) {

580 i‡(
i
 =
NULL
) {

583 
	`îr‹_ªp‹t
("usbdevi˚ %†nŸ found", 
drivî
);

585  
NULL
;

588 i‡(!
f
->
usbdevi˚_öô
) {

589 i‡(*
∑øms
) {

590 
	`îr‹_ªp‹t
("usbdevi˚ %†ac˚±†nÿ∑øms", 
drivî
);

591  
NULL
;

593  
	`usb_¸óã_sim∂e
(
bus
, 
f
->
«me
);

595  
f
->
	`usbdevi˚_öô
(
bus
, 
∑øms
);

596 
	}
}

598 
	$usb_devi˚_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

600 
Devi˚Cœss
 *
k
 = 
	`DEVICE_CLASS
(
kœss
);

601 
k
->
bus_ty≥
 = 
TYPE_USB_BUS
;

602 
k
->
öô
 = 
usb_qdev_öô
;

603 
k
->
u≈lug
 = 
qdev_sim∂e_u≈lug_cb
;

604 
k
->
exô
 = 
usb_qdev_exô
;

605 
k
->
¥›s
 = 
usb_¥›s
;

606 
	}
}

608 
Ty≥Info
 
	gusb_devi˚_ty≥_öfo
 = {

609 .
«me
 = 
TYPE_USB_DEVICE
,

610 .
	g∑ª¡
 = 
TYPE_DEVICE
,

611 .
	gö°™˚_size
 = (
USBDevi˚
),

612 .
	gab°ø˘
 = 
åue
,

613 .
	g˛ass_size
 = (
USBDevi˚Cœss
),

614 .
	g˛ass_öô
 = 
usb_devi˚_˛ass_öô
,

617 
	$usb_ªgi°î_ty≥s
()

619 
	`ty≥_ªgi°î_°©ic
(&
usb_bus_öfo
);

620 
	`ty≥_ªgi°î_°©ic
(&
usb_devi˚_ty≥_öfo
);

621 
	}
}

623 
ty≥_öô
(
usb_ªgi°î_ty≥s
)

	@core.c

26 
	~"qemu-comm⁄.h
"

27 
	~"hw/usb.h
"

28 
	~"iov.h
"

29 
	~"åa˚.h
"

31 
	$usb_©èch
(
USBP‹t
 *
p‹t
)

33 
USBDevi˚
 *
dev
 = 
p‹t
->dev;

35 
	`as£π
(
dev
 !
NULL
);

36 
	`as£π
(
dev
->
©èched
);

37 
	`as£π
(
dev
->
°©e
 =
USB_STATE_NOTATTACHED
);

38 
p‹t
->
›s
->
	`©èch
(port);

39 
dev
->
°©e
 = 
USB_STATE_ATTACHED
;

40 
	`usb_devi˚_h™dÀ_©èch
(
dev
);

41 
	}
}

43 
	$usb_dëach
(
USBP‹t
 *
p‹t
)

45 
USBDevi˚
 *
dev
 = 
p‹t
->dev;

47 
	`as£π
(
dev
 !
NULL
);

48 
	`as£π
(
dev
->
°©e
 !
USB_STATE_NOTATTACHED
);

49 
p‹t
->
›s
->
	`dëach
(port);

50 
dev
->
°©e
 = 
USB_STATE_NOTATTACHED
;

51 
	}
}

53 
	$usb_p‹t_ª£t
(
USBP‹t
 *
p‹t
)

55 
USBDevi˚
 *
dev
 = 
p‹t
->dev;

57 
	`as£π
(
dev
 !
NULL
);

58 
	`usb_dëach
(
p‹t
);

59 
	`usb_©èch
(
p‹t
);

60 
	`usb_devi˚_ª£t
(
dev
);

61 
	}
}

63 
	$usb_devi˚_ª£t
(
USBDevi˚
 *
dev
)

65 i‡(
dev
 =
NULL
 || !dev->
©èched
) {

68 
dev
->
ªmŸe_wakeup
 = 0;

69 
dev
->
addr
 = 0;

70 
dev
->
°©e
 = 
USB_STATE_DEFAULT
;

71 
	`usb_devi˚_h™dÀ_ª£t
(
dev
);

72 
	}
}

74 
	$usb_wakeup
(
USBEndpoöt
 *
ï
)

76 
USBDevi˚
 *
dev
 = 
ï
->dev;

77 
USBBus
 *
bus
 = 
	`usb_bus_‰om_devi˚
(
dev
);

79 i‡(
dev
->
ªmŸe_wakeup
 && dev->
p‹t
 && dev->p‹t->
›s
->
wakeup
) {

80 
dev
->
p‹t
->
›s
->
	`wakeup
(dev->port);

82 i‡(
bus
->
›s
->
wakeup_ídpoöt
) {

83 
bus
->
›s
->
	`wakeup_ídpoöt
(bus, 
ï
);

85 
	}
}

94 
	#SETUP_STATE_IDLE
 0

	)

95 
	#SETUP_STATE_SETUP
 1

	)

96 
	#SETUP_STATE_DATA
 2

	)

97 
	#SETUP_STATE_ACK
 3

	)

98 
	#SETUP_STATE_PARAM
 4

	)

100 
	$do_tokí_£tup
(
USBDevi˚
 *
s
, 
USBPackë
 *
p
)

102 
ªque°
, 
vÆue
, 
ödex
;

103 
ªt
 = 0;

105 i‡(
p
->
iov
.
size
 != 8) {

106  
USB_RET_STALL
;

109 
	`usb_∑ckë_c›y
(
p
, 
s
->
£tup_buf
,Ö->
iov
.
size
);

110 
p
->
ªsu…
 = 0;

111 
s
->
£tup_Àn
 = (s->
£tup_buf
[7] << 8) | s->setup_buf[6];

112 
s
->
£tup_ödex
 = 0;

114 
ªque°
 = (
s
->
£tup_buf
[0] << 8) | s->setup_buf[1];

115 
vÆue
 = (
s
->
£tup_buf
[3] << 8) | s->setup_buf[2];

116 
ödex
 = (
s
->
£tup_buf
[5] << 8) | s->setup_buf[4];

118 i‡(
s
->
£tup_buf
[0] & 
USB_DIR_IN
) {

119 
ªt
 = 
	`usb_devi˚_h™dÀ_c⁄åﬁ
(
s
, 
p
, 
ªque°
, 
vÆue
, 
ödex
,

120 
s
->
£tup_Àn
, s->
d©a_buf
);

121 i‡(
ªt
 =
USB_RET_ASYNC
) {

122 
s
->
£tup_°©e
 = 
SETUP_STATE_SETUP
;

123  
USB_RET_ASYNC
;

125 i‡(
ªt
 < 0)

126  
ªt
;

128 i‡(
ªt
 < 
s
->
£tup_Àn
)

129 
s
->
£tup_Àn
 = 
ªt
;

130 
s
->
£tup_°©e
 = 
SETUP_STATE_DATA
;

132 i‡(
s
->
£tup_Àn
 > (s->
d©a_buf
)) {

133 
	`Ârötf
(
°dîr
,

135 
s
->
£tup_Àn
, (s->
d©a_buf
));

136  
USB_RET_STALL
;

138 i‡(
s
->
£tup_Àn
 == 0)

139 
s
->
£tup_°©e
 = 
SETUP_STATE_ACK
;

141 
s
->
£tup_°©e
 = 
SETUP_STATE_DATA
;

144  
ªt
;

145 
	}
}

147 
	$do_tokí_ö
(
USBDevi˚
 *
s
, 
USBPackë
 *
p
)

149 
ªque°
, 
vÆue
, 
ödex
;

150 
ªt
 = 0;

152 
	`as£π
(
p
->
ï
->
ƒ
 == 0);

154 
ªque°
 = (
s
->
£tup_buf
[0] << 8) | s->setup_buf[1];

155 
vÆue
 = (
s
->
£tup_buf
[3] << 8) | s->setup_buf[2];

156 
ödex
 = (
s
->
£tup_buf
[5] << 8) | s->setup_buf[4];

158 
s
->
£tup_°©e
) {

159 
SETUP_STATE_ACK
:

160 i‡(!(
s
->
£tup_buf
[0] & 
USB_DIR_IN
)) {

161 
ªt
 = 
	`usb_devi˚_h™dÀ_c⁄åﬁ
(
s
, 
p
, 
ªque°
, 
vÆue
, 
ödex
,

162 
s
->
£tup_Àn
, s->
d©a_buf
);

163 i‡(
ªt
 =
USB_RET_ASYNC
) {

164  
USB_RET_ASYNC
;

166 
s
->
£tup_°©e
 = 
SETUP_STATE_IDLE
;

167 i‡(
ªt
 > 0)

169  
ªt
;

175 
SETUP_STATE_DATA
:

176 i‡(
s
->
£tup_buf
[0] & 
USB_DIR_IN
) {

177 
Àn
 = 
s
->
£tup_Àn
 - s->
£tup_ödex
;

178 i‡(
Àn
 > 
p
->
iov
.
size
) {

179 
Àn
 = 
p
->
iov
.
size
;

181 
	`usb_∑ckë_c›y
(
p
, 
s
->
d©a_buf
 + s->
£tup_ödex
, 
Àn
);

182 
s
->
£tup_ödex
 +
Àn
;

183 i‡(
s
->
£tup_ödex
 >s->
£tup_Àn
)

184 
s
->
£tup_°©e
 = 
SETUP_STATE_ACK
;

185  
Àn
;

188 
s
->
£tup_°©e
 = 
SETUP_STATE_IDLE
;

189  
USB_RET_STALL
;

192  
USB_RET_STALL
;

194 
	}
}

196 
	$do_tokí_out
(
USBDevi˚
 *
s
, 
USBPackë
 *
p
)

198 
	`as£π
(
p
->
ï
->
ƒ
 == 0);

200 
s
->
£tup_°©e
) {

201 
SETUP_STATE_ACK
:

202 i‡(
s
->
£tup_buf
[0] & 
USB_DIR_IN
) {

203 
s
->
£tup_°©e
 = 
SETUP_STATE_IDLE
;

210 
SETUP_STATE_DATA
:

211 i‡(!(
s
->
£tup_buf
[0] & 
USB_DIR_IN
)) {

212 
Àn
 = 
s
->
£tup_Àn
 - s->
£tup_ödex
;

213 i‡(
Àn
 > 
p
->
iov
.
size
) {

214 
Àn
 = 
p
->
iov
.
size
;

216 
	`usb_∑ckë_c›y
(
p
, 
s
->
d©a_buf
 + s->
£tup_ödex
, 
Àn
);

217 
s
->
£tup_ödex
 +
Àn
;

218 i‡(
s
->
£tup_ödex
 >s->
£tup_Àn
)

219 
s
->
£tup_°©e
 = 
SETUP_STATE_ACK
;

220  
Àn
;

223 
s
->
£tup_°©e
 = 
SETUP_STATE_IDLE
;

224  
USB_RET_STALL
;

227  
USB_RET_STALL
;

229 
	}
}

231 
	$do_∑ømëî
(
USBDevi˚
 *
s
, 
USBPackë
 *
p
)

233 
ªque°
, 
vÆue
, 
ödex
;

234 
i
, 
ªt
 = 0;

236 
i
 = 0; i < 8; i++) {

237 
s
->
£tup_buf
[
i
] = 
p
->
∑ømëî
 >> (i*8);

240 
s
->
£tup_°©e
 = 
SETUP_STATE_PARAM
;

241 
s
->
£tup_Àn
 = (s->
£tup_buf
[7] << 8) | s->setup_buf[6];

242 
s
->
£tup_ödex
 = 0;

244 
ªque°
 = (
s
->
£tup_buf
[0] << 8) | s->setup_buf[1];

245 
vÆue
 = (
s
->
£tup_buf
[3] << 8) | s->setup_buf[2];

246 
ödex
 = (
s
->
£tup_buf
[5] << 8) | s->setup_buf[4];

248 i‡(
s
->
£tup_Àn
 > (s->
d©a_buf
)) {

249 
	`Ârötf
(
°dîr
,

251 
s
->
£tup_Àn
, (s->
d©a_buf
));

252  
USB_RET_STALL
;

255 i‡(
p
->
pid
 =
USB_TOKEN_OUT
) {

256 
	`usb_∑ckë_c›y
(
p
, 
s
->
d©a_buf
, s->
£tup_Àn
);

259 
ªt
 = 
	`usb_devi˚_h™dÀ_c⁄åﬁ
(
s
, 
p
, 
ªque°
, 
vÆue
, 
ödex
,

260 
s
->
£tup_Àn
, s->
d©a_buf
);

261 i‡(
ªt
 < 0) {

262  
ªt
;

265 i‡(
ªt
 < 
s
->
£tup_Àn
) {

266 
s
->
£tup_Àn
 = 
ªt
;

268 i‡(
p
->
pid
 =
USB_TOKEN_IN
) {

269 
	`usb_∑ckë_c›y
(
p
, 
s
->
d©a_buf
, s->
£tup_Àn
);

272  
ªt
;

273 
	}
}

279 
	$usb_gíîic_async_˘æ_com∂ëe
(
USBDevi˚
 *
s
, 
USBPackë
 *
p
)

281 i‡(
p
->
ªsu…
 < 0) {

282 
s
->
£tup_°©e
 = 
SETUP_STATE_IDLE
;

285 
s
->
£tup_°©e
) {

286 
SETUP_STATE_SETUP
:

287 i‡(
p
->
ªsu…
 < 
s
->
£tup_Àn
) {

288 
s
->
£tup_Àn
 = 
p
->
ªsu…
;

290 
s
->
£tup_°©e
 = 
SETUP_STATE_DATA
;

291 
p
->
ªsu…
 = 8;

294 
SETUP_STATE_ACK
:

295 
s
->
£tup_°©e
 = 
SETUP_STATE_IDLE
;

296 
p
->
ªsu…
 = 0;

299 
SETUP_STATE_PARAM
:

300 i‡(
p
->
ªsu…
 < 
s
->
£tup_Àn
) {

301 
s
->
£tup_Àn
 = 
p
->
ªsu…
;

303 i‡(
p
->
pid
 =
USB_TOKEN_IN
) {

304 
p
->
ªsu…
 = 0;

305 
	`usb_∑ckë_c›y
(
p
, 
s
->
d©a_buf
, s->
£tup_Àn
);

312 
	`usb_∑ckë_com∂ëe
(
s
, 
p
);

313 
	}
}

316 
	$£t_usb_°rög
(
uöt8_t
 *
buf
, c⁄° *
°r
)

318 
Àn
, 
i
;

319 
uöt8_t
 *
q
;

321 
q
 = 
buf
;

322 
Àn
 = 
	`°æí
(
°r
);

323 *
q
++ = 2 * 
Àn
 + 2;

324 *
q
++ = 3;

325 
i
 = 0; i < 
Àn
; i++) {

326 *
q
++ = 
°r
[
i
];

327 *
q
++ = 0;

329  
q
 - 
buf
;

330 
	}
}

332 
USBDevi˚
 *
	$usb_föd_devi˚
(
USBP‹t
 *
p‹t
, 
uöt8_t
 
addr
)

334 
USBDevi˚
 *
dev
 = 
p‹t
->dev;

336 i‡(
dev
 =
NULL
 || !dev->
©èched
 || dev->
°©e
 !
USB_STATE_DEFAULT
) {

337  
NULL
;

339 i‡(
dev
->
addr
 ==áddr) {

340  
dev
;

342  
	`usb_devi˚_föd_devi˚
(
dev
, 
addr
);

343 
	}
}

345 
	$usb_¥o˚ss_⁄e
(
USBPackë
 *
p
)

347 
USBDevi˚
 *
dev
 = 
p
->
ï
->dev;

349 i‡(
p
->
ï
->
ƒ
 == 0) {

351 i‡(
p
->
∑ømëî
) {

352  
	`do_∑ømëî
(
dev
, 
p
);

354 
p
->
pid
) {

355 
USB_TOKEN_SETUP
:

356  
	`do_tokí_£tup
(
dev
, 
p
);

357 
USB_TOKEN_IN
:

358  
	`do_tokí_ö
(
dev
, 
p
);

359 
USB_TOKEN_OUT
:

360  
	`do_tokí_out
(
dev
, 
p
);

362  
USB_RET_STALL
;

366  
	`usb_devi˚_h™dÀ_d©a
(
dev
, 
p
);

368 
	}
}

373 
	$usb_h™dÀ_∑ckë
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

375 
ªt
;

377 i‡(
dev
 =
NULL
) {

378  
USB_RET_NODEV
;

380 
	`as£π
(
dev
 =
p
->
ï
->dev);

381 
	`as£π
(
dev
->
°©e
 =
USB_STATE_DEFAULT
);

382 
	`usb_∑ckë_check_°©e
(
p
, 
USB_PACKET_SETUP
);

383 
	`as£π
(
p
->
ï
 !
NULL
);

386 i‡(
p
->
ï
->
hÆãd
) {

387 
	`as£π
(
	`QTAILQ_EMPTY
(&
p
->
ï
->
queue
));

388 
p
->
ï
->
hÆãd
 = 
Ál£
;

391 i‡(
	`QTAILQ_EMPTY
(&
p
->
ï
->
queue
Ë||Ö->ï->
pùñöe
) {

392 
ªt
 = 
	`usb_¥o˚ss_⁄e
(
p
);

393 i‡(
ªt
 =
USB_RET_ASYNC
) {

394 
	`usb_∑ckë_£t_°©e
(
p
, 
USB_PACKET_ASYNC
);

395 
	`QTAILQ_INSERT_TAIL
(&
p
->
ï
->
queue
,Ö, queue);

401 
	`as£π
(!
p
->
ï
->
pùñöe
);

402 
p
->
ªsu…
 = 
ªt
;

403 
	`usb_∑ckë_£t_°©e
(
p
, 
USB_PACKET_COMPLETE
);

406 
ªt
 = 
USB_RET_ASYNC
;

407 
	`usb_∑ckë_£t_°©e
(
p
, 
USB_PACKET_QUEUED
);

408 
	`QTAILQ_INSERT_TAIL
(&
p
->
ï
->
queue
,Ö, queue);

410  
ªt
;

411 
	}
}

413 
	$__usb_∑ckë_com∂ëe
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

415 
USBEndpoöt
 *
ï
 = 
p
->ep;

417 
	`as£π
(
p
->
ªsu…
 !
USB_RET_ASYNC
 &&Ö->ªsu… !
USB_RET_NAK
);

419 i‡(
p
->
ªsu…
 < 0) {

420 
ï
->
hÆãd
 = 
åue
;

422 
	`usb_∑ckë_£t_°©e
(
p
, 
USB_PACKET_COMPLETE
);

423 
	`QTAILQ_REMOVE
(&
ï
->
queue
, 
p
, queue);

424 
dev
->
p‹t
->
›s
->
	`com∂ëe
(dev->p‹t, 
p
);

425 
	}
}

430 
	$usb_∑ckë_com∂ëe
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

432 
USBEndpoöt
 *
ï
 = 
p
->ep;

433 
ªt
;

435 
	`usb_∑ckë_check_°©e
(
p
, 
USB_PACKET_ASYNC
);

436 
	`as£π
(
	`QTAILQ_FIRST
(&
ï
->
queue
Ë=
p
);

437 
	`__usb_∑ckë_com∂ëe
(
dev
, 
p
);

439 !
ï
->
hÆãd
 && !
	`QTAILQ_EMPTY
(&ï->
queue
)) {

440 
p
 = 
	`QTAILQ_FIRST
(&
ï
->
queue
);

441 i‡(
p
->
°©e
 =
USB_PACKET_ASYNC
) {

444 
	`usb_∑ckë_check_°©e
(
p
, 
USB_PACKET_QUEUED
);

445 
ªt
 = 
	`usb_¥o˚ss_⁄e
(
p
);

446 i‡(
ªt
 =
USB_RET_ASYNC
) {

447 
	`usb_∑ckë_£t_°©e
(
p
, 
USB_PACKET_ASYNC
);

450 
p
->
ªsu…
 = 
ªt
;

451 
	`__usb_∑ckë_com∂ëe
(
ï
->
dev
, 
p
);

453 
	}
}

458 
	$usb_ˇn˚l_∑ckë
(
USBPackë
 * 
p
)

460 
boﬁ
 
ˇŒback
 = (
p
->
°©e
 =
USB_PACKET_ASYNC
);

461 
	`as£π
(
	`usb_∑ckë_is_öÊight
(
p
));

462 
	`usb_∑ckë_£t_°©e
(
p
, 
USB_PACKET_CANCELED
);

463 
	`QTAILQ_REMOVE
(&
p
->
ï
->
queue
,Ö, queue);

464 i‡(
ˇŒback
) {

465 
	`usb_devi˚_ˇn˚l_∑ckë
(
p
->
ï
->
dev
,Ö);

467 
	}
}

470 
	$usb_∑ckë_öô
(
USBPackë
 *
p
)

472 
	`qemu_iovec_öô
(&
p
->
iov
, 1);

473 
	}
}

475 c⁄° *
	$usb_∑ckë_°©e_«me
(
USBPackëSèã
 
°©e
)

477 c⁄° *
«me
[] = {

478 [
USB_PACKET_UNDEFINED
] = "undef",

479 [
USB_PACKET_SETUP
] = "setup",

480 [
USB_PACKET_QUEUED
] = "queued",

481 [
USB_PACKET_ASYNC
] = "async",

482 [
USB_PACKET_COMPLETE
] = "complete",

483 [
USB_PACKET_CANCELED
] = "canceled",

485 i‡(
°©e
 < 
	`ARRAY_SIZE
(
«me
)) {

486  
«me
[
°©e
];

489 
	}
}

491 
	$usb_∑ckë_check_°©e
(
USBPackë
 *
p
, 
USBPackëSèã
 
ex≥˘ed
)

493 
USBDevi˚
 *
dev
;

494 
USBBus
 *
bus
;

496 i‡(
p
->
°©e
 =
ex≥˘ed
) {

499 
dev
 = 
p
->
ï
->dev;

500 
bus
 = 
	`usb_bus_‰om_devi˚
(
dev
);

501 
	`åa˚_usb_∑ckë_°©e_Áu…
(
bus
->
bu¢r
, 
dev
->
p‹t
->
∑th
, 
p
->
ï
->
ƒ
,Ö,

502 
	`usb_∑ckë_°©e_«me
(
p
->
°©e
),

503 
	`usb_∑ckë_°©e_«me
(
ex≥˘ed
));

504 
	`as£π
(!"usbÖacket state check failed");

505 
	}
}

507 
	$usb_∑ckë_£t_°©e
(
USBPackë
 *
p
, 
USBPackëSèã
 
°©e
)

509 i‡(
p
->
ï
) {

510 
USBDevi˚
 *
dev
 = 
p
->
ï
->dev;

511 
USBBus
 *
bus
 = 
	`usb_bus_‰om_devi˚
(
dev
);

512 
	`åa˚_usb_∑ckë_°©e_ch™ge
(
bus
->
bu¢r
, 
dev
->
p‹t
->
∑th
, 
p
->
ï
->
ƒ
,Ö,

513 
	`usb_∑ckë_°©e_«me
(
p
->
°©e
),

514 
	`usb_∑ckë_°©e_«me
(
°©e
));

516 
	`åa˚_usb_∑ckë_°©e_ch™ge
(-1, "", -1, 
p
,

517 
	`usb_∑ckë_°©e_«me
(
p
->
°©e
),

518 
	`usb_∑ckë_°©e_«me
(
°©e
));

520 
p
->
°©e
 = state;

521 
	}
}

523 
	$usb_∑ckë_£tup
(
USBPackë
 *
p
, 
pid
, 
USBEndpoöt
 *
ï
, 
uöt64_t
 
id
)

525 
	`as£π
(!
	`usb_∑ckë_is_öÊight
(
p
));

526 
	`as£π
(
p
->
iov
.iov !
NULL
);

527 
p
->
id
 = id;

528 
p
->
pid
 =Öid;

529 
p
->
ï
 =Ép;

530 
p
->
ªsu…
 = 0;

531 
p
->
∑ømëî
 = 0;

532 
	`qemu_iovec_ª£t
(&
p
->
iov
);

533 
	`usb_∑ckë_£t_°©e
(
p
, 
USB_PACKET_SETUP
);

534 
	}
}

536 
	$usb_∑ckë_addbuf
(
USBPackë
 *
p
, *
±r
, 
size_t
 
Àn
)

538 
	`qemu_iovec_add
(&
p
->
iov
, 
±r
, 
Àn
);

539 
	}
}

541 
	$usb_∑ckë_c›y
(
USBPackë
 *
p
, *
±r
, 
size_t
 
byãs
)

543 
	`as£π
(
p
->
ªsu…
 >= 0);

544 
	`as£π
(
p
->
ªsu…
 + 
byãs
 <p->
iov
.
size
);

545 
p
->
pid
) {

546 
USB_TOKEN_SETUP
:

547 
USB_TOKEN_OUT
:

548 
	`iov_to_buf
(
p
->
iov
.iov,Ö->iov.
niov
,Ö->
ªsu…
, 
±r
, 
byãs
);

550 
USB_TOKEN_IN
:

551 
	`iov_‰om_buf
(
p
->
iov
.iov,Ö->iov.
niov
,Ö->
ªsu…
, 
±r
, 
byãs
);

554 
	`Ârötf
(
°dîr
, "%s: invÆidÖid: %x\n", 
__func__
, 
p
->
pid
);

555 
	`ab‹t
();

557 
p
->
ªsu…
 +
byãs
;

558 
	}
}

560 
	$usb_∑ckë_skù
(
USBPackë
 *
p
, 
size_t
 
byãs
)

562 
	`as£π
(
p
->
ªsu…
 >= 0);

563 
	`as£π
(
p
->
ªsu…
 + 
byãs
 <p->
iov
.
size
);

564 i‡(
p
->
pid
 =
USB_TOKEN_IN
) {

565 
	`iov_mem£t
(
p
->
iov
.iov,Ö->iov.
niov
,Ö->
ªsu…
, 0, 
byãs
);

567 
p
->
ªsu…
 +
byãs
;

568 
	}
}

570 
	$usb_∑ckë_˛ónup
(
USBPackë
 *
p
)

572 
	`as£π
(!
	`usb_∑ckë_is_öÊight
(
p
));

573 
	`qemu_iovec_de°roy
(&
p
->
iov
);

574 
	}
}

576 
	$usb_ï_ª£t
(
USBDevi˚
 *
dev
)

578 
ï
;

580 
dev
->
ï_˘l
.
ƒ
 = 0;

581 
dev
->
ï_˘l
.
ty≥
 = 
USB_ENDPOINT_XFER_CONTROL
;

582 
dev
->
ï_˘l
.
i‚um
 = 0;

583 
dev
->
ï_˘l
.dev = dev;

584 
dev
->
ï_˘l
.
pùñöe
 = 
Ál£
;

585 
ï
 = 0;É∞< 
USB_MAX_ENDPOINTS
;Ép++) {

586 
dev
->
ï_ö
[
ï
].
ƒ
 =Ép + 1;

587 
dev
->
ï_out
[
ï
].
ƒ
 =Ép + 1;

588 
dev
->
ï_ö
[
ï
].
pid
 = 
USB_TOKEN_IN
;

589 
dev
->
ï_out
[
ï
].
pid
 = 
USB_TOKEN_OUT
;

590 
dev
->
ï_ö
[
ï
].
ty≥
 = 
USB_ENDPOINT_XFER_INVALID
;

591 
dev
->
ï_out
[
ï
].
ty≥
 = 
USB_ENDPOINT_XFER_INVALID
;

592 
dev
->
ï_ö
[
ï
].
i‚um
 = 
USB_INTERFACE_INVALID
;

593 
dev
->
ï_out
[
ï
].
i‚um
 = 
USB_INTERFACE_INVALID
;

594 
dev
->
ï_ö
[
ï
].dev = dev;

595 
dev
->
ï_out
[
ï
].dev = dev;

596 
dev
->
ï_ö
[
ï
].
pùñöe
 = 
Ál£
;

597 
dev
->
ï_out
[
ï
].
pùñöe
 = 
Ál£
;

599 
	}
}

601 
	$usb_ï_öô
(
USBDevi˚
 *
dev
)

603 
ï
;

605 
	`usb_ï_ª£t
(
dev
);

606 
	`QTAILQ_INIT
(&
dev
->
ï_˘l
.
queue
);

607 
ï
 = 0;É∞< 
USB_MAX_ENDPOINTS
;Ép++) {

608 
	`QTAILQ_INIT
(&
dev
->
ï_ö
[
ï
].
queue
);

609 
	`QTAILQ_INIT
(&
dev
->
ï_out
[
ï
].
queue
);

611 
	}
}

613 
	$usb_ï_dump
(
USBDevi˚
 *
dev
)

615 c⁄° *
äame
[] = {

616 [
USB_ENDPOINT_XFER_CONTROL
] = "control",

617 [
USB_ENDPOINT_XFER_ISOC
] = "isoc",

618 [
USB_ENDPOINT_XFER_BULK
] = "bulk",

619 [
USB_ENDPOINT_XFER_INT
] = "int",

621 
i‚um
, 
ï
, 
fú°
;

623 
	`Ârötf
(
°dîr
, "Device \"%s\", config %d\n",

624 
dev
->
¥odu˘_desc
, dev->
c⁄figuøti⁄
);

625 
i‚um
 = 0; ifnum < 16; ifnum++) {

626 
fú°
 = 1;

627 
ï
 = 0;É∞< 
USB_MAX_ENDPOINTS
;Ép++) {

628 i‡(
dev
->
ï_ö
[
ï
].
ty≥
 !
USB_ENDPOINT_XFER_INVALID
 &&

629 
dev
->
ï_ö
[
ï
].
i‚um
 == ifnum) {

630 i‡(
fú°
) {

631 
fú°
 = 0;

632 
	`Ârötf
(
°dîr
, " Interface %d,álternative %d\n",

633 
i‚um
, 
dev
->
Æt£âög
[ifnum]);

635 
	`Ârötf
(
°dîr
, " Endpoöà%d, IN, %s, %d max\n", 
ï
,

636 
äame
[
dev
->
ï_ö
[
ï
].
ty≥
],

637 
dev
->
ï_ö
[
ï
].
max_∑ckë_size
);

639 i‡(
dev
->
ï_out
[
ï
].
ty≥
 !
USB_ENDPOINT_XFER_INVALID
 &&

640 
dev
->
ï_out
[
ï
].
i‚um
 == ifnum) {

641 i‡(
fú°
) {

642 
fú°
 = 0;

643 
	`Ârötf
(
°dîr
, " Interface %d,álternative %d\n",

644 
i‚um
, 
dev
->
Æt£âög
[ifnum]);

646 
	`Ârötf
(
°dîr
, " Endpoöà%d, OUT, %s, %d max\n", 
ï
,

647 
äame
[
dev
->
ï_out
[
ï
].
ty≥
],

648 
dev
->
ï_out
[
ï
].
max_∑ckë_size
);

652 
	`Ârötf
(
°dîr
, "--\n");

653 
	}
}

655 
USBEndpoöt
 *
	$usb_ï_gë
(
USBDevi˚
 *
dev
, 
pid
, 
ï
)

657 
USBEndpoöt
 *
ïs
;

659 i‡(
dev
 =
NULL
) {

660  
NULL
;

662 
ïs
 = (
pid
 =
USB_TOKEN_IN
Ë? 
dev
->
ï_ö
 : dev->
ï_out
;

663 i‡(
ï
 == 0) {

664  &
dev
->
ï_˘l
;

666 
	`as£π
(
pid
 =
USB_TOKEN_IN
 ||Öid =
USB_TOKEN_OUT
);

667 
	`as£π
(
ï
 > 0 &&É∞<
USB_MAX_ENDPOINTS
);

668  
ïs
 + 
ï
 - 1;

669 
	}
}

671 
uöt8_t
 
	$usb_ï_gë_ty≥
(
USBDevi˚
 *
dev
, 
pid
, 
ï
)

673 
USBEndpoöt
 *
uï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
ï
);

674  
uï
->
ty≥
;

675 
	}
}

677 
	$usb_ï_£t_ty≥
(
USBDevi˚
 *
dev
, 
pid
, 
ï
, 
uöt8_t
 
ty≥
)

679 
USBEndpoöt
 *
uï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
ï
);

680 
uï
->
ty≥
 =Åype;

681 
	}
}

683 
uöt8_t
 
	$usb_ï_gë_i‚um
(
USBDevi˚
 *
dev
, 
pid
, 
ï
)

685 
USBEndpoöt
 *
uï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
ï
);

686  
uï
->
i‚um
;

687 
	}
}

689 
	$usb_ï_£t_i‚um
(
USBDevi˚
 *
dev
, 
pid
, 
ï
, 
uöt8_t
 
i‚um
)

691 
USBEndpoöt
 *
uï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
ï
);

692 
uï
->
i‚um
 = ifnum;

693 
	}
}

695 
	$usb_ï_£t_max_∑ckë_size
(
USBDevi˚
 *
dev
, 
pid
, 
ï
,

696 
uöt16_t
 
øw
)

698 
USBEndpoöt
 *
uï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
ï
);

699 
size
, 
mi¸o‰ames
;

701 
size
 = 
øw
 & 0x7ff;

702 (
øw
 >> 11) & 3) {

704 
mi¸o‰ames
 = 2;

707 
mi¸o‰ames
 = 3;

710 
mi¸o‰ames
 = 1;

713 
uï
->
max_∑ckë_size
 = 
size
 * 
mi¸o‰ames
;

714 
	}
}

716 
	$usb_ï_gë_max_∑ckë_size
(
USBDevi˚
 *
dev
, 
pid
, 
ï
)

718 
USBEndpoöt
 *
uï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
ï
);

719  
uï
->
max_∑ckë_size
;

720 
	}
}

722 
	$usb_ï_£t_pùñöe
(
USBDevi˚
 *
dev
, 
pid
, 
ï
, 
boﬁ
 
íabÀd
)

724 
USBEndpoöt
 *
uï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
ï
);

725 
uï
->
pùñöe
 = 
íabÀd
;

726 
	}
}

	@desc.c

1 
	~<˘y≥.h
>

3 
	~"hw/usb.h
"

4 
	~"hw/usb/desc.h
"

5 
	~"åa˚.h
"

9 
uöt8_t
 
	$usb_lo
(
uöt16_t
 
vÆ
)

11  
vÆ
 & 0xff;

12 
	}
}

14 
uöt8_t
 
	$usb_hi
(
uöt16_t
 
vÆ
)

16  (
vÆ
 >> 8) & 0xff;

17 
	}
}

19 
	$usb_desc_devi˚
(c⁄° 
USBDescID
 *
id
, c⁄° 
USBDescDevi˚
 *
dev
,

20 
uöt8_t
 *
de°
, 
size_t
 
Àn
)

22 
uöt8_t
 
bLígth
 = 0x12;

23 
USBDes¸ùt‹
 *
d
 = (*)
de°
;

25 i‡(
Àn
 < 
bLígth
) {

29 
d
->
bLígth
 = bLength;

30 
d
->
bDes¸ùt‹Ty≥
 = 
USB_DT_DEVICE
;

32 
d
->
u
.
devi˚
.
bcdUSB_lo
 = 
	`usb_lo
(
dev
->
bcdUSB
);

33 
d
->
u
.
devi˚
.
bcdUSB_hi
 = 
	`usb_hi
(
dev
->
bcdUSB
);

34 
d
->
u
.
devi˚
.
bDevi˚Cœss
 = 
dev
->bDeviceClass;

35 
d
->
u
.
devi˚
.
bDevi˚SubCœss
 = 
dev
->bDeviceSubClass;

36 
d
->
u
.
devi˚
.
bDevi˚PrŸocﬁ
 = 
dev
->bDeviceProtocol;

37 
d
->
u
.
devi˚
.
bMaxPackëSize0
 = 
dev
->bMaxPacketSize0;

39 
d
->
u
.
devi˚
.
idVíd‹_lo
 = 
	`usb_lo
(
id
->
idVíd‹
);

40 
d
->
u
.
devi˚
.
idVíd‹_hi
 = 
	`usb_hi
(
id
->
idVíd‹
);

41 
d
->
u
.
devi˚
.
idProdu˘_lo
 = 
	`usb_lo
(
id
->
idProdu˘
);

42 
d
->
u
.
devi˚
.
idProdu˘_hi
 = 
	`usb_hi
(
id
->
idProdu˘
);

43 
d
->
u
.
devi˚
.
bcdDevi˚_lo
 = 
	`usb_lo
(
id
->
bcdDevi˚
);

44 
d
->
u
.
devi˚
.
bcdDevi˚_hi
 = 
	`usb_hi
(
id
->
bcdDevi˚
);

45 
d
->
u
.
devi˚
.
iM™uÁ˘uªr
 = 
id
->iManufacturer;

46 
d
->
u
.
devi˚
.
iProdu˘
 = 
id
->iProduct;

47 
d
->
u
.
devi˚
.
iSîülNumbî
 = 
id
->iSerialNumber;

49 
d
->
u
.
devi˚
.
bNumC⁄figuøti⁄s
 = 
dev
->bNumConfigurations;

51  
bLígth
;

52 
	}
}

54 
	$usb_desc_devi˚_quÆifõr
(c⁄° 
USBDescDevi˚
 *
dev
,

55 
uöt8_t
 *
de°
, 
size_t
 
Àn
)

57 
uöt8_t
 
bLígth
 = 0x0a;

58 
USBDes¸ùt‹
 *
d
 = (*)
de°
;

60 i‡(
Àn
 < 
bLígth
) {

64 
d
->
bLígth
 = bLength;

65 
d
->
bDes¸ùt‹Ty≥
 = 
USB_DT_DEVICE_QUALIFIER
;

67 
d
->
u
.
devi˚_quÆifõr
.
bcdUSB_lo
 = 
	`usb_lo
(
dev
->
bcdUSB
);

68 
d
->
u
.
devi˚_quÆifõr
.
bcdUSB_hi
 = 
	`usb_hi
(
dev
->
bcdUSB
);

69 
d
->
u
.
devi˚_quÆifõr
.
bDevi˚Cœss
 = 
dev
->bDeviceClass;

70 
d
->
u
.
devi˚_quÆifõr
.
bDevi˚SubCœss
 = 
dev
->bDeviceSubClass;

71 
d
->
u
.
devi˚_quÆifõr
.
bDevi˚PrŸocﬁ
 = 
dev
->bDeviceProtocol;

72 
d
->
u
.
devi˚_quÆifõr
.
bMaxPackëSize0
 = 
dev
->bMaxPacketSize0;

73 
d
->
u
.
devi˚_quÆifõr
.
bNumC⁄figuøti⁄s
 = 
dev
->bNumConfigurations;

74 
d
->
u
.
devi˚_quÆifõr
.
bRe£rved
 = 0;

76  
bLígth
;

77 
	}
}

79 
	$usb_desc_c⁄fig
(c⁄° 
USBDescC⁄fig
 *
c⁄f
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
)

81 
uöt8_t
 
bLígth
 = 0x09;

82 
uöt16_t
 
wTŸÆLígth
 = 0;

83 
USBDes¸ùt‹
 *
d
 = (*)
de°
;

84 
i
, 
rc
;

86 i‡(
Àn
 < 
bLígth
) {

90 
d
->
bLígth
 = bLength;

91 
d
->
bDes¸ùt‹Ty≥
 = 
USB_DT_CONFIG
;

93 
d
->
u
.
c⁄fig
.
bNumI¡îÁ˚s
 = 
c⁄f
->bNumInterfaces;

94 
d
->
u
.
c⁄fig
.
bC⁄figuøti⁄VÆue
 = 
c⁄f
->bConfigurationValue;

95 
d
->
u
.
c⁄fig
.
iC⁄figuøti⁄
 = 
c⁄f
->iConfiguration;

96 
d
->
u
.
c⁄fig
.
bmAâribuãs
 = 
c⁄f
->bmAttributes;

97 
d
->
u
.
c⁄fig
.
bMaxPowî
 = 
c⁄f
->bMaxPower;

98 
wTŸÆLígth
 +
bLígth
;

101 
i
 = 0; i < 
c⁄f
->
nif_groups
; i++) {

102 
rc
 = 
	`usb_desc_iÁ˚_group
(&(
c⁄f
->
if_groups
[
i
]),

103 
de°
 + 
wTŸÆLígth
,

104 
Àn
 - 
wTŸÆLígth
);

105 i‡(
rc
 < 0) {

106  
rc
;

108 
wTŸÆLígth
 +
rc
;

112 
i
 = 0; i < 
c⁄f
->
nif
; i++) {

113 
rc
 = 
	`usb_desc_iÁ˚
(
c⁄f
->
ifs
 + 
i
, 
de°
 + 
wTŸÆLígth
, 
Àn
 - wTotalLength);

114 i‡(
rc
 < 0) {

115  
rc
;

117 
wTŸÆLígth
 +
rc
;

120 
d
->
u
.
c⁄fig
.
wTŸÆLígth_lo
 = 
	`usb_lo
(
wTŸÆLígth
);

121 
d
->
u
.
c⁄fig
.
wTŸÆLígth_hi
 = 
	`usb_hi
(
wTŸÆLígth
);

122  
wTŸÆLígth
;

123 
	}
}

125 
	$usb_desc_iÁ˚_group
(c⁄° 
USBDescIÁ˚Assoc
 *
üd
, 
uöt8_t
 *
de°
,

126 
size_t
 
Àn
)

128 
pos
 = 0;

129 
i
 = 0;

132 
uöt8_t
 
bLígth
 = 0x08;

134 i‡(
Àn
 < 
bLígth
) {

138 
de°
[0x00] = 
bLígth
;

139 
de°
[0x01] = 
USB_DT_INTERFACE_ASSOC
;

140 
de°
[0x02] = 
üd
->
bFú°I¡îÁ˚
;

141 
de°
[0x03] = 
üd
->
bI¡îÁ˚Cou¡
;

142 
de°
[0x04] = 
üd
->
bFun˘i⁄Cœss
;

143 
de°
[0x05] = 
üd
->
bFun˘i⁄SubCœss
;

144 
de°
[0x06] = 
üd
->
bFun˘i⁄PrŸocﬁ
;

145 
de°
[0x07] = 
üd
->
iFun˘i⁄
;

146 
pos
 +
bLígth
;

149 
i
 = 0; i < 
üd
->
nif
; i++) {

150 
rc
 = 
	`usb_desc_iÁ˚
(&(
üd
->
ifs
[
i
]), 
de°
 + 
pos
, 
Àn
 -Öos);

151 i‡(
rc
 < 0) {

152  
rc
;

154 
pos
 +
rc
;

157  
pos
;

158 
	}
}

160 
	$usb_desc_iÁ˚
(c⁄° 
USBDescIÁ˚
 *
iÁ˚
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
)

162 
uöt8_t
 
bLígth
 = 0x09;

163 
i
, 
rc
, 
pos
 = 0;

164 
USBDes¸ùt‹
 *
d
 = (*)
de°
;

166 i‡(
Àn
 < 
bLígth
) {

170 
d
->
bLígth
 = bLength;

171 
d
->
bDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
;

173 
d
->
u
.
öãrÁ˚
.
bI¡îÁ˚Numbî
 = 
iÁ˚
->bInterfaceNumber;

174 
d
->
u
.
öãrÁ˚
.
bA…î«ãSëtög
 = 
iÁ˚
->bAlternateSetting;

175 
d
->
u
.
öãrÁ˚
.
bNumEndpoöts
 = 
iÁ˚
->bNumEndpoints;

176 
d
->
u
.
öãrÁ˚
.
bI¡îÁ˚Cœss
 = 
iÁ˚
->bInterfaceClass;

177 
d
->
u
.
öãrÁ˚
.
bI¡îÁ˚SubCœss
 = 
iÁ˚
->bInterfaceSubClass;

178 
d
->
u
.
öãrÁ˚
.
bI¡îÁ˚PrŸocﬁ
 = 
iÁ˚
->bInterfaceProtocol;

179 
d
->
u
.
öãrÁ˚
.
iI¡îÁ˚
 = 
iÁ˚
->iInterface;

180 
pos
 +
bLígth
;

182 
i
 = 0; i < 
iÁ˚
->
ndesc
; i++) {

183 
rc
 = 
	`usb_desc_Ÿhî
(
iÁ˚
->
descs
 + 
i
, 
de°
 + 
pos
, 
Àn
 -Öos);

184 i‡(
rc
 < 0) {

185  
rc
;

187 
pos
 +
rc
;

190 
i
 = 0; i < 
iÁ˚
->
bNumEndpoöts
; i++) {

191 
rc
 = 
	`usb_desc_ídpoöt
(
iÁ˚
->
ïs
 + 
i
, 
de°
 + 
pos
, 
Àn
 -Öos);

192 i‡(
rc
 < 0) {

193  
rc
;

195 
pos
 +
rc
;

198  
pos
;

199 
	}
}

201 
	$usb_desc_ídpoöt
(c⁄° 
USBDescEndpoöt
 *
ï
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
)

203 
uöt8_t
 
bLígth
 = 
ï
->
is_audio
 ? 0x09 : 0x07;

204 
uöt8_t
 
exåÆí
 = 
ï
->
exåa
 ?Ép->extra[0] : 0;

205 
USBDes¸ùt‹
 *
d
 = (*)
de°
;

207 i‡(
Àn
 < 
bLígth
 + 
exåÆí
) {

211 
d
->
bLígth
 = bLength;

212 
d
->
bDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
;

214 
d
->
u
.
ídpoöt
.
bEndpoötAddªss
 = 
ï
->bEndpointAddress;

215 
d
->
u
.
ídpoöt
.
bmAâribuãs
 = 
ï
->bmAttributes;

216 
d
->
u
.
ídpoöt
.
wMaxPackëSize_lo
 = 
	`usb_lo
(
ï
->
wMaxPackëSize
);

217 
d
->
u
.
ídpoöt
.
wMaxPackëSize_hi
 = 
	`usb_hi
(
ï
->
wMaxPackëSize
);

218 
d
->
u
.
ídpoöt
.
bI¡îvÆ
 = 
ï
->bInterval;

219 i‡(
ï
->
is_audio
) {

220 
d
->
u
.
ídpoöt
.
bRe‰esh
 = 
ï
->bRefresh;

221 
d
->
u
.
ídpoöt
.
bSynchAddªss
 = 
ï
->bSynchAddress;

223 i‡(
ï
->
exåa
) {

224 
	`mem˝y
(
de°
 + 
bLígth
, 
ï
->
exåa
, 
exåÆí
);

227  
bLígth
 + 
exåÆí
;

228 
	}
}

230 
	$usb_desc_Ÿhî
(c⁄° 
USBDescOthî
 *
desc
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
)

232 
bLígth
 = 
desc
->
Àngth
 ? desc->Àngth : desc->
d©a
[0];

234 i‡(
Àn
 < 
bLígth
) {

238 
	`mem˝y
(
de°
, 
desc
->
d©a
, 
bLígth
);

239  
bLígth
;

240 
	}
}

244 
	$usb_desc_ï_öô
(
USBDevi˚
 *
dev
)

246 c⁄° 
USBDescIÁ˚
 *
iÁ˚
;

247 
i
, 
e
, 
pid
, 
ï
;

249 
	`usb_ï_öô
(
dev
);

250 
i
 = 0; i < 
dev
->
nöãrÁ˚s
; i++) {

251 
iÁ˚
 = 
dev
->
iÁ˚s
[
i
];

252 i‡(
iÁ˚
 =
NULL
) {

255 
e
 = 0;É < 
iÁ˚
->
bNumEndpoöts
;É++) {

256 
pid
 = (
iÁ˚
->
ïs
[
e
].
bEndpoötAddªss
 & 
USB_DIR_IN
) ?

257 
USB_TOKEN_IN
 : 
USB_TOKEN_OUT
;

258 
ï
 = 
iÁ˚
->
ïs
[
e
].
bEndpoötAddªss
 & 0x0f;

259 
	`usb_ï_£t_ty≥
(
dev
, 
pid
, 
ï
, 
iÁ˚
->
ïs
[
e
].
bmAâribuãs
 & 0x03);

260 
	`usb_ï_£t_i‚um
(
dev
, 
pid
, 
ï
, 
iÁ˚
->
bI¡îÁ˚Numbî
);

261 
	`usb_ï_£t_max_∑ckë_size
(
dev
, 
pid
, 
ï
,

262 
iÁ˚
->
ïs
[
e
].
wMaxPackëSize
);

265 
	}
}

267 c⁄° 
USBDescIÁ˚
 *
	$usb_desc_föd_öãrÁ˚
(
USBDevi˚
 *
dev
,

268 
nif
, 
Æt
)

270 c⁄° 
USBDescIÁ˚
 *
iÁ˚
;

271 
g
, 
i
;

273 i‡(!
dev
->
c⁄fig
) {

274  
NULL
;

276 
g
 = 0; g < 
dev
->
c⁄fig
->
nif_groups
; g++) {

277 
i
 = 0; i < 
dev
->
c⁄fig
->
if_groups
[
g
].
nif
; i++) {

278 
iÁ˚
 = &
dev
->
c⁄fig
->
if_groups
[
g
].
ifs
[
i
];

279 i‡(
iÁ˚
->
bI¡îÁ˚Numbî
 =
nif
 &&

280 
iÁ˚
->
bA…î«ãSëtög
 =
Æt
) {

281  
iÁ˚
;

285 
i
 = 0; i < 
dev
->
c⁄fig
->
nif
; i++) {

286 
iÁ˚
 = &
dev
->
c⁄fig
->
ifs
[
i
];

287 i‡(
iÁ˚
->
bI¡îÁ˚Numbî
 =
nif
 &&

288 
iÁ˚
->
bA…î«ãSëtög
 =
Æt
) {

289  
iÁ˚
;

292  
NULL
;

293 
	}
}

295 
	$usb_desc_£t_öãrÁ˚
(
USBDevi˚
 *
dev
, 
ödex
, 
vÆue
)

297 c⁄° 
USBDescIÁ˚
 *
iÁ˚
;

298 
ﬁd
;

300 
iÁ˚
 = 
	`usb_desc_föd_öãrÁ˚
(
dev
, 
ödex
, 
vÆue
);

301 i‡(
iÁ˚
 =
NULL
) {

305 
ﬁd
 = 
dev
->
Æt£âög
[
ödex
];

306 
dev
->
Æt£âög
[
ödex
] = 
vÆue
;

307 
dev
->
iÁ˚s
[
ödex
] = 
iÁ˚
;

308 
	`usb_desc_ï_öô
(
dev
);

310 i‡(
ﬁd
 !
vÆue
) {

311 
	`usb_devi˚_£t_öãrÁ˚
(
dev
, 
ödex
, 
ﬁd
, 
vÆue
);

314 
	}
}

316 
	$usb_desc_£t_c⁄fig
(
USBDevi˚
 *
dev
, 
vÆue
)

318 
i
;

320 i‡(
vÆue
 == 0) {

321 
dev
->
c⁄figuøti⁄
 = 0;

322 
dev
->
nöãrÁ˚s
 = 0;

323 
dev
->
c⁄fig
 = 
NULL
;

325 
i
 = 0; i < 
dev
->
devi˚
->
bNumC⁄figuøti⁄s
; i++) {

326 i‡(
dev
->
devi˚
->
c⁄fs
[
i
].
bC⁄figuøti⁄VÆue
 =
vÆue
) {

327 
dev
->
c⁄figuøti⁄
 = 
vÆue
;

328 
dev
->
nöãrÁ˚s
 = dev->
devi˚
->
c⁄fs
[
i
].
bNumI¡îÁ˚s
;

329 
dev
->
c⁄fig
 = dev->
devi˚
->
c⁄fs
 + 
i
;

330 
	`as£π
(
dev
->
nöãrÁ˚s
 <
USB_MAX_INTERFACES
);

333 i‡(
i
 < 
dev
->
devi˚
->
bNumC⁄figuøti⁄s
) {

338 
i
 = 0; i < 
dev
->
nöãrÁ˚s
; i++) {

339 
	`usb_desc_£t_öãrÁ˚
(
dev
, 
i
, 0);

341 ; 
i
 < 
USB_MAX_INTERFACES
; i++) {

342 
dev
->
Æt£âög
[
i
] = 0;

343 
dev
->
iÁ˚s
[
i
] = 
NULL
;

347 
	}
}

349 
	$usb_desc_£tdeÁu…s
(
USBDevi˚
 *
dev
)

351 c⁄° 
USBDesc
 *
desc
 = 
	`usb_devi˚_gë_usb_desc
(
dev
);

353 
	`as£π
(
desc
 !
NULL
);

354 
dev
->
•ìd
) {

355 
USB_SPEED_LOW
:

356 
USB_SPEED_FULL
:

357 
dev
->
devi˚
 = 
desc
->
fuŒ
;

359 
USB_SPEED_HIGH
:

360 
dev
->
devi˚
 = 
desc
->
high
;

363 
	`usb_desc_£t_c⁄fig
(
dev
, 0);

364 
	}
}

366 
	$usb_desc_öô
(
USBDevi˚
 *
dev
)

368 c⁄° 
USBDesc
 *
desc
 = 
	`usb_devi˚_gë_usb_desc
(
dev
);

370 
	`as£π
(
desc
 !
NULL
);

371 
dev
->
•ìd
 = 
USB_SPEED_FULL
;

372 
dev
->
•ìdmask
 = 0;

373 i‡(
desc
->
fuŒ
) {

374 
dev
->
•ìdmask
 |
USB_SPEED_MASK_FULL
;

376 i‡(
desc
->
high
) {

377 
dev
->
•ìdmask
 |
USB_SPEED_MASK_HIGH
;

379 
	`usb_desc_£tdeÁu…s
(
dev
);

380 
	}
}

382 
	$usb_desc_©èch
(
USBDevi˚
 *
dev
)

384 c⁄° 
USBDesc
 *
desc
 = 
	`usb_devi˚_gë_usb_desc
(
dev
);

386 
	`as£π
(
desc
 !
NULL
);

387 i‡(
desc
->
high
 && (
dev
->
p‹t
->
•ìdmask
 & 
USB_SPEED_MASK_HIGH
)) {

388 
dev
->
•ìd
 = 
USB_SPEED_HIGH
;

389 } i‡(
desc
->
fuŒ
 && (
dev
->
p‹t
->
•ìdmask
 & 
USB_SPEED_MASK_FULL
)) {

390 
dev
->
•ìd
 = 
USB_SPEED_FULL
;

392 
	`Ârötf
(
°dîr
, "usb:Öort/device speed mismatch for \"%s\"\n",

393 
	`usb_devi˚_gë_¥odu˘_desc
(
dev
));

396 
	`usb_desc_£tdeÁu…s
(
dev
);

397 
	}
}

399 
	$usb_desc_£t_°rög
(
USBDevi˚
 *
dev
, 
uöt8_t
 
ödex
, c⁄° *
°r
)

401 
USBDescSåög
 *
s
;

403 
	`QLIST_FOREACH
(
s
, &
dev
->
°rögs
, 
√xt
) {

404 i‡(
s
->
ödex
 == index) {

408 i‡(
s
 =
NULL
) {

409 
s
 = 
	`g_mÆloc0
((*s));

410 
s
->
ödex
 = index;

411 
	`QLIST_INSERT_HEAD
(&
dev
->
°rögs
, 
s
, 
√xt
);

413 
	`g_‰ì
(
s
->
°r
);

414 
s
->
°r
 = 
	`g_°rdup
(str);

415 
	}
}

429 
	$usb_desc_¸óã_£rül
(
USBDevi˚
 *
dev
)

431 
Devi˚Sèã
 *
hcd
 = 
dev
->
qdev
.
∑ª¡_bus
->
∑ª¡
;

432 c⁄° 
USBDesc
 *
desc
 = 
	`usb_devi˚_gë_usb_desc
(
dev
);

433 
ödex
 = 
desc
->
id
.
iSîülNumbî
;

434 
£rül
[64];

435 *
∑th
;

436 
d°
;

438 
	`as£π
(
ödex
 !0 && 
desc
->
°r
[ödex] !
NULL
);

439 
d°
 = 
	`¢¥ötf
(
£rül
, (£rül), "%s", 
desc
->
°r
[
ödex
]);

440 
∑th
 = 
	`qdev_gë_dev_∑th
(
hcd
);

441 i‡(
∑th
) {

442 
d°
 +
	`¢¥ötf
(
£rül
+d°, (£rül)-d°, "-%s", 
∑th
);

444 
d°
 +
	`¢¥ötf
(
£rül
+d°, (£rül)-d°, "-%s", 
dev
->
p‹t
->
∑th
);

445 
	`usb_desc_£t_°rög
(
dev
, 
ödex
, 
£rül
);

446 
	}
}

448 c⁄° *
	$usb_desc_gë_°rög
(
USBDevi˚
 *
dev
, 
uöt8_t
 
ödex
)

450 
USBDescSåög
 *
s
;

452 
	`QLIST_FOREACH
(
s
, &
dev
->
°rögs
, 
√xt
) {

453 i‡(
s
->
ödex
 == index) {

454  
s
->
°r
;

457  
NULL
;

458 
	}
}

460 
	$usb_desc_°rög
(
USBDevi˚
 *
dev
, 
ödex
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
)

462 
uöt8_t
 
bLígth
, 
pos
, 
i
;

463 c⁄° *
°r
;

465 i‡(
Àn
 < 4) {

469 i‡(
ödex
 == 0) {

471 
de°
[0] = 4;

472 
de°
[1] = 
USB_DT_STRING
;

473 
de°
[2] = 0x09;

474 
de°
[3] = 0x04;

478 
°r
 = 
	`usb_desc_gë_°rög
(
dev
, 
ödex
);

479 i‡(
°r
 =
NULL
) {

480 
°r
 = 
	`usb_devi˚_gë_usb_desc
(
dev
)->°r[
ödex
];

481 i‡(
°r
 =
NULL
) {

486 
bLígth
 = 
	`°æí
(
°r
) * 2 + 2;

487 
de°
[0] = 
bLígth
;

488 
de°
[1] = 
USB_DT_STRING
;

489 
i
 = 0; 
pos
 = 2;

490 
pos
+1 < 
bLígth
 &&Öos+1 < 
Àn
) {

491 
de°
[
pos
++] = 
°r
[
i
++];

492 
de°
[
pos
++] = 0;

494  
pos
;

495 
	}
}

497 
	$usb_desc_gë_des¸ùt‹
(
USBDevi˚
 *
dev
, 
vÆue
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
)

499 c⁄° 
USBDesc
 *
desc
 = 
	`usb_devi˚_gë_usb_desc
(
dev
);

500 c⁄° 
USBDescDevi˚
 *
Ÿhî_dev
;

501 
uöt8_t
 
buf
[256];

502 
uöt8_t
 
ty≥
 = 
vÆue
 >> 8;

503 
uöt8_t
 
ödex
 = 
vÆue
 & 0xff;

504 
ªt
 = -1;

506 i‡(
dev
->
•ìd
 =
USB_SPEED_HIGH
) {

507 
Ÿhî_dev
 = 
	`usb_devi˚_gë_usb_desc
(
dev
)->
fuŒ
;

509 
Ÿhî_dev
 = 
	`usb_devi˚_gë_usb_desc
(
dev
)->
high
;

512 
ty≥
) {

513 
USB_DT_DEVICE
:

514 
ªt
 = 
	`usb_desc_devi˚
(&
desc
->
id
, 
dev
->
devi˚
, 
buf
, (buf));

515 
	`åa˚_usb_desc_devi˚
(
dev
->
addr
, 
Àn
, 
ªt
);

517 
USB_DT_CONFIG
:

518 i‡(
ödex
 < 
dev
->
devi˚
->
bNumC⁄figuøti⁄s
) {

519 
ªt
 = 
	`usb_desc_c⁄fig
(
dev
->
devi˚
->
c⁄fs
 + 
ödex
, 
buf
, (buf));

521 
	`åa˚_usb_desc_c⁄fig
(
dev
->
addr
, 
ödex
, 
Àn
, 
ªt
);

523 
USB_DT_STRING
:

524 
ªt
 = 
	`usb_desc_°rög
(
dev
, 
ödex
, 
buf
, (buf));

525 
	`åa˚_usb_desc_°rög
(
dev
->
addr
, 
ödex
, 
Àn
, 
ªt
);

528 
USB_DT_DEVICE_QUALIFIER
:

529 i‡(
Ÿhî_dev
 !
NULL
) {

530 
ªt
 = 
	`usb_desc_devi˚_quÆifõr
(
Ÿhî_dev
, 
buf
, (buf));

532 
	`åa˚_usb_desc_devi˚_quÆifõr
(
dev
->
addr
, 
Àn
, 
ªt
);

534 
USB_DT_OTHER_SPEED_CONFIG
:

535 i‡(
Ÿhî_dev
 !
NULL
 && 
ödex
 < othî_dev->
bNumC⁄figuøti⁄s
) {

536 
ªt
 = 
	`usb_desc_c⁄fig
(
Ÿhî_dev
->
c⁄fs
 + 
ödex
, 
buf
, (buf));

537 
buf
[0x01] = 
USB_DT_OTHER_SPEED_CONFIG
;

539 
	`åa˚_usb_desc_Ÿhî_•ìd_c⁄fig
(
dev
->
addr
, 
ödex
, 
Àn
, 
ªt
);

542 
USB_DT_DEBUG
:

547 
	`Ârötf
(
°dîr
, "%s: %d unknow¿ty≥ %d (À¿%zd)\n", 
__FUNCTION__
,

548 
dev
->
addr
, 
ty≥
, 
Àn
);

552 i‡(
ªt
 > 0) {

553 i‡(
ªt
 > 
Àn
) {

554 
ªt
 = 
Àn
;

556 
	`mem˝y
(
de°
, 
buf
, 
ªt
);

558  
ªt
;

559 
	}
}

561 
	$usb_desc_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

562 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

564 c⁄° 
USBDesc
 *
desc
 = 
	`usb_devi˚_gë_usb_desc
(
dev
);

565 
ªt
 = -1;

567 
	`as£π
(
desc
 !
NULL
);

568 
ªque°
) {

569 
Devi˚OutReque°
 | 
USB_REQ_SET_ADDRESS
:

570 
dev
->
addr
 = 
vÆue
;

571 
	`åa˚_usb_£t_addr
(
dev
->
addr
);

572 
ªt
 = 0;

575 
Devi˚Reque°
 | 
USB_REQ_GET_DESCRIPTOR
:

576 
ªt
 = 
	`usb_desc_gë_des¸ùt‹
(
dev
, 
vÆue
, 
d©a
, 
Àngth
);

579 
Devi˚Reque°
 | 
USB_REQ_GET_CONFIGURATION
:

584 
d©a
[0] = 
dev
->
c⁄fig
 ? dev->c⁄fig->
bC⁄figuøti⁄VÆue
 : 0;

585 
ªt
 = 1;

587 
Devi˚OutReque°
 | 
USB_REQ_SET_CONFIGURATION
:

588 
ªt
 = 
	`usb_desc_£t_c⁄fig
(
dev
, 
vÆue
);

589 
	`åa˚_usb_£t_c⁄fig
(
dev
->
addr
, 
vÆue
, 
ªt
);

592 
Devi˚Reque°
 | 
USB_REQ_GET_STATUS
: {

593 c⁄° 
USBDescC⁄fig
 *
c⁄fig
 = 
dev
->config ?

594 
dev
->
c⁄fig
 : &dev->
devi˚
->
c⁄fs
[0];

596 
d©a
[0] = 0;

603 i‡(
c⁄fig
->
bmAâribuãs
 & 0x40) {

604 
d©a
[0] |1 << 
USB_DEVICE_SELF_POWERED
;

606 i‡(
dev
->
ªmŸe_wakeup
) {

607 
d©a
[0] |1 << 
USB_DEVICE_REMOTE_WAKEUP
;

609 
d©a
[1] = 0x00;

610 
ªt
 = 2;

613 
Devi˚OutReque°
 | 
USB_REQ_CLEAR_FEATURE
:

614 i‡(
vÆue
 =
USB_DEVICE_REMOTE_WAKEUP
) {

615 
dev
->
ªmŸe_wakeup
 = 0;

616 
ªt
 = 0;

618 
	`åa˚_usb_˛ór_devi˚_„©uª
(
dev
->
addr
, 
vÆue
, 
ªt
);

620 
Devi˚OutReque°
 | 
USB_REQ_SET_FEATURE
:

621 i‡(
vÆue
 =
USB_DEVICE_REMOTE_WAKEUP
) {

622 
dev
->
ªmŸe_wakeup
 = 1;

623 
ªt
 = 0;

625 
	`åa˚_usb_£t_devi˚_„©uª
(
dev
->
addr
, 
vÆue
, 
ªt
);

628 
I¡îÁ˚Reque°
 | 
USB_REQ_GET_INTERFACE
:

629 i‡(
ödex
 < 0 || index >
dev
->
nöãrÁ˚s
) {

632 
d©a
[0] = 
dev
->
Æt£âög
[
ödex
];

633 
ªt
 = 1;

635 
I¡îÁ˚OutReque°
 | 
USB_REQ_SET_INTERFACE
:

636 
ªt
 = 
	`usb_desc_£t_öãrÁ˚
(
dev
, 
ödex
, 
vÆue
);

637 
	`åa˚_usb_£t_öãrÁ˚
(
dev
->
addr
, 
ödex
, 
vÆue
, 
ªt
);

641  
ªt
;

642 
	}
}

	@desc.h

1 #i‚de‡
QEMU_HW_USB_DESC_H


2 
	#QEMU_HW_USB_DESC_H


	)

4 
	~<öây≥s.h
>

7 
	sUSBDes¸ùt‹
 {

8 
uöt8_t
 
	mbLígth
;

9 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

12 
uöt8_t
 
	mbcdUSB_lo
;

13 
uöt8_t
 
	mbcdUSB_hi
;

14 
uöt8_t
 
	mbDevi˚Cœss
;

15 
uöt8_t
 
	mbDevi˚SubCœss
;

16 
uöt8_t
 
	mbDevi˚PrŸocﬁ
;

17 
uöt8_t
 
	mbMaxPackëSize0
;

18 
uöt8_t
 
	midVíd‹_lo
;

19 
uöt8_t
 
	midVíd‹_hi
;

20 
uöt8_t
 
	midProdu˘_lo
;

21 
uöt8_t
 
	midProdu˘_hi
;

22 
uöt8_t
 
	mbcdDevi˚_lo
;

23 
uöt8_t
 
	mbcdDevi˚_hi
;

24 
uöt8_t
 
	miM™uÁ˘uªr
;

25 
uöt8_t
 
	miProdu˘
;

26 
uöt8_t
 
	miSîülNumbî
;

27 
uöt8_t
 
	mbNumC⁄figuøti⁄s
;

28 } 
	mdevi˚
;

30 
uöt8_t
 
	mbcdUSB_lo
;

31 
uöt8_t
 
	mbcdUSB_hi
;

32 
uöt8_t
 
	mbDevi˚Cœss
;

33 
uöt8_t
 
	mbDevi˚SubCœss
;

34 
uöt8_t
 
	mbDevi˚PrŸocﬁ
;

35 
uöt8_t
 
	mbMaxPackëSize0
;

36 
uöt8_t
 
	mbNumC⁄figuøti⁄s
;

37 
uöt8_t
 
	mbRe£rved
;

38 } 
	mdevi˚_quÆifõr
;

40 
uöt8_t
 
	mwTŸÆLígth_lo
;

41 
uöt8_t
 
	mwTŸÆLígth_hi
;

42 
uöt8_t
 
	mbNumI¡îÁ˚s
;

43 
uöt8_t
 
	mbC⁄figuøti⁄VÆue
;

44 
uöt8_t
 
	miC⁄figuøti⁄
;

45 
uöt8_t
 
	mbmAâribuãs
;

46 
uöt8_t
 
	mbMaxPowî
;

47 } 
	mc⁄fig
;

49 
uöt8_t
 
	mbI¡îÁ˚Numbî
;

50 
uöt8_t
 
	mbA…î«ãSëtög
;

51 
uöt8_t
 
	mbNumEndpoöts
;

52 
uöt8_t
 
	mbI¡îÁ˚Cœss
;

53 
uöt8_t
 
	mbI¡îÁ˚SubCœss
;

54 
uöt8_t
 
	mbI¡îÁ˚PrŸocﬁ
;

55 
uöt8_t
 
	miI¡îÁ˚
;

56 } 
	möãrÁ˚
;

58 
uöt8_t
 
	mbEndpoötAddªss
;

59 
uöt8_t
 
	mbmAâribuãs
;

60 
uöt8_t
 
	mwMaxPackëSize_lo
;

61 
uöt8_t
 
	mwMaxPackëSize_hi
;

62 
uöt8_t
 
	mbI¡îvÆ
;

63 
uöt8_t
 
	mbRe‰esh
;

64 
uöt8_t
 
	mbSynchAddªss
;

65 } 
	mídpoöt
;

66 } 
	mu
;

67 } 
	tQEMU_PACKED
 
	tUSBDes¸ùt‹
;

69 
	sUSBDescID
 {

70 
uöt16_t
 
	midVíd‹
;

71 
uöt16_t
 
	midProdu˘
;

72 
uöt16_t
 
	mbcdDevi˚
;

73 
uöt8_t
 
	miM™uÁ˘uªr
;

74 
uöt8_t
 
	miProdu˘
;

75 
uöt8_t
 
	miSîülNumbî
;

78 
	sUSBDescDevi˚
 {

79 
uöt16_t
 
	mbcdUSB
;

80 
uöt8_t
 
	mbDevi˚Cœss
;

81 
uöt8_t
 
	mbDevi˚SubCœss
;

82 
uöt8_t
 
	mbDevi˚PrŸocﬁ
;

83 
uöt8_t
 
	mbMaxPackëSize0
;

84 
uöt8_t
 
	mbNumC⁄figuøti⁄s
;

86 c⁄° 
USBDescC⁄fig
 *
	mc⁄fs
;

89 
	sUSBDescC⁄fig
 {

90 
uöt8_t
 
	mbNumI¡îÁ˚s
;

91 
uöt8_t
 
	mbC⁄figuøti⁄VÆue
;

92 
uöt8_t
 
	miC⁄figuøti⁄
;

93 
uöt8_t
 
	mbmAâribuãs
;

94 
uöt8_t
 
	mbMaxPowî
;

97 
uöt8_t
 
	mnif_groups
;

98 c⁄° 
USBDescIÁ˚Assoc
 *
	mif_groups
;

101 
uöt8_t
 
	mnif
;

102 c⁄° 
USBDescIÁ˚
 *
	mifs
;

106 
	sUSBDescIÁ˚Assoc
 {

107 
uöt8_t
 
	mbFú°I¡îÁ˚
;

108 
uöt8_t
 
	mbI¡îÁ˚Cou¡
;

109 
uöt8_t
 
	mbFun˘i⁄Cœss
;

110 
uöt8_t
 
	mbFun˘i⁄SubCœss
;

111 
uöt8_t
 
	mbFun˘i⁄PrŸocﬁ
;

112 
uöt8_t
 
	miFun˘i⁄
;

114 
uöt8_t
 
	mnif
;

115 c⁄° 
USBDescIÁ˚
 *
	mifs
;

118 
	sUSBDescIÁ˚
 {

119 
uöt8_t
 
	mbI¡îÁ˚Numbî
;

120 
uöt8_t
 
	mbA…î«ãSëtög
;

121 
uöt8_t
 
	mbNumEndpoöts
;

122 
uöt8_t
 
	mbI¡îÁ˚Cœss
;

123 
uöt8_t
 
	mbI¡îÁ˚SubCœss
;

124 
uöt8_t
 
	mbI¡îÁ˚PrŸocﬁ
;

125 
uöt8_t
 
	miI¡îÁ˚
;

127 
uöt8_t
 
	mndesc
;

128 
USBDescOthî
 *
	mdescs
;

129 
USBDescEndpoöt
 *
	mïs
;

132 
	sUSBDescEndpoöt
 {

133 
uöt8_t
 
	mbEndpoötAddªss
;

134 
uöt8_t
 
	mbmAâribuãs
;

135 
uöt16_t
 
	mwMaxPackëSize
;

136 
uöt8_t
 
	mbI¡îvÆ
;

137 
uöt8_t
 
	mbRe‰esh
;

138 
uöt8_t
 
	mbSynchAddªss
;

140 
uöt8_t
 
	mis_audio
;

141 
uöt8_t
 *
	mexåa
;

144 
	sUSBDescOthî
 {

145 
uöt8_t
 
	mÀngth
;

146 c⁄° 
uöt8_t
 *
	md©a
;

149 c⁄° *
	tUSBDescSåögs
[256];

151 
	sUSBDesc
 {

152 
USBDescID
 
	mid
;

153 c⁄° 
USBDescDevi˚
 *
	mfuŒ
;

154 c⁄° 
USBDescDevi˚
 *
	mhigh
;

155 c⁄° * c⁄° *
	m°r
;

159 
usb_desc_devi˚
(c⁄° 
USBDescID
 *
id
, c⁄° 
USBDescDevi˚
 *
dev
,

160 
uöt8_t
 *
de°
, 
size_t
 
Àn
);

161 
usb_desc_devi˚_quÆifõr
(c⁄° 
USBDescDevi˚
 *
dev
,

162 
uöt8_t
 *
de°
, 
size_t
 
Àn
);

163 
usb_desc_c⁄fig
(c⁄° 
USBDescC⁄fig
 *
c⁄f
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
);

164 
usb_desc_iÁ˚_group
(c⁄° 
USBDescIÁ˚Assoc
 *
üd
, 
uöt8_t
 *
de°
,

165 
size_t
 
Àn
);

166 
usb_desc_iÁ˚
(c⁄° 
USBDescIÁ˚
 *
iÁ˚
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
);

167 
usb_desc_ídpoöt
(c⁄° 
USBDescEndpoöt
 *
ï
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
);

168 
usb_desc_Ÿhî
(c⁄° 
USBDescOthî
 *
desc
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
);

171 
usb_desc_öô
(
USBDevi˚
 *
dev
);

172 
usb_desc_©èch
(
USBDevi˚
 *
dev
);

173 
usb_desc_£t_°rög
(
USBDevi˚
 *
dev
, 
uöt8_t
 
ödex
, c⁄° *
°r
);

174 
usb_desc_¸óã_£rül
(
USBDevi˚
 *
dev
);

175 c⁄° *
usb_desc_gë_°rög
(
USBDevi˚
 *
dev
, 
uöt8_t
 
ödex
);

176 
usb_desc_°rög
(
USBDevi˚
 *
dev
, 
ödex
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
);

177 
usb_desc_gë_des¸ùt‹
(
USBDevi˚
 *
dev
, 
vÆue
, 
uöt8_t
 *
de°
, 
size_t
 
Àn
);

178 
usb_desc_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

179 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
);

	@dev-audio.c

32 
	~"qemu-comm⁄.h
"

33 
	~"hw/usb.h
"

34 
	~"hw/usb/desc.h
"

35 
	~"hw/hw.h
"

36 
	~"hw/audiodev.h
"

37 
	~"audio/audio.h
"

39 
	#USBAUDIO_VENDOR_NUM
 0x46f4

	)

40 
	#USBAUDIO_PRODUCT_NUM
 0x0002

	)

42 
	#DEV_CONFIG_VALUE
 1

	)

45 
	#DST_AC_HEADER
 1

	)

46 
	#DST_AC_INPUT_TERMINAL
 2

	)

47 
	#DST_AC_OUTPUT_TERMINAL
 3

	)

48 
	#DST_AC_FEATURE_UNIT
 6

	)

50 
	#DST_AS_GENERAL
 1

	)

51 
	#DST_AS_FORMAT_TYPE
 2

	)

53 
	#DST_EP_GENERAL
 1

	)

55 
	eusb_audio_°rögs
 {

56 
	mSTRING_NULL
,

57 
	mSTRING_MANUFACTURER
,

58 
	mSTRING_PRODUCT
,

59 
	mSTRING_SERIALNUMBER
,

60 
	mSTRING_CONFIG
,

61 
	mSTRING_USBAUDIO_CONTROL
,

62 
	mSTRING_INPUT_TERMINAL
,

63 
	mSTRING_FEATURE_UNIT
,

64 
	mSTRING_OUTPUT_TERMINAL
,

65 
	mSTRING_NULL_STREAM
,

66 
	mSTRING_REAL_STREAM
,

69 c⁄° 
USBDescSåögs
 
	gusb_audio_°rögèbÀ
 = {

70 [
STRING_MANUFACTURER
] = "QEMU",

71 [
STRING_PRODUCT
] = "QEMU USB Audio",

72 [
STRING_SERIALNUMBER
] = "1",

73 [
STRING_CONFIG
] = "Audio Configuration",

74 [
STRING_USBAUDIO_CONTROL
] = "Audio Device",

75 [
STRING_INPUT_TERMINAL
] = "Audio Output Pipe",

76 [
STRING_FEATURE_UNIT
] = "Audio Output Volume Control",

77 [
STRING_OUTPUT_TERMINAL
] = "Audio Output Terminal",

78 [
STRING_NULL_STREAM
] = "Audio Output - Disabled",

79 [
STRING_REAL_STREAM
] = "Audio Output - 48 kHz Stereo",

82 
	#U16
(
x
Ë((xË& 0xff), (((xË>> 8Ë& 0xff)

	)

83 
	#U24
(
x
Ë
	`U16
(x), (((xË>> 16Ë& 0xff)

	)

84 
	#U32
(
x
Ë
	`U24
(x), (((xË>> 24Ë& 0xff)

	)

89 
	#USBAUDIO_PACKET_SIZE
 192

	)

90 
	#USBAUDIO_SAMPLE_RATE
 48000

	)

91 
	#USBAUDIO_PACKET_INTERVAL
 1

	)

93 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚
[] = {

95 .
bI¡îÁ˚Numbî
 = 0,

96 .
	gbNumEndpoöts
 = 0,

97 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_AUDIO
,

98 .
	gbI¡îÁ˚SubCœss
 = 
USB_SUBCLASS_AUDIO_CONTROL
,

99 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x04,

100 .
	giI¡îÁ˚
 = 
STRING_USBAUDIO_CONTROL
,

101 .
	gndesc
 = 4,

102 .
	gdescs
 = (
USBDescOthî
[]) {

105 .
d©a
 = (
uöt8_t
[]) {

107 
USB_DT_CS_INTERFACE
,

108 
DST_AC_HEADER
,

109 
U16
(0x0100),

110 
U16
(0x2b),

116 .
	gd©a
 = (
uöt8_t
[]) {

118 
USB_DT_CS_INTERFACE
,

119 
DST_AC_INPUT_TERMINAL
,

121 
U16
(0x0101),

124 
U16
(0x0003),

126 
STRING_INPUT_TERMINAL
,

130 .
	gd©a
 = (
uöt8_t
[]) {

132 
USB_DT_CS_INTERFACE
,

133 
DST_AC_FEATURE_UNIT
,

137 
U16
(0x0001),

138 
U16
(0x0002),

139 
U16
(0x0002),

140 
STRING_FEATURE_UNIT
,

144 .
	gd©a
 = (
uöt8_t
[]) {

146 
USB_DT_CS_INTERFACE
,

147 
DST_AC_OUTPUT_TERMINAL
,

149 
U16
(0x0301),

152 
STRING_OUTPUT_TERMINAL
,

157 .
	gbI¡îÁ˚Numbî
 = 1,

158 .
	gbA…î«ãSëtög
 = 0,

159 .
	gbNumEndpoöts
 = 0,

160 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_AUDIO
,

161 .
	gbI¡îÁ˚SubCœss
 = 
USB_SUBCLASS_AUDIO_STREAMING
,

162 .
	giI¡îÁ˚
 = 
STRING_NULL_STREAM
,

164 .
	gbI¡îÁ˚Numbî
 = 1,

165 .
	gbA…î«ãSëtög
 = 1,

166 .
	gbNumEndpoöts
 = 1,

167 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_AUDIO
,

168 .
	gbI¡îÁ˚SubCœss
 = 
USB_SUBCLASS_AUDIO_STREAMING
,

169 .
	giI¡îÁ˚
 = 
STRING_REAL_STREAM
,

170 .
	gndesc
 = 2,

171 .
	gdescs
 = (
USBDescOthî
[]) {

174 .
d©a
 = (
uöt8_t
[]) {

176 
USB_DT_CS_INTERFACE
,

177 
DST_AS_GENERAL
,

184 .
	gd©a
 = (
uöt8_t
[]) {

186 
USB_DT_CS_INTERFACE
,

187 
DST_AS_FORMAT_TYPE
,

193 
U24
(
USBAUDIO_SAMPLE_RATE
),

197 .
	gïs
 = (
USBDescEndpoöt
[]) {

199 .
bEndpoötAddªss
 = 
USB_DIR_OUT
 | 0x01,

200 .
	gbmAâribuãs
 = 0x0d,

201 .
	gwMaxPackëSize
 = 
USBAUDIO_PACKET_SIZE
,

202 .
	gbI¡îvÆ
 = 1,

203 .
	gis_audio
 = 1,

206 .
	gexåa
 = (
uöt8_t
[]) {

208 
USB_DT_CS_ENDPOINT
,

209 
DST_EP_GENERAL
,

212 
U16
(0x0000),

219 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚
 = {

220 .
bcdUSB
 = 0x0200,

221 .
	gbMaxPackëSize0
 = 64,

222 .
	gbNumC⁄figuøti⁄s
 = 1,

223 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

225 .
bNumI¡îÁ˚s
 = 2,

226 .
	gbC⁄figuøti⁄VÆue
 = 
DEV_CONFIG_VALUE
,

227 .
	giC⁄figuøti⁄
 = 
STRING_CONFIG
,

228 .
	gbmAâribuãs
 = 0xc0,

229 .
	gbMaxPowî
 = 0x32,

230 .
	gnif
 = 
ARRAY_SIZE
(
desc_iÁ˚
),

231 .
	gifs
 = 
desc_iÁ˚
,

236 c⁄° 
USBDesc
 
	gdesc_audio
 = {

237 .
id
 = {

238 .
idVíd‹
 = 
USBAUDIO_VENDOR_NUM
,

239 .
	gidProdu˘
 = 
USBAUDIO_PRODUCT_NUM
,

240 .
	gbcdDevi˚
 = 0,

241 .
	giM™uÁ˘uªr
 = 
STRING_MANUFACTURER
,

242 .
	giProdu˘
 = 
STRING_PRODUCT
,

243 .
	giSîülNumbî
 = 
STRING_SERIALNUMBER
,

245 .
	gfuŒ
 = &
desc_devi˚
,

246 .
	g°r
 = 
usb_audio_°rögèbÀ
,

257 
	eusb_audio_Æt£t
 {

258 
	mALTSET_OFF
 = 0x00,

259 
	mALTSET_ON
 = 0x01,

265 
	#CR_SET_CUR
 0x01

	)

266 
	#CR_GET_CUR
 0x81

	)

267 
	#CR_SET_MIN
 0x02

	)

268 
	#CR_GET_MIN
 0x82

	)

269 
	#CR_SET_MAX
 0x03

	)

270 
	#CR_GET_MAX
 0x83

	)

271 
	#CR_SET_RES
 0x04

	)

272 
	#CR_GET_RES
 0x84

	)

273 
	#CR_SET_MEM
 0x05

	)

274 
	#CR_GET_MEM
 0x85

	)

275 
	#CR_GET_STAT
 0xff

	)

280 
	#MUTE_CONTROL
 0x01

	)

281 
	#VOLUME_CONTROL
 0x02

	)

282 
	#BASS_CONTROL
 0x03

	)

283 
	#MID_CONTROL
 0x04

	)

284 
	#TREBLE_CONTROL
 0x05

	)

285 
	#GRAPHIC_EQUALIZER_CONTROL
 0x06

	)

286 
	#AUTOMATIC_GAIN_CONTROL
 0x07

	)

287 
	#DELAY_CONTROL
 0x08

	)

288 
	#BASS_BOOST_CONTROL
 0x09

	)

289 
	#LOUDNESS_CONTROL
 0x0a

	)

295 
	s°ªambuf
 {

296 
uöt8_t
 *
	md©a
;

297 
uöt32_t
 
	msize
;

298 
uöt32_t
 
	m¥od
;

299 
uöt32_t
 
	mc⁄s
;

302 
	$°ªambuf_öô
(
°ªambuf
 *
buf
, 
uöt32_t
 
size
)

304 
	`g_‰ì
(
buf
->
d©a
);

305 
buf
->
size
 = sizê- (sizê% 
USBAUDIO_PACKET_SIZE
);

306 
buf
->
d©a
 = 
	`g_mÆloc
(buf->
size
);

307 
buf
->
¥od
 = 0;

308 
buf
->
c⁄s
 = 0;

309 
	}
}

311 
	$°ªambuf_föi
(
°ªambuf
 *
buf
)

313 
	`g_‰ì
(
buf
->
d©a
);

314 
buf
->
d©a
 = 
NULL
;

315 
	}
}

317 
	$°ªambuf_put
(
°ªambuf
 *
buf
, 
USBPackë
 *
p
)

319 
uöt32_t
 
‰ì
 = 
buf
->
size
 - (buf->
¥od
 - buf->
c⁄s
);

321 i‡(!
‰ì
) {

324 
	`as£π
(
‰ì
 >
USBAUDIO_PACKET_SIZE
);

325 
	`usb_∑ckë_c›y
(
p
, 
buf
->
d©a
 + (buf->
¥od
 % buf->
size
),

326 
USBAUDIO_PACKET_SIZE
);

327 
buf
->
¥od
 +
USBAUDIO_PACKET_SIZE
;

328  
USBAUDIO_PACKET_SIZE
;

329 
	}
}

331 
uöt8_t
 *
	$°ªambuf_gë
(
°ªambuf
 *
buf
)

333 
uöt32_t
 
u£d
 = 
buf
->
¥od
 - buf->
c⁄s
;

334 
uöt8_t
 *
d©a
;

336 i‡(!
u£d
) {

337  
NULL
;

339 
	`as£π
(
u£d
 >
USBAUDIO_PACKET_SIZE
);

340 
d©a
 = 
buf
->d©®+ (buf->
c⁄s
 % buf->
size
);

341 
buf
->
c⁄s
 +
USBAUDIO_PACKET_SIZE
;

342  
d©a
;

343 
	}
}

345 
	sUSBAudioSèã
 {

347 
USBDevi˚
 
	mdev
;

348 
QEMUSoundC¨d
 
	mˇrd
;

352 
usb_audio_Æt£t
 
	mÆt£t
;

353 
aud£âögs
 
	mas
;

354 
SWVoi˚Out
 *
	mvoi˚
;

355 
boﬁ
 
	mmuã
;

356 
uöt8_t
 
	mvﬁ
[2];

357 
°ªambuf
 
	mbuf
;

358 } 
	mout
;

361 
uöt32_t
 
	mdebug
;

362 
uöt32_t
 
	mbuf„r
;

363 } 
	tUSBAudioSèã
;

365 
	$ouçut_ˇŒback
(*
›aque
, 
avaû
)

367 
USBAudioSèã
 *
s
 = 
›aque
;

368 
uöt8_t
 *
d©a
;

371 i‡(
avaû
 < 
USBAUDIO_PACKET_SIZE
) {

374 
d©a
 = 
	`°ªambuf_gë
(&
s
->
out
.
buf
);

375 i‡(
NULL
 =
d©a
) {

378 
	`AUD_wrôe
(
s
->
out
.
voi˚
, 
d©a
, 
USBAUDIO_PACKET_SIZE
);

379 
avaû
 -
USBAUDIO_PACKET_SIZE
;

381 
	}
}

383 
	$usb_audio_£t_ouçut_Æt£t
(
USBAudioSèã
 *
s
, 
Æt£t
)

385 
Æt£t
) {

386 
ALTSET_OFF
:

387 
	`°ªambuf_öô
(&
s
->
out
.
buf
, s->
buf„r
);

388 
	`AUD_£t_a˘ive_out
(
s
->
out
.
voi˚
, 
Ál£
);

390 
ALTSET_ON
:

391 
	`AUD_£t_a˘ive_out
(
s
->
out
.
voi˚
, 
åue
);

397 i‡(
s
->
debug
) {

398 
	`Ârötf
(
°dîr
, "usb-audio: së i¡îÁ˚ %d\n", 
Æt£t
);

400 
s
->
out
.
Æt£t
 =áltset;

402 
	}
}

407 
	#ATTRIB_ID
(
cs
, 
©åib
, 
idif
) \

408 (((
cs
Ë<< 24Ë| ((
©åib
Ë<< 16Ë| (
idif
))

	)

410 
	$usb_audio_gë_c⁄åﬁ
(
USBAudioSèã
 *
s
, 
uöt8_t
 
©åib
,

411 
uöt16_t
 
cs˙
, uöt16_à
idif
,

412 
Àngth
, 
uöt8_t
 *
d©a
)

414 
uöt8_t
 
cs
 = 
cs˙
 >> 8;

415 
uöt8_t
 
˙
 = 
cs˙
 - 1;

416 
uöt32_t
 
aid
 = 
	`ATTRIB_ID
(
cs
, 
©åib
, 
idif
);

417 
ªt
 = 
USB_RET_STALL
;

419 
aid
) {

420 
	`ATTRIB_ID
(
MUTE_CONTROL
, 
CR_GET_CUR
, 0x0200):

421 
d©a
[0] = 
s
->
out
.
muã
;

422 
ªt
 = 1;

424 
	`ATTRIB_ID
(
VOLUME_CONTROL
, 
CR_GET_CUR
, 0x0200):

425 i‡(
˙
 < 2) {

426 
uöt16_t
 
vﬁ
 = (
s
->
out
.vﬁ[
˙
] * 0x8800 + 127) / 255 + 0x8000;

427 
d©a
[0] = 
vﬁ
;

428 
d©a
[1] = 
vﬁ
 >> 8;

429 
ªt
 = 2;

432 
	`ATTRIB_ID
(
VOLUME_CONTROL
, 
CR_GET_MIN
, 0x0200):

433 i‡(
˙
 < 2) {

434 
d©a
[0] = 0x01;

435 
d©a
[1] = 0x80;

436 
ªt
 = 2;

439 
	`ATTRIB_ID
(
VOLUME_CONTROL
, 
CR_GET_MAX
, 0x0200):

440 i‡(
˙
 < 2) {

441 
d©a
[0] = 0x00;

442 
d©a
[1] = 0x08;

443 
ªt
 = 2;

446 
	`ATTRIB_ID
(
VOLUME_CONTROL
, 
CR_GET_RES
, 0x0200):

447 i‡(
˙
 < 2) {

448 
d©a
[0] = 0x88;

449 
d©a
[1] = 0x00;

450 
ªt
 = 2;

455  
ªt
;

456 
	}
}

457 
	$usb_audio_£t_c⁄åﬁ
(
USBAudioSèã
 *
s
, 
uöt8_t
 
©åib
,

458 
uöt16_t
 
cs˙
, uöt16_à
idif
,

459 
Àngth
, 
uöt8_t
 *
d©a
)

461 
uöt8_t
 
cs
 = 
cs˙
 >> 8;

462 
uöt8_t
 
˙
 = 
cs˙
 - 1;

463 
uöt32_t
 
aid
 = 
	`ATTRIB_ID
(
cs
, 
©åib
, 
idif
);

464 
ªt
 = 
USB_RET_STALL
;

465 
boﬁ
 
£t_vﬁ
 = 
Ál£
;

467 
aid
) {

468 
	`ATTRIB_ID
(
MUTE_CONTROL
, 
CR_SET_CUR
, 0x0200):

469 
s
->
out
.
muã
 = 
d©a
[0] & 1;

470 
£t_vﬁ
 = 
åue
;

471 
ªt
 = 0;

473 
	`ATTRIB_ID
(
VOLUME_CONTROL
, 
CR_SET_CUR
, 0x0200):

474 i‡(
˙
 < 2) {

475 
uöt16_t
 
vﬁ
 = 
d©a
[0] + (data[1] << 8);

477 i‡(
s
->
debug
) {

478 
	`Ârötf
(
°dîr
, "usb-audio: vﬁ %04x\n", (
uöt16_t
)
vﬁ
);

481 
vﬁ
 -= 0x8000;

482 
vﬁ
 = (vol * 255 + 0x4400) / 0x8800;

483 i‡(
vﬁ
 > 255) {

484 
vﬁ
 = 255;

487 
s
->
out
.
vﬁ
[
˙
] = vol;

488 
£t_vﬁ
 = 
åue
;

489 
ªt
 = 0;

494 i‡(
£t_vﬁ
) {

495 i‡(
s
->
debug
) {

496 
	`Ârötf
(
°dîr
, "usb-audio: mute %d,Üvol %3d,Ñvol %3d\n",

497 
s
->
out
.
muã
, s->out.
vﬁ
[0], s->out.vol[1]);

499 
	`AUD_£t_vﬁume_out
(
s
->
out
.
voi˚
, s->out.
muã
,

500 
s
->
out
.
vﬁ
[0], s->out.vol[1]);

503  
ªt
;

504 
	}
}

506 
	$usb_audio_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

507 
ªque°
, 
vÆue
, 
ödex
,

508 
Àngth
, 
uöt8_t
 *
d©a
)

510 
USBAudioSèã
 *
s
 = 
	`DO_UPCAST
(USBAudioSèã, 
dev
, dev);

511 
ªt
 = 0;

513 i‡(
s
->
debug
) {

514 
	`Ârötf
(
°dîr
, "usb-audio: controlÅransaction: "

516 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
);

519 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

520 i‡(
ªt
 >= 0) {

521  
ªt
;

524 
ªque°
) {

525 
CœssI¡îÁ˚Reque°
 | 
CR_GET_CUR
:

526 
CœssI¡îÁ˚Reque°
 | 
CR_GET_MIN
:

527 
CœssI¡îÁ˚Reque°
 | 
CR_GET_MAX
:

528 
CœssI¡îÁ˚Reque°
 | 
CR_GET_RES
:

529 
ªt
 = 
	`usb_audio_gë_c⁄åﬁ
(
s
, 
ªque°
 & 0xff, 
vÆue
, 
ödex
,

530 
Àngth
, 
d©a
);

531 i‡(
ªt
 < 0) {

532 i‡(
s
->
debug
) {

533 
	`Ârötf
(
°dîr
, "usb-audio: fail: get control\n");

535 
Áû
;

539 
CœssI¡îÁ˚OutReque°
 | 
CR_SET_CUR
:

540 
CœssI¡îÁ˚OutReque°
 | 
CR_SET_MIN
:

541 
CœssI¡îÁ˚OutReque°
 | 
CR_SET_MAX
:

542 
CœssI¡îÁ˚OutReque°
 | 
CR_SET_RES
:

543 
ªt
 = 
	`usb_audio_£t_c⁄åﬁ
(
s
, 
ªque°
 & 0xff, 
vÆue
, 
ödex
,

544 
Àngth
, 
d©a
);

545 i‡(
ªt
 < 0) {

546 i‡(
s
->
debug
) {

547 
	`Ârötf
(
°dîr
, "usb-audio: fail: set control\n");

549 
Áû
;

554 
Áû
:

555 i‡(
s
->
debug
) {

556 
	`Ârötf
(
°dîr
, "usb-audio: failed controlÅransaction: "

558 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
);

560 
ªt
 = 
USB_RET_STALL
;

563  
ªt
;

564 
	}
}

566 
	$usb_audio_£t_öãrÁ˚
(
USBDevi˚
 *
dev
, 
iÁ˚
,

567 
ﬁd
, 
vÆue
)

569 
USBAudioSèã
 *
s
 = 
	`DO_UPCAST
(USBAudioSèã, 
dev
, dev);

571 i‡(
iÁ˚
 == 1) {

572 
	`usb_audio_£t_ouçut_Æt£t
(
s
, 
vÆue
);

574 
	}
}

576 
	$usb_audio_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

578 
USBAudioSèã
 *
s
 = 
	`DO_UPCAST
(USBAudioSèã, 
dev
, dev);

580 i‡(
s
->
debug
) {

581 
	`Ârötf
(
°dîr
, "usb-audio:Ñeset\n");

583 
	`usb_audio_£t_ouçut_Æt£t
(
s
, 
ALTSET_OFF
);

584 
	}
}

586 
	$usb_audio_h™dÀ_d©aout
(
USBAudioSèã
 *
s
, 
USBPackë
 *
p
)

588 
rc
;

590 i‡(
s
->
out
.
Æt£t
 =
ALTSET_OFF
) {

591  
USB_RET_STALL
;

594 
rc
 = 
	`°ªambuf_put
(&
s
->
out
.
buf
, 
p
);

595 i‡(
rc
 < 
p
->
iov
.
size
 && 
s
->
debug
 > 1) {

596 
	`Ârötf
(
°dîr
, "usb-audio: output overrun (%zd bytes)\n",

597 
p
->
iov
.
size
 - 
rc
);

601 
	}
}

603 
	$usb_audio_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

605 
USBAudioSèã
 *
s
 = (USBAudioSèã *Ë
dev
;

606 
ªt
 = 0;

608 
p
->
pid
) {

609 
USB_TOKEN_OUT
:

610 
p
->
ï
->
ƒ
) {

612 
ªt
 = 
	`usb_audio_h™dÀ_d©aout
(
s
, 
p
);

615 
Áû
;

620 
Áû
:

621 
ªt
 = 
USB_RET_STALL
;

624 i‡(
ªt
 =
USB_RET_STALL
 && 
s
->
debug
) {

625 
	`Ârötf
(
°dîr
, "usb-audio: failed dataÅransaction: "

627 
p
->
pid
,Ö->
ï
->
ƒ
,Ö->
iov
.
size
);

629  
ªt
;

630 
	}
}

632 
	$usb_audio_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

634 
USBAudioSèã
 *
s
 = 
	`DO_UPCAST
(USBAudioSèã, 
dev
, dev);

636 i‡(
s
->
debug
) {

637 
	`Ârötf
(
°dîr
, "usb-audio: destroy\n");

640 
	`usb_audio_£t_ouçut_Æt£t
(
s
, 
ALTSET_OFF
);

641 
	`AUD_˛o£_out
(&
s
->
ˇrd
, s->
out
.
voi˚
);

642 
	`AUD_ªmove_ˇrd
(&
s
->
ˇrd
);

644 
	`°ªambuf_föi
(&
s
->
out
.
buf
);

645 
	}
}

647 
	$usb_audio_öô‚
(
USBDevi˚
 *
dev
)

649 
USBAudioSèã
 *
s
 = 
	`DO_UPCAST
(USBAudioSèã, 
dev
, dev);

651 
	`usb_desc_¸óã_£rül
(
dev
);

652 
	`usb_desc_öô
(
dev
);

653 
s
->
dev
.
›aque
 = s;

654 
	`AUD_ªgi°î_ˇrd
("usb-audio", &
s
->
ˇrd
);

656 
s
->
out
.
Æt£t
 = 
ALTSET_OFF
;

657 
s
->
out
.
muã
 = 
Ál£
;

658 
s
->
out
.
vﬁ
[0] = 240;

659 
s
->
out
.
vﬁ
[1] = 240;

660 
s
->
out
.
as
.
‰eq
 = 
USBAUDIO_SAMPLE_RATE
;

661 
s
->
out
.
as
.
nch™√ls
 = 2;

662 
s
->
out
.
as
.
fmt
 = 
AUD_FMT_S16
;

663 
s
->
out
.
as
.
ídü¬ess
 = 0;

664 
	`°ªambuf_öô
(&
s
->
out
.
buf
, s->
buf„r
);

666 
s
->
out
.
voi˚
 = 
	`AUD_›í_out
(&s->
ˇrd
, s->out.voice, "usb-audio",

667 
s
, 
ouçut_ˇŒback
, &s->
out
.
as
);

668 
	`AUD_£t_vﬁume_out
(
s
->
out
.
voi˚
, s->out.
muã
, s->out.
vﬁ
[0], s->out.vol[1]);

669 
	`AUD_£t_a˘ive_out
(
s
->
out
.
voi˚
, 0);

671 
	}
}

673 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_audio
 = {

674 .
«me
 = "usb-audio",

675 .
	gunmigøèbÀ
 = 1,

678 
Pr›îty
 
	gusb_audio_¥›îtõs
[] = {

679 
DEFINE_PROP_UINT32
("debug", 
USBAudioSèã
, 
debug
, 0),

680 
DEFINE_PROP_UINT32
("buf„r", 
USBAudioSèã
, 
buf„r
,

681 8 * 
USBAUDIO_PACKET_SIZE
),

682 
DEFINE_PROP_END_OF_LIST
(),

685 
	$usb_audio_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

687 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

688 
USBDevi˚Cœss
 *
k
 = 
	`USB_DEVICE_CLASS
(
kœss
);

690 
dc
->
vmsd
 = &
vm°©e_usb_audio
;

691 
dc
->
¥›s
 = 
usb_audio_¥›îtõs
;

692 
k
->
¥odu˘_desc
 = "QEMU USB Audio Interface";

693 
k
->
usb_desc
 = &
desc_audio
;

694 
k
->
öô
 = 
usb_audio_öô‚
;

695 
k
->
h™dÀ_ª£t
 = 
usb_audio_h™dÀ_ª£t
;

696 
k
->
h™dÀ_c⁄åﬁ
 = 
usb_audio_h™dÀ_c⁄åﬁ
;

697 
k
->
h™dÀ_d©a
 = 
usb_audio_h™dÀ_d©a
;

698 
k
->
h™dÀ_de°roy
 = 
usb_audio_h™dÀ_de°roy
;

699 
k
->
£t_öãrÁ˚
 = 
usb_audio_£t_öãrÁ˚
;

700 
	}
}

702 
Ty≥Info
 
	gusb_audio_öfo
 = {

703 .
«me
 = "usb-audio",

704 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

705 .
	gö°™˚_size
 = (
USBAudioSèã
),

706 .
	g˛ass_öô
 = 
usb_audio_˛ass_öô
,

709 
	$usb_audio_ªgi°î_ty≥s
()

711 
	`ty≥_ªgi°î_°©ic
(&
usb_audio_öfo
);

712 
	`usb_Àgacy_ªgi°î
("usb-audio", "audio", 
NULL
);

713 
	}
}

715 
ty≥_öô
(
usb_audio_ªgi°î_ty≥s
)

	@dev-bluetooth.c

21 
	~"qemu-comm⁄.h
"

22 
	~"hw/usb.h
"

23 
	~"hw/usb/desc.h
"

24 
	~"√t.h
"

25 
	~"hw/bt.h
"

27 
	sUSBBtSèã
 {

28 
USBDevi˚
 
	mdev
;

29 
HCIInfo
 *
	mhci
;

31 
	mc⁄fig
;

33 
	#CFIFO_LEN_MASK
 255

	)

34 
	#DFIFO_LEN_MASK
 4095

	)

35 
	susb_hci_ö_fifo_s
 {

36 
uöt8_t
 
	md©a
[(
DFIFO_LEN_MASK
 + 1) * 2];

38 
uöt8_t
 *
	md©a
;

39 
	mÀn
;

40 } 
	mfifo
[
CFIFO_LEN_MASK
 + 1];

41 
	md°¨t
, 
	mdÀn
, 
	mdsize
, 
	m°¨t
, 
	mÀn
;

42 } 
	mevt
, 
	ma˛
, 
	msco
;

44 
	susb_hci_out_fifo_s
 {

45 
uöt8_t
 
	md©a
[4096];

46 
	mÀn
;

47 } 
	moutcmd
, 
	mouè˛
, 
	moutsco
;

50 
	#USB_EVT_EP
 1

	)

51 
	#USB_ACL_EP
 2

	)

52 
	#USB_SCO_EP
 3

	)

55 
	mSTR_MANUFACTURER
 = 1,

56 
	mSTR_SERIALNUMBER
,

59 c⁄° 
USBDescSåögs
 
	gdesc_°rögs
 = {

60 [
STR_MANUFACTURER
] = "QEMU",

61 [
STR_SERIALNUMBER
] = "1",

64 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_bluëoŸh
[] = {

66 .
bI¡îÁ˚Numbî
 = 0,

67 .
	gbNumEndpoöts
 = 3,

68 .
	gbI¡îÁ˚Cœss
 = 0xe0,

69 .
	gbI¡îÁ˚SubCœss
 = 0x01,

70 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x01,

71 .
	gïs
 = (
USBDescEndpoöt
[]) {

73 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 
USB_EVT_EP
,

74 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_INT
,

75 .
	gwMaxPackëSize
 = 0x10,

76 .
	gbI¡îvÆ
 = 0x02,

79 .
	gbEndpoötAddªss
 = 
USB_DIR_OUT
 | 
USB_ACL_EP
,

80 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

81 .
	gwMaxPackëSize
 = 0x40,

82 .
	gbI¡îvÆ
 = 0x0a,

85 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
USB_ACL_EP
,

86 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

87 .
	gwMaxPackëSize
 = 0x40,

88 .
	gbI¡îvÆ
 = 0x0a,

92 .
	gbI¡îÁ˚Numbî
 = 1,

93 .
	gbA…î«ãSëtög
 = 0,

94 .
	gbNumEndpoöts
 = 2,

95 .
	gbI¡îÁ˚Cœss
 = 0xe0,

96 .
	gbI¡îÁ˚SubCœss
 = 0x01,

97 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x01,

98 .
	gïs
 = (
USBDescEndpoöt
[]) {

100 .
bEndpoötAddªss
 = 
USB_DIR_OUT
 | 
USB_SCO_EP
,

101 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

102 .
	gwMaxPackëSize
 = 0,

103 .
	gbI¡îvÆ
 = 0x01,

106 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
USB_SCO_EP
,

107 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

108 .
	gwMaxPackëSize
 = 0,

109 .
	gbI¡îvÆ
 = 0x01,

113 .
	gbI¡îÁ˚Numbî
 = 1,

114 .
	gbA…î«ãSëtög
 = 1,

115 .
	gbNumEndpoöts
 = 2,

116 .
	gbI¡îÁ˚Cœss
 = 0xe0,

117 .
	gbI¡îÁ˚SubCœss
 = 0x01,

118 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x01,

119 .
	gïs
 = (
USBDescEndpoöt
[]) {

121 .
bEndpoötAddªss
 = 
USB_DIR_OUT
 | 
USB_SCO_EP
,

122 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

123 .
	gwMaxPackëSize
 = 0x09,

124 .
	gbI¡îvÆ
 = 0x01,

127 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
USB_SCO_EP
,

128 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

129 .
	gwMaxPackëSize
 = 0x09,

130 .
	gbI¡îvÆ
 = 0x01,

134 .
	gbI¡îÁ˚Numbî
 = 1,

135 .
	gbA…î«ãSëtög
 = 2,

136 .
	gbNumEndpoöts
 = 2,

137 .
	gbI¡îÁ˚Cœss
 = 0xe0,

138 .
	gbI¡îÁ˚SubCœss
 = 0x01,

139 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x01,

140 .
	gïs
 = (
USBDescEndpoöt
[]) {

142 .
bEndpoötAddªss
 = 
USB_DIR_OUT
 | 
USB_SCO_EP
,

143 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

144 .
	gwMaxPackëSize
 = 0x11,

145 .
	gbI¡îvÆ
 = 0x01,

148 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
USB_SCO_EP
,

149 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

150 .
	gwMaxPackëSize
 = 0x11,

151 .
	gbI¡îvÆ
 = 0x01,

155 .
	gbI¡îÁ˚Numbî
 = 1,

156 .
	gbA…î«ãSëtög
 = 3,

157 .
	gbNumEndpoöts
 = 2,

158 .
	gbI¡îÁ˚Cœss
 = 0xe0,

159 .
	gbI¡îÁ˚SubCœss
 = 0x01,

160 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x01,

161 .
	gïs
 = (
USBDescEndpoöt
[]) {

163 .
bEndpoötAddªss
 = 
USB_DIR_OUT
 | 
USB_SCO_EP
,

164 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

165 .
	gwMaxPackëSize
 = 0x19,

166 .
	gbI¡îvÆ
 = 0x01,

169 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
USB_SCO_EP
,

170 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

171 .
	gwMaxPackëSize
 = 0x19,

172 .
	gbI¡îvÆ
 = 0x01,

176 .
	gbI¡îÁ˚Numbî
 = 1,

177 .
	gbA…î«ãSëtög
 = 4,

178 .
	gbNumEndpoöts
 = 2,

179 .
	gbI¡îÁ˚Cœss
 = 0xe0,

180 .
	gbI¡îÁ˚SubCœss
 = 0x01,

181 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x01,

182 .
	gïs
 = (
USBDescEndpoöt
[]) {

184 .
bEndpoötAddªss
 = 
USB_DIR_OUT
 | 
USB_SCO_EP
,

185 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

186 .
	gwMaxPackëSize
 = 0x21,

187 .
	gbI¡îvÆ
 = 0x01,

190 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
USB_SCO_EP
,

191 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

192 .
	gwMaxPackëSize
 = 0x21,

193 .
	gbI¡îvÆ
 = 0x01,

197 .
	gbI¡îÁ˚Numbî
 = 1,

198 .
	gbA…î«ãSëtög
 = 5,

199 .
	gbNumEndpoöts
 = 2,

200 .
	gbI¡îÁ˚Cœss
 = 0xe0,

201 .
	gbI¡îÁ˚SubCœss
 = 0x01,

202 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x01,

203 .
	gïs
 = (
USBDescEndpoöt
[]) {

205 .
bEndpoötAddªss
 = 
USB_DIR_OUT
 | 
USB_SCO_EP
,

206 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

207 .
	gwMaxPackëSize
 = 0x31,

208 .
	gbI¡îvÆ
 = 0x01,

211 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
USB_SCO_EP
,

212 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_ISOC
,

213 .
	gwMaxPackëSize
 = 0x31,

214 .
	gbI¡îvÆ
 = 0x01,

220 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_bluëoŸh
 = {

221 .
bcdUSB
 = 0x0110,

222 .
	gbDevi˚Cœss
 = 0xe0,

223 .
	gbDevi˚SubCœss
 = 0x01,

224 .
	gbDevi˚PrŸocﬁ
 = 0x01,

225 .
	gbMaxPackëSize0
 = 64,

226 .
	gbNumC⁄figuøti⁄s
 = 1,

227 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

229 .
bNumI¡îÁ˚s
 = 2,

230 .
	gbC⁄figuøti⁄VÆue
 = 1,

231 .
	gbmAâribuãs
 = 0xc0,

232 .
	gbMaxPowî
 = 0,

233 .
	gnif
 = 
ARRAY_SIZE
(
desc_iÁ˚_bluëoŸh
),

234 .
	gifs
 = 
desc_iÁ˚_bluëoŸh
,

239 c⁄° 
USBDesc
 
	gdesc_bluëoŸh
 = {

240 .
id
 = {

241 .
idVíd‹
 = 0x0a12,

242 .
	gidProdu˘
 = 0x0001,

243 .
	gbcdDevi˚
 = 0x1958,

244 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

245 .
	giProdu˘
 = 0,

246 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

248 .
	gfuŒ
 = &
desc_devi˚_bluëoŸh
,

249 .
	g°r
 = 
desc_°rögs
,

252 
	$usb_bt_fifo_ª£t
(
usb_hci_ö_fifo_s
 *
fifo
)

254 
fifo
->
d°¨t
 = 0;

255 
fifo
->
dÀn
 = 0;

256 
fifo
->
dsize
 = 
DFIFO_LEN_MASK
 + 1;

257 
fifo
->
°¨t
 = 0;

258 
fifo
->
Àn
 = 0;

259 
	}
}

261 
	$usb_bt_fifo_íqueue
(
usb_hci_ö_fifo_s
 *
fifo
,

262 c⁄° 
uöt8_t
 *
d©a
, 
Àn
)

264 
off
 = 
fifo
->
d°¨t
 + fifo->
dÀn
;

265 
uöt8_t
 *
buf
;

267 
fifo
->
dÀn
 +
Àn
;

268 i‡(
off
 <
DFIFO_LEN_MASK
) {

269 i‡(
off
 + 
Àn
 > 
DFIFO_LEN_MASK
 + 1 &&

270 (
fifo
->
dsize
 = 
off
 + 
Àn
Ë> (
DFIFO_LEN_MASK
 + 1) * 2) {

271 
	`Ârötf
(
°dîr
, "%s: c™'àÆlo¯%òbyãs\n", 
__FUNCTION__
, 
Àn
);

272 
	`exô
(-1);

274 
buf
 = 
fifo
->
d©a
 + 
off
;

276 i‡(
fifo
->
dÀn
 > fifo->
dsize
) {

277 
	`Ârötf
(
°dîr
, "%s: c™'àÆlo¯%òbyãs\n", 
__FUNCTION__
, 
Àn
);

278 
	`exô
(-1);

280 
buf
 = 
fifo
->
d©a
 + 
off
 - fifo->
dsize
;

283 
off
 = (
fifo
->
°¨t
 + fifo->
Àn
 ++Ë& 
CFIFO_LEN_MASK
;

284 
fifo
->fifo[
off
].
d©a
 = 
	`mem˝y
(
buf
, d©a, 
Àn
);

285 
fifo
->fifo[
off
].
Àn
 =Üen;

286 
	}
}

288 
ölöe
 
	$usb_bt_fifo_dequeue
(
usb_hci_ö_fifo_s
 *
fifo
,

289 
USBPackë
 *
p
)

291 
Àn
;

293 i‡(
	`likñy
(!
fifo
->
Àn
))

294  
USB_RET_STALL
;

296 
Àn
 = 
	`MIN
(
p
->
iov
.
size
, 
fifo
->fifo[fifo->
°¨t
].len);

297 
	`usb_∑ckë_c›y
(
p
, 
fifo
->fifo[fifo->
°¨t
].
d©a
, 
Àn
);

298 i‡(
Àn
 =
p
->
iov
.
size
) {

299 
fifo
->fifo[fifo->
°¨t
].
Àn
 -=Üen;

300 
fifo
->fifo[fifo->
°¨t
].
d©a
 +
Àn
;

302 
fifo
->
°¨t
 ++;

303 
fifo
->
°¨t
 &
CFIFO_LEN_MASK
;

304 
fifo
->
Àn
 --;

307 
fifo
->
d°¨t
 +
Àn
;

308 
fifo
->
dÀn
 -
Àn
;

309 i‡(
fifo
->
d°¨t
 >fifo->
dsize
) {

310 
fifo
->
d°¨t
 = 0;

311 
fifo
->
dsize
 = 
DFIFO_LEN_MASK
 + 1;

314  
Àn
;

315 
	}
}

317 
ölöe
 
usb_bt_fifo_out_íqueue
(
USBBtSèã
 *
s
,

318 
usb_hci_out_fifo_s
 *
fifo
,

319 (*
£nd
)(
HCIInfo
 *, c⁄° 
uöt8_t
 *, ),

320 (*
com∂ëe
)(c⁄° 
uöt8_t
 *, ),

321 
USBPackë
 *
p
)

323 
	`usb_∑ckë_c›y
(
p
, 
fifo
->
d©a
 + fifo->
Àn
,Ö->
iov
.
size
);

324 
fifo
->
Àn
 +
p
->
iov
.
size
;

325 i‡(
	`com∂ëe
(
fifo
->
d©a
, fifo->
Àn
)) {

326 
	`£nd
(
s
->
hci
, 
fifo
->
d©a
, fifo->
Àn
);

327 
fifo
->
Àn
 = 0;

331 
	}
}

333 
	$usb_bt_hci_cmd_com∂ëe
(c⁄° 
uöt8_t
 *
d©a
, 
Àn
)

335 
Àn
 -
HCI_COMMAND_HDR_SIZE
;

336  
Àn
 >= 0 &&

337 
Àn
 >((
hci_comm™d_hdr
 *Ë
d©a
)->
∂í
;

338 
	}
}

340 
	$usb_bt_hci_a˛_com∂ëe
(c⁄° 
uöt8_t
 *
d©a
, 
Àn
)

342 
Àn
 -
HCI_ACL_HDR_SIZE
;

343  
Àn
 >= 0 &&

344 
Àn
 >
	`À16_to_˝u
(((
hci_a˛_hdr
 *Ë
d©a
)->
dÀn
);

345 
	}
}

347 
	$usb_bt_hci_sco_com∂ëe
(c⁄° 
uöt8_t
 *
d©a
, 
Àn
)

349 
Àn
 -
HCI_SCO_HDR_SIZE
;

350  
Àn
 >= 0 &&

351 
Àn
 >((
hci_sco_hdr
 *Ë
d©a
)->
dÀn
;

352 
	}
}

354 
	$usb_bt_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

356 
USBBtSèã
 *
s
 = (USBBtSèã *Ë
dev
->
›aque
;

358 
	`usb_bt_fifo_ª£t
(&
s
->
evt
);

359 
	`usb_bt_fifo_ª£t
(&
s
->
a˛
);

360 
	`usb_bt_fifo_ª£t
(&
s
->
sco
);

361 
s
->
outcmd
.
Àn
 = 0;

362 
s
->
ouè˛
.
Àn
 = 0;

363 
s
->
outsco
.
Àn
 = 0;

364 
	}
}

366 
	$usb_bt_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

367 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

369 
USBBtSèã
 *
s
 = (USBBtSèã *Ë
dev
->
›aque
;

370 
ªt
;

372 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

373 i‡(
ªt
 >= 0) {

374 
ªque°
) {

375 
Devi˚Reque°
 | 
USB_REQ_GET_CONFIGURATION
:

376 
s
->
c⁄fig
 = 0;

378 
Devi˚OutReque°
 | 
USB_REQ_SET_CONFIGURATION
:

379 
s
->
c⁄fig
 = 1;

380 
	`usb_bt_fifo_ª£t
(&
s
->
evt
);

381 
	`usb_bt_fifo_ª£t
(&
s
->
a˛
);

382 
	`usb_bt_fifo_ª£t
(&
s
->
sco
);

385  
ªt
;

388 
ªt
 = 0;

389 
ªque°
) {

390 
I¡îÁ˚Reque°
 | 
USB_REQ_GET_STATUS
:

391 
EndpoötReque°
 | 
USB_REQ_GET_STATUS
:

392 
d©a
[0] = 0x00;

393 
d©a
[1] = 0x00;

394 
ªt
 = 2;

396 
I¡îÁ˚OutReque°
 | 
USB_REQ_CLEAR_FEATURE
:

397 
EndpoötOutReque°
 | 
USB_REQ_CLEAR_FEATURE
:

398 
Áû
;

399 
I¡îÁ˚OutReque°
 | 
USB_REQ_SET_FEATURE
:

400 
EndpoötOutReque°
 | 
USB_REQ_SET_FEATURE
:

401 
Áû
;

403 ((
USB_DIR_OUT
 | 
USB_TYPE_CLASS
 | 
USB_RECIP_DEVICE
) << 8):

404 i‡(
s
->
c⁄fig
)

405 
	`usb_bt_fifo_out_íqueue
(
s
, &s->
outcmd
, s->
hci
->
cmd_£nd
,

406 
usb_bt_hci_cmd_com∂ëe
, 
p
);

409 
Áû
:

410 
ªt
 = 
USB_RET_STALL
;

413  
ªt
;

414 
	}
}

416 
	$usb_bt_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

418 
USBBtSèã
 *
s
 = (USBBtSèã *Ë
dev
->
›aque
;

419 
ªt
 = 0;

421 i‡(!
s
->
c⁄fig
)

422 
Áû
;

424 
p
->
pid
) {

425 
USB_TOKEN_IN
:

426 
p
->
ï
->
ƒ
) {

427 
USB_EVT_EP
:

428 
ªt
 = 
	`usb_bt_fifo_dequeue
(&
s
->
evt
, 
p
);

431 
USB_ACL_EP
:

432 
ªt
 = 
	`usb_bt_fifo_dequeue
(&
s
->
a˛
, 
p
);

435 
USB_SCO_EP
:

436 
ªt
 = 
	`usb_bt_fifo_dequeue
(&
s
->
sco
, 
p
);

440 
Áû
;

444 
USB_TOKEN_OUT
:

445 
p
->
ï
->
ƒ
) {

446 
USB_ACL_EP
:

447 
	`usb_bt_fifo_out_íqueue
(
s
, &s->
ouè˛
, s->
hci
->
a˛_£nd
,

448 
usb_bt_hci_a˛_com∂ëe
, 
p
);

451 
USB_SCO_EP
:

452 
	`usb_bt_fifo_out_íqueue
(
s
, &s->
outsco
, s->
hci
->
sco_£nd
,

453 
usb_bt_hci_sco_com∂ëe
, 
p
);

457 
Áû
;

462 
Áû
:

463 
ªt
 = 
USB_RET_STALL
;

467  
ªt
;

468 
	}
}

470 
	$usb_bt_out_hci_∑ckë_evít
(*
›aque
,

471 c⁄° 
uöt8_t
 *
d©a
, 
Àn
)

473 
USBBtSèã
 *
s
 = (USBBtSèã *Ë
›aque
;

475 
	`usb_bt_fifo_íqueue
(&
s
->
evt
, 
d©a
, 
Àn
);

476 
	}
}

478 
	$usb_bt_out_hci_∑ckë_a˛
(*
›aque
,

479 c⁄° 
uöt8_t
 *
d©a
, 
Àn
)

481 
USBBtSèã
 *
s
 = (USBBtSèã *Ë
›aque
;

483 
	`usb_bt_fifo_íqueue
(&
s
->
a˛
, 
d©a
, 
Àn
);

484 
	}
}

486 
	$usb_bt_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

488 
USBBtSèã
 *
s
 = (USBBtSèã *Ë
dev
->
›aque
;

490 
s
->
hci
->
›aque
 = 
NULL
;

491 
s
->
hci
->
evt_ªcv
 = 
NULL
;

492 
s
->
hci
->
a˛_ªcv
 = 
NULL
;

493 
	}
}

495 
	$usb_bt_öô‚
(
USBDevi˚
 *
dev
)

497 
	`usb_desc_¸óã_£rül
(
dev
);

498 
	`usb_desc_öô
(
dev
);

500 
	}
}

502 
USBDevi˚
 *
	$usb_bt_öô
(
USBBus
 *
bus
, 
HCIInfo
 *
hci
)

504 
USBDevi˚
 *
dev
;

505 
USBBtSèã
 *
s
;

507 i‡(!
hci
)

508  
NULL
;

509 
dev
 = 
	`usb_¸óã_sim∂e
(
bus
, "usb-bt-dongle");

510 i‡(!
dev
) {

511  
NULL
;

513 
s
 = 
	`DO_UPCAST
(
USBBtSèã
, 
dev
, dev);

514 
s
->
dev
.
›aque
 = s;

516 
s
->
hci
 = hci;

517 
s
->
hci
->
›aque
 = s;

518 
s
->
hci
->
evt_ªcv
 = 
usb_bt_out_hci_∑ckë_evít
;

519 
s
->
hci
->
a˛_ªcv
 = 
usb_bt_out_hci_∑ckë_a˛
;

521 
	`usb_bt_h™dÀ_ª£t
(&
s
->
dev
);

523  
dev
;

524 
	}
}

526 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_bt
 = {

527 .
«me
 = "usb-bt",

528 .
	gunmigøèbÀ
 = 1,

531 
	$usb_bt_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

533 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

534 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

536 
uc
->
öô
 = 
usb_bt_öô‚
;

537 
uc
->
¥odu˘_desc
 = "QEMU BT dongle";

538 
uc
->
usb_desc
 = &
desc_bluëoŸh
;

539 
uc
->
h™dÀ_ª£t
 = 
usb_bt_h™dÀ_ª£t
;

540 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_bt_h™dÀ_c⁄åﬁ
;

541 
uc
->
h™dÀ_d©a
 = 
usb_bt_h™dÀ_d©a
;

542 
uc
->
h™dÀ_de°roy
 = 
usb_bt_h™dÀ_de°roy
;

543 
dc
->
vmsd
 = &
vm°©e_usb_bt
;

544 
	}
}

546 
Ty≥Info
 
	gbt_öfo
 = {

547 .
«me
 = "usb-bt-dongle",

548 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

549 .
	gö°™˚_size
 = (
USBBtSèã
),

550 .
	g˛ass_öô
 = 
usb_bt_˛ass_öô‚
,

553 
	$usb_bt_ªgi°î_ty≥s
()

555 
	`ty≥_ªgi°î_°©ic
(&
bt_öfo
);

556 
	}
}

558 
ty≥_öô
(
usb_bt_ªgi°î_ty≥s
)

	@dev-hid.c

25 
	~"hw/hw.h
"

26 
	~"c⁄sﬁe.h
"

27 
	~"hw/usb.h
"

28 
	~"hw/usb/desc.h
"

29 
	~"qemu-timî.h
"

30 
	~"hw/hid.h
"

33 
	#GET_REPORT
 0xa101

	)

34 
	#GET_IDLE
 0xa102

	)

35 
	#GET_PROTOCOL
 0xa103

	)

36 
	#SET_REPORT
 0x2109

	)

37 
	#SET_IDLE
 0x210a

	)

38 
	#SET_PROTOCOL
 0x210b

	)

41 
	#USB_DT_HID
 0x21

	)

42 
	#USB_DT_REPORT
 0x22

	)

43 
	#USB_DT_PHY
 0x23

	)

45 
	sUSBHIDSèã
 {

46 
USBDevi˚
 
	mdev
;

47 
USBEndpoöt
 *
	möå
;

48 
HIDSèã
 
	mhid
;

49 } 
	tUSBHIDSèã
;

52 
	mSTR_MANUFACTURER
 = 1,

53 
	mSTR_PRODUCT_MOUSE
,

54 
	mSTR_PRODUCT_TABLET
,

55 
	mSTR_PRODUCT_KEYBOARD
,

56 
	mSTR_SERIALNUMBER
,

57 
	mSTR_CONFIG_MOUSE
,

58 
	mSTR_CONFIG_TABLET
,

59 
	mSTR_CONFIG_KEYBOARD
,

62 c⁄° 
USBDescSåögs
 
	gdesc_°rögs
 = {

63 [
STR_MANUFACTURER
] = "QEMU",

64 [
STR_PRODUCT_MOUSE
] = "QEMU USB Mouse",

65 [
STR_PRODUCT_TABLET
] = "QEMU USB Tablet",

66 [
STR_PRODUCT_KEYBOARD
] = "QEMU USB Keyboard",

67 [
STR_SERIALNUMBER
] = "42",

68 [
STR_CONFIG_MOUSE
] = "HID Mouse",

69 [
STR_CONFIG_TABLET
] = "HID Tablet",

70 [
STR_CONFIG_KEYBOARD
] = "HID Keyboard",

73 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_mou£
 = {

74 .
bI¡îÁ˚Numbî
 = 0,

75 .
	gbNumEndpoöts
 = 1,

76 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_HID
,

77 .
	gbI¡îÁ˚SubCœss
 = 0x01,

78 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x02,

79 .
	gndesc
 = 1,

80 .
	gdescs
 = (
USBDescOthî
[]) {

83 .
d©a
 = (
uöt8_t
[]) {

85 
USB_DT_HID
,

89 
USB_DT_REPORT
,

94 .
	gïs
 = (
USBDescEndpoöt
[]) {

96 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

97 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_INT
,

98 .
	gwMaxPackëSize
 = 4,

99 .
	gbI¡îvÆ
 = 0x0a,

104 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_èbÀt
 = {

105 .
bI¡îÁ˚Numbî
 = 0,

106 .
	gbNumEndpoöts
 = 1,

107 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_HID
,

108 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x02,

109 .
	gndesc
 = 1,

110 .
	gdescs
 = (
USBDescOthî
[]) {

113 .
d©a
 = (
uöt8_t
[]) {

115 
USB_DT_HID
,

119 
USB_DT_REPORT
,

124 .
	gïs
 = (
USBDescEndpoöt
[]) {

126 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

127 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_INT
,

128 .
	gwMaxPackëSize
 = 8,

129 .
	gbI¡îvÆ
 = 0x0a,

134 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_keybﬂrd
 = {

135 .
bI¡îÁ˚Numbî
 = 0,

136 .
	gbNumEndpoöts
 = 1,

137 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_HID
,

138 .
	gbI¡îÁ˚SubCœss
 = 0x01,

139 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x01,

140 .
	gndesc
 = 1,

141 .
	gdescs
 = (
USBDescOthî
[]) {

144 .
d©a
 = (
uöt8_t
[]) {

146 
USB_DT_HID
,

150 
USB_DT_REPORT
,

155 .
	gïs
 = (
USBDescEndpoöt
[]) {

157 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

158 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_INT
,

159 .
	gwMaxPackëSize
 = 8,

160 .
	gbI¡îvÆ
 = 0x0a,

165 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_mou£
 = {

166 .
bcdUSB
 = 0x0100,

167 .
	gbMaxPackëSize0
 = 8,

168 .
	gbNumC⁄figuøti⁄s
 = 1,

169 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

171 .
bNumI¡îÁ˚s
 = 1,

172 .
	gbC⁄figuøti⁄VÆue
 = 1,

173 .
	giC⁄figuøti⁄
 = 
STR_CONFIG_MOUSE
,

174 .
	gbmAâribuãs
 = 0xa0,

175 .
	gbMaxPowî
 = 50,

176 .
	gnif
 = 1,

177 .
	gifs
 = &
desc_iÁ˚_mou£
,

182 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_èbÀt
 = {

183 .
bcdUSB
 = 0x0100,

184 .
	gbMaxPackëSize0
 = 8,

185 .
	gbNumC⁄figuøti⁄s
 = 1,

186 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

188 .
bNumI¡îÁ˚s
 = 1,

189 .
	gbC⁄figuøti⁄VÆue
 = 1,

190 .
	giC⁄figuøti⁄
 = 
STR_CONFIG_TABLET
,

191 .
	gbmAâribuãs
 = 0xa0,

192 .
	gbMaxPowî
 = 50,

193 .
	gnif
 = 1,

194 .
	gifs
 = &
desc_iÁ˚_èbÀt
,

199 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_keybﬂrd
 = {

200 .
bcdUSB
 = 0x0100,

201 .
	gbMaxPackëSize0
 = 8,

202 .
	gbNumC⁄figuøti⁄s
 = 1,

203 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

205 .
bNumI¡îÁ˚s
 = 1,

206 .
	gbC⁄figuøti⁄VÆue
 = 1,

207 .
	giC⁄figuøti⁄
 = 
STR_CONFIG_KEYBOARD
,

208 .
	gbmAâribuãs
 = 0xa0,

209 .
	gbMaxPowî
 = 50,

210 .
	gnif
 = 1,

211 .
	gifs
 = &
desc_iÁ˚_keybﬂrd
,

216 c⁄° 
USBDesc
 
	gdesc_mou£
 = {

217 .
id
 = {

218 .
idVíd‹
 = 0x0627,

219 .
	gidProdu˘
 = 0x0001,

220 .
	gbcdDevi˚
 = 0,

221 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

222 .
	giProdu˘
 = 
STR_PRODUCT_MOUSE
,

223 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

225 .
	gfuŒ
 = &
desc_devi˚_mou£
,

226 .
	g°r
 = 
desc_°rögs
,

229 c⁄° 
USBDesc
 
	gdesc_èbÀt
 = {

230 .
id
 = {

231 .
idVíd‹
 = 0x0627,

232 .
	gidProdu˘
 = 0x0001,

233 .
	gbcdDevi˚
 = 0,

234 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

235 .
	giProdu˘
 = 
STR_PRODUCT_TABLET
,

236 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

238 .
	gfuŒ
 = &
desc_devi˚_èbÀt
,

239 .
	g°r
 = 
desc_°rögs
,

242 c⁄° 
USBDesc
 
	gdesc_keybﬂrd
 = {

243 .
id
 = {

244 .
idVíd‹
 = 0x0627,

245 .
	gidProdu˘
 = 0x0001,

246 .
	gbcdDevi˚
 = 0,

247 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

248 .
	giProdu˘
 = 
STR_PRODUCT_KEYBOARD
,

249 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

251 .
	gfuŒ
 = &
desc_devi˚_keybﬂrd
,

252 .
	g°r
 = 
desc_°rögs
,

255 c⁄° 
uöt8_t
 
	gqemu_mou£_hid_ªp‹t_des¸ùt‹
[] = {

285 c⁄° 
uöt8_t
 
	gqemu_èbÀt_hid_ªp‹t_des¸ùt‹
[] = {

325 c⁄° 
uöt8_t
 
	gqemu_keybﬂrd_hid_ªp‹t_des¸ùt‹
[] = {

360 
	$usb_hid_ch™ged
(
HIDSèã
 *
hs
)

362 
USBHIDSèã
 *
us
 = 
	`c⁄èöî_of
(
hs
, USBHIDSèã, 
hid
);

364 
	`usb_wakeup
(
us
->
öå
);

365 
	}
}

367 
	$usb_hid_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

369 
USBHIDSèã
 *
us
 = 
	`DO_UPCAST
(USBHIDSèã, 
dev
, dev);

371 
	`hid_ª£t
(&
us
->
hid
);

372 
	}
}

374 
	$usb_hid_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

375 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

377 
USBHIDSèã
 *
us
 = 
	`DO_UPCAST
(USBHIDSèã, 
dev
, dev);

378 
HIDSèã
 *
hs
 = &
us
->
hid
;

379 
ªt
;

381 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

382 i‡(
ªt
 >= 0) {

383  
ªt
;

386 
ªt
 = 0;

387 
ªque°
) {

389 
I¡îÁ˚Reque°
 | 
USB_REQ_GET_DESCRIPTOR
:

390 
vÆue
 >> 8) {

392 i‡(
hs
->
köd
 =
HID_MOUSE
) {

393 
	`mem˝y
(
d©a
, 
qemu_mou£_hid_ªp‹t_des¸ùt‹
,

394 (
qemu_mou£_hid_ªp‹t_des¸ùt‹
));

395 
ªt
 = (
qemu_mou£_hid_ªp‹t_des¸ùt‹
);

396 } i‡(
hs
->
köd
 =
HID_TABLET
) {

397 
	`mem˝y
(
d©a
, 
qemu_èbÀt_hid_ªp‹t_des¸ùt‹
,

398 (
qemu_èbÀt_hid_ªp‹t_des¸ùt‹
));

399 
ªt
 = (
qemu_èbÀt_hid_ªp‹t_des¸ùt‹
);

400 } i‡(
hs
->
köd
 =
HID_KEYBOARD
) {

401 
	`mem˝y
(
d©a
, 
qemu_keybﬂrd_hid_ªp‹t_des¸ùt‹
,

402 (
qemu_keybﬂrd_hid_ªp‹t_des¸ùt‹
));

403 
ªt
 = (
qemu_keybﬂrd_hid_ªp‹t_des¸ùt‹
);

407 
Áû
;

410 
GET_REPORT
:

411 i‡(
hs
->
köd
 =
HID_MOUSE
 || hs->köd =
HID_TABLET
) {

412 
ªt
 = 
	`hid_poöãr_pﬁl
(
hs
, 
d©a
, 
Àngth
);

413 } i‡(
hs
->
köd
 =
HID_KEYBOARD
) {

414 
ªt
 = 
	`hid_keybﬂrd_pﬁl
(
hs
, 
d©a
, 
Àngth
);

417 
SET_REPORT
:

418 i‡(
hs
->
köd
 =
HID_KEYBOARD
) {

419 
ªt
 = 
	`hid_keybﬂrd_wrôe
(
hs
, 
d©a
, 
Àngth
);

421 
Áû
;

424 
GET_PROTOCOL
:

425 i‡(
hs
->
köd
 !
HID_KEYBOARD
 && hs->köd !
HID_MOUSE
) {

426 
Áû
;

428 
ªt
 = 1;

429 
d©a
[0] = 
hs
->
¥Ÿocﬁ
;

431 
SET_PROTOCOL
:

432 i‡(
hs
->
köd
 !
HID_KEYBOARD
 && hs->köd !
HID_MOUSE
) {

433 
Áû
;

435 
ªt
 = 0;

436 
hs
->
¥Ÿocﬁ
 = 
vÆue
;

438 
GET_IDLE
:

439 
ªt
 = 1;

440 
d©a
[0] = 
hs
->
idÀ
;

442 
SET_IDLE
:

443 
hs
->
idÀ
 = (
uöt8_t
Ë(
vÆue
 >> 8);

444 
	`hid_£t_√xt_idÀ
(
hs
, 
	`qemu_gë_˛ock_ns
(
vm_˛ock
));

445 i‡(
hs
->
köd
 =
HID_MOUSE
 || hs->köd =
HID_TABLET
) {

446 
	`hid_poöãr_a˘iv©e
(
hs
);

448 
ªt
 = 0;

451 
Áû
:

452 
ªt
 = 
USB_RET_STALL
;

455  
ªt
;

456 
	}
}

458 
	$usb_hid_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

460 
USBHIDSèã
 *
us
 = 
	`DO_UPCAST
(USBHIDSèã, 
dev
, dev);

461 
HIDSèã
 *
hs
 = &
us
->
hid
;

462 
uöt8_t
 
buf
[
p
->
iov
.
size
];

463 
ªt
 = 0;

465 
p
->
pid
) {

466 
USB_TOKEN_IN
:

467 i‡(
p
->
ï
->
ƒ
 == 1) {

468 
öt64_t
 
cuπime
 = 
	`qemu_gë_˛ock_ns
(
vm_˛ock
);

469 i‡(
hs
->
köd
 =
HID_MOUSE
 || hs->köd =
HID_TABLET
) {

470 
	`hid_poöãr_a˘iv©e
(
hs
);

472 i‡(!
	`hid_has_evíts
(
hs
) &&

473 (!
hs
->
idÀ
 || hs->
√xt_idÀ_˛ock
 - 
cuπime
 > 0)) {

474  
USB_RET_NAK
;

476 
	`hid_£t_√xt_idÀ
(
hs
, 
cuπime
);

477 i‡(
hs
->
köd
 =
HID_MOUSE
 || hs->köd =
HID_TABLET
) {

478 
ªt
 = 
	`hid_poöãr_pﬁl
(
hs
, 
buf
, 
p
->
iov
.
size
);

479 } i‡(
hs
->
köd
 =
HID_KEYBOARD
) {

480 
ªt
 = 
	`hid_keybﬂrd_pﬁl
(
hs
, 
buf
, 
p
->
iov
.
size
);

482 
	`usb_∑ckë_c›y
(
p
, 
buf
, 
ªt
);

484 
Áû
;

487 
USB_TOKEN_OUT
:

489 
Áû
:

490 
ªt
 = 
USB_RET_STALL
;

493  
ªt
;

494 
	}
}

496 
	$usb_hid_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

498 
USBHIDSèã
 *
us
 = 
	`DO_UPCAST
(USBHIDSèã, 
dev
, dev);

500 
	`hid_‰ì
(&
us
->
hid
);

501 
	}
}

503 
	$usb_hid_öô‚
(
USBDevi˚
 *
dev
, 
köd
)

505 
USBHIDSèã
 *
us
 = 
	`DO_UPCAST
(USBHIDSèã, 
dev
, dev);

507 
	`usb_desc_öô
(
dev
);

508 
us
->
öå
 = 
	`usb_ï_gë
(
dev
, 
USB_TOKEN_IN
, 1);

509 
	`hid_öô
(&
us
->
hid
, 
köd
, 
usb_hid_ch™ged
);

511 
	}
}

513 
	$usb_èbÀt_öô‚
(
USBDevi˚
 *
dev
)

515  
	`usb_hid_öô‚
(
dev
, 
HID_TABLET
);

516 
	}
}

518 
	$usb_mou£_öô‚
(
USBDevi˚
 *
dev
)

520  
	`usb_hid_öô‚
(
dev
, 
HID_MOUSE
);

521 
	}
}

523 
	$usb_keybﬂrd_öô‚
(
USBDevi˚
 *
dev
)

525  
	`usb_hid_öô‚
(
dev
, 
HID_KEYBOARD
);

526 
	}
}

528 
	$usb_±r_po°_lﬂd
(*
›aque
, 
vîsi⁄_id
)

530 
USBHIDSèã
 *
s
 = 
›aque
;

532 i‡(
s
->
dev
.
ªmŸe_wakeup
) {

533 
	`hid_poöãr_a˘iv©e
(&
s
->
hid
);

536 
	}
}

538 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_±r
 = {

539 .
«me
 = "usb-ptr",

540 .
	gvîsi⁄_id
 = 1,

541 .
	gmöimum_vîsi⁄_id
 = 1,

542 .
	gpo°_lﬂd
 = 
usb_±r_po°_lﬂd
,

543 .
	gfõlds
 = (
VMSèãFõld
 []) {

544 
VMSTATE_USB_DEVICE
(
dev
, 
USBHIDSèã
),

545 
VMSTATE_HID_POINTER_DEVICE
(
hid
, 
USBHIDSèã
),

546 
VMSTATE_END_OF_LIST
()

550 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_kbd
 = {

551 .
«me
 = "usb-kbd",

552 .
	gvîsi⁄_id
 = 1,

553 .
	gmöimum_vîsi⁄_id
 = 1,

554 .
	gfõlds
 = (
VMSèãFõld
 []) {

555 
VMSTATE_USB_DEVICE
(
dev
, 
USBHIDSèã
),

556 
VMSTATE_HID_KEYBOARD_DEVICE
(
hid
, 
USBHIDSèã
),

557 
VMSTATE_END_OF_LIST
()

561 
	$usb_hid_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

563 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

565 
uc
->
h™dÀ_ª£t
 = 
usb_hid_h™dÀ_ª£t
;

566 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_hid_h™dÀ_c⁄åﬁ
;

567 
uc
->
h™dÀ_d©a
 = 
usb_hid_h™dÀ_d©a
;

568 
uc
->
h™dÀ_de°roy
 = 
usb_hid_h™dÀ_de°roy
;

569 
	}
}

571 
	$usb_èbÀt_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

573 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

574 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

576 
	`usb_hid_˛ass_öô‚
(
kœss
, 
d©a
);

577 
uc
->
öô
 = 
usb_èbÀt_öô‚
;

578 
uc
->
¥odu˘_desc
 = "QEMU USB Tablet";

579 
uc
->
usb_desc
 = &
desc_èbÀt
;

580 
dc
->
vmsd
 = &
vm°©e_usb_±r
;

581 
	}
}

583 
Ty≥Info
 
	gusb_èbÀt_öfo
 = {

584 .
«me
 = "usb-tablet",

585 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

586 .
	gö°™˚_size
 = (
USBHIDSèã
),

587 .
	g˛ass_öô
 = 
usb_èbÀt_˛ass_öô‚
,

590 
	$usb_mou£_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

592 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

593 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

595 
	`usb_hid_˛ass_öô‚
(
kœss
, 
d©a
);

596 
uc
->
öô
 = 
usb_mou£_öô‚
;

597 
uc
->
¥odu˘_desc
 = "QEMU USB Mouse";

598 
uc
->
usb_desc
 = &
desc_mou£
;

599 
dc
->
vmsd
 = &
vm°©e_usb_±r
;

600 
	}
}

602 
Ty≥Info
 
	gusb_mou£_öfo
 = {

603 .
«me
 = "usb-mouse",

604 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

605 .
	gö°™˚_size
 = (
USBHIDSèã
),

606 .
	g˛ass_öô
 = 
usb_mou£_˛ass_öô‚
,

609 
	$usb_keybﬂrd_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

611 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

612 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

614 
	`usb_hid_˛ass_öô‚
(
kœss
, 
d©a
);

615 
uc
->
öô
 = 
usb_keybﬂrd_öô‚
;

616 
uc
->
¥odu˘_desc
 = "QEMU USB Keyboard";

617 
uc
->
usb_desc
 = &
desc_keybﬂrd
;

618 
dc
->
vmsd
 = &
vm°©e_usb_kbd
;

619 
	}
}

621 
Ty≥Info
 
	gusb_keybﬂrd_öfo
 = {

622 .
«me
 = "usb-kbd",

623 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

624 .
	gö°™˚_size
 = (
USBHIDSèã
),

625 .
	g˛ass_öô
 = 
usb_keybﬂrd_˛ass_öô‚
,

628 
	$usb_hid_ªgi°î_ty≥s
()

630 
	`ty≥_ªgi°î_°©ic
(&
usb_èbÀt_öfo
);

631 
	`usb_Àgacy_ªgi°î
("usb-èbÀt", "èbÀt", 
NULL
);

632 
	`ty≥_ªgi°î_°©ic
(&
usb_mou£_öfo
);

633 
	`usb_Àgacy_ªgi°î
("usb-mou£", "mou£", 
NULL
);

634 
	`ty≥_ªgi°î_°©ic
(&
usb_keybﬂrd_öfo
);

635 
	`usb_Àgacy_ªgi°î
("usb-kbd", "keybﬂrd", 
NULL
);

636 
	}
}

638 
ty≥_öô
(
usb_hid_ªgi°î_ty≥s
)

	@dev-hub.c

24 
	~"qemu-comm⁄.h
"

25 
	~"åa˚.h
"

26 
	~"hw/usb.h
"

27 
	~"hw/usb/desc.h
"

29 
	#NUM_PORTS
 8

	)

31 
	sUSBHubP‹t
 {

32 
USBP‹t
 
	mp‹t
;

33 
uöt16_t
 
	mwP‹tSètus
;

34 
uöt16_t
 
	mwP‹tCh™ge
;

35 } 
	tUSBHubP‹t
;

37 
	sUSBHubSèã
 {

38 
USBDevi˚
 
	mdev
;

39 
USBEndpoöt
 *
	möå
;

40 
USBHubP‹t
 
	mp‹ts
[
NUM_PORTS
];

41 } 
	tUSBHubSèã
;

43 
	#CÀ¨HubFótuª
 (0x2000 | 
USB_REQ_CLEAR_FEATURE
)

	)

44 
	#CÀ¨P‹tFótuª
 (0x2300 | 
USB_REQ_CLEAR_FEATURE
)

	)

45 
	#GëHubDes¸ùt‹
 (0xa000 | 
USB_REQ_GET_DESCRIPTOR
)

	)

46 
	#GëHubSètus
 (0xa000 | 
USB_REQ_GET_STATUS
)

	)

47 
	#GëP‹tSètus
 (0xa300 | 
USB_REQ_GET_STATUS
)

	)

48 
	#SëHubFótuª
 (0x2000 | 
USB_REQ_SET_FEATURE
)

	)

49 
	#SëP‹tFótuª
 (0x2300 | 
USB_REQ_SET_FEATURE
)

	)

51 
	#PORT_STAT_CONNECTION
 0x0001

	)

52 
	#PORT_STAT_ENABLE
 0x0002

	)

53 
	#PORT_STAT_SUSPEND
 0x0004

	)

54 
	#PORT_STAT_OVERCURRENT
 0x0008

	)

55 
	#PORT_STAT_RESET
 0x0010

	)

56 
	#PORT_STAT_POWER
 0x0100

	)

57 
	#PORT_STAT_LOW_SPEED
 0x0200

	)

58 
	#PORT_STAT_HIGH_SPEED
 0x0400

	)

59 
	#PORT_STAT_TEST
 0x0800

	)

60 
	#PORT_STAT_INDICATOR
 0x1000

	)

62 
	#PORT_STAT_C_CONNECTION
 0x0001

	)

63 
	#PORT_STAT_C_ENABLE
 0x0002

	)

64 
	#PORT_STAT_C_SUSPEND
 0x0004

	)

65 
	#PORT_STAT_C_OVERCURRENT
 0x0008

	)

66 
	#PORT_STAT_C_RESET
 0x0010

	)

68 
	#PORT_CONNECTION
 0

	)

69 
	#PORT_ENABLE
 1

	)

70 
	#PORT_SUSPEND
 2

	)

71 
	#PORT_OVERCURRENT
 3

	)

72 
	#PORT_RESET
 4

	)

73 
	#PORT_POWER
 8

	)

74 
	#PORT_LOWSPEED
 9

	)

75 
	#PORT_HIGHSPEED
 10

	)

76 
	#PORT_C_CONNECTION
 16

	)

77 
	#PORT_C_ENABLE
 17

	)

78 
	#PORT_C_SUSPEND
 18

	)

79 
	#PORT_C_OVERCURRENT
 19

	)

80 
	#PORT_C_RESET
 20

	)

81 
	#PORT_TEST
 21

	)

82 
	#PORT_INDICATOR
 22

	)

87 
	mSTR_MANUFACTURER
 = 1,

88 
	mSTR_PRODUCT
,

89 
	mSTR_SERIALNUMBER
,

92 c⁄° 
USBDescSåögs
 
	gdesc_°rögs
 = {

93 [
STR_MANUFACTURER
] = "QEMU",

94 [
STR_PRODUCT
] = "QEMU USB Hub",

95 [
STR_SERIALNUMBER
] = "314159",

98 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_hub
 = {

99 .
bI¡îÁ˚Numbî
 = 0,

100 .
	gbNumEndpoöts
 = 1,

101 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_HUB
,

102 .
	gïs
 = (
USBDescEndpoöt
[]) {

104 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

105 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_INT
,

106 .
	gwMaxPackëSize
 = 1 + (
NUM_PORTS
 + 7) / 8,

107 .
	gbI¡îvÆ
 = 0xff,

112 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_hub
 = {

113 .
bcdUSB
 = 0x0110,

114 .
	gbDevi˚Cœss
 = 
USB_CLASS_HUB
,

115 .
	gbMaxPackëSize0
 = 8,

116 .
	gbNumC⁄figuøti⁄s
 = 1,

117 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

119 .
bNumI¡îÁ˚s
 = 1,

120 .
	gbC⁄figuøti⁄VÆue
 = 1,

121 .
	gbmAâribuãs
 = 0xe0,

122 .
	gnif
 = 1,

123 .
	gifs
 = &
desc_iÁ˚_hub
,

128 c⁄° 
USBDesc
 
	gdesc_hub
 = {

129 .
id
 = {

130 .
idVíd‹
 = 0x0409,

131 .
	gidProdu˘
 = 0x55aa,

132 .
	gbcdDevi˚
 = 0x0101,

133 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

134 .
	giProdu˘
 = 
STR_PRODUCT
,

135 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

137 .
	gfuŒ
 = &
desc_devi˚_hub
,

138 .
	g°r
 = 
desc_°rögs
,

141 c⁄° 
uöt8_t
 
	gqemu_hub_hub_des¸ùt‹
[] =

154 
	$usb_hub_©èch
(
USBP‹t
 *
p‹t1
)

156 
USBHubSèã
 *
s
 = 
p‹t1
->
›aque
;

157 
USBHubP‹t
 *
p‹t
 = &
s
->
p‹ts
[
p‹t1
->
ödex
];

159 
	`åa˚_usb_hub_©èch
(
s
->
dev
.
addr
, 
p‹t1
->
ödex
 + 1);

160 
p‹t
->
wP‹tSètus
 |
PORT_STAT_CONNECTION
;

161 
p‹t
->
wP‹tCh™ge
 |
PORT_STAT_C_CONNECTION
;

162 i‡(
p‹t
->p‹t.
dev
->
•ìd
 =
USB_SPEED_LOW
) {

163 
p‹t
->
wP‹tSètus
 |
PORT_STAT_LOW_SPEED
;

165 
p‹t
->
wP‹tSètus
 &~
PORT_STAT_LOW_SPEED
;

167 
	`usb_wakeup
(
s
->
öå
);

168 
	}
}

170 
	$usb_hub_dëach
(
USBP‹t
 *
p‹t1
)

172 
USBHubSèã
 *
s
 = 
p‹t1
->
›aque
;

173 
USBHubP‹t
 *
p‹t
 = &
s
->
p‹ts
[
p‹t1
->
ödex
];

175 
	`åa˚_usb_hub_dëach
(
s
->
dev
.
addr
, 
p‹t1
->
ödex
 + 1);

176 
	`usb_wakeup
(
s
->
öå
);

179 
s
->
dev
.
p‹t
->
›s
->
	`chûd_dëach
(s->dev.p‹t, 
p‹t1
->dev);

181 
p‹t
->
wP‹tSètus
 &~
PORT_STAT_CONNECTION
;

182 
p‹t
->
wP‹tCh™ge
 |
PORT_STAT_C_CONNECTION
;

183 i‡(
p‹t
->
wP‹tSètus
 & 
PORT_STAT_ENABLE
) {

184 
p‹t
->
wP‹tSètus
 &~
PORT_STAT_ENABLE
;

185 
p‹t
->
wP‹tCh™ge
 |
PORT_STAT_C_ENABLE
;

187 
	}
}

189 
	$usb_hub_chûd_dëach
(
USBP‹t
 *
p‹t1
, 
USBDevi˚
 *
chûd
)

191 
USBHubSèã
 *
s
 = 
p‹t1
->
›aque
;

194 
s
->
dev
.
p‹t
->
›s
->
	`chûd_dëach
(s->dev.p‹t, 
chûd
);

195 
	}
}

197 
	$usb_hub_wakeup
(
USBP‹t
 *
p‹t1
)

199 
USBHubSèã
 *
s
 = 
p‹t1
->
›aque
;

200 
USBHubP‹t
 *
p‹t
 = &
s
->
p‹ts
[
p‹t1
->
ödex
];

202 i‡(
p‹t
->
wP‹tSètus
 & 
PORT_STAT_SUSPEND
) {

203 
p‹t
->
wP‹tCh™ge
 |
PORT_STAT_C_SUSPEND
;

204 
	`usb_wakeup
(
s
->
öå
);

206 
	}
}

208 
	$usb_hub_com∂ëe
(
USBP‹t
 *
p‹t
, 
USBPackë
 *
∑ckë
)

210 
USBHubSèã
 *
s
 = 
p‹t
->
›aque
;

222 
s
->
dev
.
p‹t
->
›s
->
	`com∂ëe
(s->dev.p‹t, 
∑ckë
);

223 
	}
}

225 
USBDevi˚
 *
	$usb_hub_föd_devi˚
(
USBDevi˚
 *
dev
, 
uöt8_t
 
addr
)

227 
USBHubSèã
 *
s
 = 
	`DO_UPCAST
(USBHubSèã, 
dev
, dev);

228 
USBHubP‹t
 *
p‹t
;

229 
USBDevi˚
 *
down°ªam
;

230 
i
;

232 
i
 = 0; i < 
NUM_PORTS
; i++) {

233 
p‹t
 = &
s
->
p‹ts
[
i
];

234 i‡(!(
p‹t
->
wP‹tSètus
 & 
PORT_STAT_ENABLE
)) {

237 
down°ªam
 = 
	`usb_föd_devi˚
(&
p‹t
->p‹t, 
addr
);

238 i‡(
down°ªam
 !
NULL
) {

239  
down°ªam
;

242  
NULL
;

243 
	}
}

245 
	$usb_hub_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

247 
USBHubSèã
 *
s
 = 
	`DO_UPCAST
(USBHubSèã, 
dev
, dev);

248 
USBHubP‹t
 *
p‹t
;

249 
i
;

251 
	`åa˚_usb_hub_ª£t
(
s
->
dev
.
addr
);

252 
i
 = 0; i < 
NUM_PORTS
; i++) {

253 
p‹t
 = 
s
->
p‹ts
 + 
i
;

254 
p‹t
->
wP‹tSètus
 = 
PORT_STAT_POWER
;

255 
p‹t
->
wP‹tCh™ge
 = 0;

256 i‡(
p‹t
->p‹t.
dev
 &&Ö‹t->p‹t.dev->
©èched
) {

257 
p‹t
->
wP‹tSètus
 |
PORT_STAT_CONNECTION
;

258 
p‹t
->
wP‹tCh™ge
 |
PORT_STAT_C_CONNECTION
;

259 i‡(
p‹t
->p‹t.
dev
->
•ìd
 =
USB_SPEED_LOW
) {

260 
p‹t
->
wP‹tSètus
 |
PORT_STAT_LOW_SPEED
;

264 
	}
}

266 c⁄° *
	$„©uª_«me
(
„©uª
)

268 c⁄° *
«me
[] = {

269 [
PORT_CONNECTION
] = "connection",

270 [
PORT_ENABLE
] = "enable",

271 [
PORT_SUSPEND
] = "suspend",

272 [
PORT_OVERCURRENT
] = "overcurrent",

273 [
PORT_RESET
] = "reset",

274 [
PORT_POWER
] = "power",

275 [
PORT_LOWSPEED
] = "lowspeed",

276 [
PORT_HIGHSPEED
] = "highspeed",

277 [
PORT_C_CONNECTION
] = "change connection",

278 [
PORT_C_ENABLE
] = "changeÉnable",

279 [
PORT_C_SUSPEND
] = "change suspend",

280 [
PORT_C_OVERCURRENT
] = "change overcurrent",

281 [
PORT_C_RESET
] = "changeÑeset",

282 [
PORT_TEST
] = "test",

283 [
PORT_INDICATOR
] = "indicator",

285 i‡(
„©uª
 < 0 || fótuª >
	`ARRAY_SIZE
(
«me
)) {

288  
«me
[
„©uª
] ?: "?";

289 
	}
}

291 
	$usb_hub_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

292 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

294 
USBHubSèã
 *
s
 = (USBHubSèã *)
dev
;

295 
ªt
;

297 
	`åa˚_usb_hub_c⁄åﬁ
(
s
->
dev
.
addr
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
);

299 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

300 i‡(
ªt
 >= 0) {

301  
ªt
;

304 
ªque°
) {

305 
EndpoötOutReque°
 | 
USB_REQ_CLEAR_FEATURE
:

306 i‡(
vÆue
 =0 && 
ödex
 != 0x81) {

307 
Áû
;

309 
ªt
 = 0;

312 
GëHubSètus
:

313 
d©a
[0] = 0;

314 
d©a
[1] = 0;

315 
d©a
[2] = 0;

316 
d©a
[3] = 0;

317 
ªt
 = 4;

319 
GëP‹tSètus
:

321 
n
 = 
ödex
 - 1;

322 
USBHubP‹t
 *
p‹t
;

323 i‡(
n
 >
NUM_PORTS
) {

324 
Áû
;

326 
p‹t
 = &
s
->
p‹ts
[
n
];

327 
	`åa˚_usb_hub_gë_p‹t_°©us
(
s
->
dev
.
addr
, 
ödex
,

328 
p‹t
->
wP‹tSètus
,

329 
p‹t
->
wP‹tCh™ge
);

330 
d©a
[0] = 
p‹t
->
wP‹tSètus
;

331 
d©a
[1] = 
p‹t
->
wP‹tSètus
 >> 8;

332 
d©a
[2] = 
p‹t
->
wP‹tCh™ge
;

333 
d©a
[3] = 
p‹t
->
wP‹tCh™ge
 >> 8;

334 
ªt
 = 4;

337 
SëHubFótuª
:

338 
CÀ¨HubFótuª
:

339 i‡(
vÆue
 == 0 || value == 1) {

341 
Áû
;

343 
ªt
 = 0;

345 
SëP‹tFótuª
:

347 
n
 = 
ödex
 - 1;

348 
USBHubP‹t
 *
p‹t
;

349 
USBDevi˚
 *
dev
;

351 
	`åa˚_usb_hub_£t_p‹t_„©uª
(
s
->
dev
.
addr
, 
ödex
,

352 
	`„©uª_«me
(
vÆue
));

354 i‡(
n
 >
NUM_PORTS
) {

355 
Áû
;

357 
p‹t
 = &
s
->
p‹ts
[
n
];

358 
dev
 = 
p‹t
->port.dev;

359 
vÆue
) {

360 
PORT_SUSPEND
:

361 
p‹t
->
wP‹tSètus
 |
PORT_STAT_SUSPEND
;

363 
PORT_RESET
:

364 i‡(
dev
 && dev->
©èched
) {

365 
	`usb_devi˚_ª£t
(
dev
);

366 
p‹t
->
wP‹tCh™ge
 |
PORT_STAT_C_RESET
;

368 
p‹t
->
wP‹tSètus
 |
PORT_STAT_ENABLE
;

371 
PORT_POWER
:

374 
Áû
;

376 
ªt
 = 0;

379 
CÀ¨P‹tFótuª
:

381 
n
 = 
ödex
 - 1;

382 
USBHubP‹t
 *
p‹t
;

384 
	`åa˚_usb_hub_˛ór_p‹t_„©uª
(
s
->
dev
.
addr
, 
ödex
,

385 
	`„©uª_«me
(
vÆue
));

387 i‡(
n
 >
NUM_PORTS
) {

388 
Áû
;

390 
p‹t
 = &
s
->
p‹ts
[
n
];

391 
vÆue
) {

392 
PORT_ENABLE
:

393 
p‹t
->
wP‹tSètus
 &~
PORT_STAT_ENABLE
;

395 
PORT_C_ENABLE
:

396 
p‹t
->
wP‹tCh™ge
 &~
PORT_STAT_C_ENABLE
;

398 
PORT_SUSPEND
:

399 
p‹t
->
wP‹tSètus
 &~
PORT_STAT_SUSPEND
;

401 
PORT_C_SUSPEND
:

402 
p‹t
->
wP‹tCh™ge
 &~
PORT_STAT_C_SUSPEND
;

404 
PORT_C_CONNECTION
:

405 
p‹t
->
wP‹tCh™ge
 &~
PORT_STAT_C_CONNECTION
;

407 
PORT_C_OVERCURRENT
:

408 
p‹t
->
wP‹tCh™ge
 &~
PORT_STAT_C_OVERCURRENT
;

410 
PORT_C_RESET
:

411 
p‹t
->
wP‹tCh™ge
 &~
PORT_STAT_C_RESET
;

414 
Áû
;

416 
ªt
 = 0;

419 
GëHubDes¸ùt‹
:

421 
n
, 
limô
, 
v¨_hub_size
 = 0;

422 
	`mem˝y
(
d©a
, 
qemu_hub_hub_des¸ùt‹
,

423 (
qemu_hub_hub_des¸ùt‹
));

424 
d©a
[2] = 
NUM_PORTS
;

427 
limô
 = ((
NUM_PORTS
 + 1 + 7) / 8) + 7;

428 
n
 = 7;Ç < 
limô
;Ç++) {

429 
d©a
[
n
] = 0x00;

430 
v¨_hub_size
++;

434 
limô
 =Üimô + ((
NUM_PORTS
 + 7) / 8);

435 ;
n
 < 
limô
;Ç++) {

436 
d©a
[
n
] = 0xff;

437 
v¨_hub_size
++;

440 
ªt
 = (
qemu_hub_hub_des¸ùt‹
Ë+ 
v¨_hub_size
;

441 
d©a
[0] = 
ªt
;

445 
Áû
:

446 
ªt
 = 
USB_RET_STALL
;

449  
ªt
;

450 
	}
}

452 
	$usb_hub_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

454 
USBHubSèã
 *
s
 = (USBHubSèã *)
dev
;

455 
ªt
;

457 
p
->
pid
) {

458 
USB_TOKEN_IN
:

459 i‡(
p
->
ï
->
ƒ
 == 1) {

460 
USBHubP‹t
 *
p‹t
;

461 
°©us
;

462 
uöt8_t
 
buf
[4];

463 
i
, 
n
;

464 
n
 = (
NUM_PORTS
 + 1 + 7) / 8;

465 i‡(
p
->
iov
.
size
 == 1) {

466 
n
 = 1;

467 } i‡(
n
 > 
p
->
iov
.
size
) {

468  
USB_RET_BABBLE
;

470 
°©us
 = 0;

471 
i
 = 0; i < 
NUM_PORTS
; i++) {

472 
p‹t
 = &
s
->
p‹ts
[
i
];

473 i‡(
p‹t
->
wP‹tCh™ge
)

474 
°©us
 |(1 << (
i
 + 1));

476 i‡(
°©us
 != 0) {

477 
i
 = 0; i < 
n
; i++) {

478 
buf
[
i
] = 
°©us
 >> (8 * i);

480 
	`usb_∑ckë_c›y
(
p
, 
buf
, 
n
);

481 
ªt
 = 
n
;

483 
ªt
 = 
USB_RET_NAK
;

486 
Áû
;

489 
USB_TOKEN_OUT
:

491 
Áû
:

492 
ªt
 = 
USB_RET_STALL
;

495  
ªt
;

496 
	}
}

498 
	$usb_hub_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

500 
USBHubSèã
 *
s
 = (USBHubSèã *)
dev
;

501 
i
;

503 
i
 = 0; i < 
NUM_PORTS
; i++) {

504 
	`usb_uƒegi°î_p‹t
(
	`usb_bus_‰om_devi˚
(
dev
),

505 &
s
->
p‹ts
[
i
].
p‹t
);

507 
	}
}

509 
USBP‹tOps
 
	gusb_hub_p‹t_›s
 = {

510 .
©èch
 = 
usb_hub_©èch
,

511 .
	gdëach
 = 
usb_hub_dëach
,

512 .
	gchûd_dëach
 = 
usb_hub_chûd_dëach
,

513 .
	gwakeup
 = 
usb_hub_wakeup
,

514 .
	gcom∂ëe
 = 
usb_hub_com∂ëe
,

517 
	$usb_hub_öô‚
(
USBDevi˚
 *
dev
)

519 
USBHubSèã
 *
s
 = 
	`DO_UPCAST
(USBHubSèã, 
dev
, dev);

520 
USBHubP‹t
 *
p‹t
;

521 
i
;

523 
	`usb_desc_¸óã_£rül
(
dev
);

524 
	`usb_desc_öô
(
dev
);

525 
s
->
öå
 = 
	`usb_ï_gë
(
dev
, 
USB_TOKEN_IN
, 1);

526 
i
 = 0; i < 
NUM_PORTS
; i++) {

527 
p‹t
 = &
s
->
p‹ts
[
i
];

528 
	`usb_ªgi°î_p‹t
(
	`usb_bus_‰om_devi˚
(
dev
),

529 &
p‹t
->p‹t, 
s
, 
i
, &
usb_hub_p‹t_›s
,

530 
USB_SPEED_MASK_LOW
 | 
USB_SPEED_MASK_FULL
);

531 
	`usb_p‹t_loˇti⁄
(&
p‹t
->p‹t, 
dev
->p‹t, 
i
+1);

533 
	`usb_hub_h™dÀ_ª£t
(
dev
);

535 
	}
}

537 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_hub_p‹t
 = {

538 .
«me
 = "usb-hub-port",

539 .
	gvîsi⁄_id
 = 1,

540 .
	gmöimum_vîsi⁄_id
 = 1,

541 .
	gfõlds
 = (
VMSèãFõld
 []) {

542 
VMSTATE_UINT16
(
wP‹tSètus
, 
USBHubP‹t
),

543 
VMSTATE_UINT16
(
wP‹tCh™ge
, 
USBHubP‹t
),

544 
VMSTATE_END_OF_LIST
()

548 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_hub
 = {

549 .
«me
 = "usb-hub",

550 .
	gvîsi⁄_id
 = 1,

551 .
	gmöimum_vîsi⁄_id
 = 1,

552 .
	gfõlds
 = (
VMSèãFõld
 []) {

553 
VMSTATE_USB_DEVICE
(
dev
, 
USBHubSèã
),

554 
VMSTATE_STRUCT_ARRAY
(
p‹ts
, 
USBHubSèã
, 
NUM_PORTS
, 0,

555 
vm°©e_usb_hub_p‹t
, 
USBHubP‹t
),

556 
VMSTATE_END_OF_LIST
()

560 
	$usb_hub_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

562 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

563 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

565 
uc
->
öô
 = 
usb_hub_öô‚
;

566 
uc
->
¥odu˘_desc
 = "QEMU USB Hub";

567 
uc
->
usb_desc
 = &
desc_hub
;

568 
uc
->
föd_devi˚
 = 
usb_hub_föd_devi˚
;

569 
uc
->
h™dÀ_ª£t
 = 
usb_hub_h™dÀ_ª£t
;

570 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_hub_h™dÀ_c⁄åﬁ
;

571 
uc
->
h™dÀ_d©a
 = 
usb_hub_h™dÀ_d©a
;

572 
uc
->
h™dÀ_de°roy
 = 
usb_hub_h™dÀ_de°roy
;

573 
dc
->
fw_«me
 = "hub";

574 
dc
->
vmsd
 = &
vm°©e_usb_hub
;

575 
	}
}

577 
Ty≥Info
 
	ghub_öfo
 = {

578 .
«me
 = "usb-hub",

579 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

580 .
	gö°™˚_size
 = (
USBHubSèã
),

581 .
	g˛ass_öô
 = 
usb_hub_˛ass_öô‚
,

584 
	$usb_hub_ªgi°î_ty≥s
()

586 
	`ty≥_ªgi°î_°©ic
(&
hub_öfo
);

587 
	}
}

589 
ty≥_öô
(
usb_hub_ªgi°î_ty≥s
)

	@dev-network.c

26 
	~"qemu-comm⁄.h
"

27 
	~"hw/usb.h
"

28 
	~"hw/usb/desc.h
"

29 
	~"√t.h
"

30 
	~"qemu-queue.h
"

31 
	~"sy£mu.h
"

32 
	~"iov.h
"

38 
	#CDC_VENDOR_NUM
 0x0525

	)

39 
	#CDC_PRODUCT_NUM
 0xa4a1

	)

43 
	#RNDIS_VENDOR_NUM
 0x0525

	)

44 
	#RNDIS_PRODUCT_NUM
 0xa4a2

	)

46 
	eusb°rög_idx
 {

47 
	mSTRING_MANUFACTURER
 = 1,

48 
	mSTRING_PRODUCT
,

49 
	mSTRING_ETHADDR
,

50 
	mSTRING_DATA
,

51 
	mSTRING_CONTROL
,

52 
	mSTRING_RNDIS_CONTROL
,

53 
	mSTRING_CDC
,

54 
	mSTRING_SUBSET
,

55 
	mSTRING_RNDIS
,

56 
	mSTRING_SERIALNUMBER
,

59 
	#DEV_CONFIG_VALUE
 1

	)

60 
	#DEV_RNDIS_CONFIG_VALUE
 2

	)

62 
	#USB_CDC_SUBCLASS_ACM
 0x02

	)

63 
	#USB_CDC_SUBCLASS_ETHERNET
 0x06

	)

65 
	#USB_CDC_PROTO_NONE
 0

	)

66 
	#USB_CDC_ACM_PROTO_VENDOR
 0xff

	)

68 
	#USB_CDC_HEADER_TYPE
 0x00

	)

69 
	#USB_CDC_CALL_MANAGEMENT_TYPE
 0x01

	)

70 
	#USB_CDC_ACM_TYPE
 0x02

	)

71 
	#USB_CDC_UNION_TYPE
 0x06

	)

72 
	#USB_CDC_ETHERNET_TYPE
 0x0‡

	)

74 
	#USB_CDC_SEND_ENCAPSULATED_COMMAND
 0x00

	)

75 
	#USB_CDC_GET_ENCAPSULATED_RESPONSE
 0x01

	)

76 
	#USB_CDC_REQ_SET_LINE_CODING
 0x20

	)

77 
	#USB_CDC_REQ_GET_LINE_CODING
 0x21

	)

78 
	#USB_CDC_REQ_SET_CONTROL_LINE_STATE
 0x22

	)

79 
	#USB_CDC_REQ_SEND_BREAK
 0x23

	)

80 
	#USB_CDC_SET_ETHERNET_MULTICAST_FILTERS
 0x40

	)

81 
	#USB_CDC_SET_ETHERNET_PM_PATTERN_FILTER
 0x41

	)

82 
	#USB_CDC_GET_ETHERNET_PM_PATTERN_FILTER
 0x42

	)

83 
	#USB_CDC_SET_ETHERNET_PACKET_FILTER
 0x43

	)

84 
	#USB_CDC_GET_ETHERNET_STATISTIC
 0x44

	)

86 
	#LOG2_STATUS_INTERVAL_MSEC
 5

	)

87 
	#STATUS_BYTECOUNT
 16

	)

89 
	#ETH_FRAME_LEN
 1514

	)

91 c⁄° 
USBDescSåögs
 
	gusb_√t_°rögèbÀ
 = {

92 [
STRING_MANUFACTURER
] = "QEMU",

93 [
STRING_PRODUCT
] = "RNDIS/QEMU USB Network Device",

94 [
STRING_ETHADDR
] = "400102030405",

95 [
STRING_DATA
] = "QEMU USB Net Data Interface",

96 [
STRING_CONTROL
] = "QEMU USB Net Control Interface",

97 [
STRING_RNDIS_CONTROL
] = "QEMU USB Net RNDIS Control Interface",

98 [
STRING_CDC
] = "QEMU USB Net CDC",

99 [
STRING_SUBSET
] = "QEMU USB Net Subset",

100 [
STRING_RNDIS
] = "QEMU USB Net RNDIS",

101 [
STRING_SERIALNUMBER
] = "1",

104 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_∫dis
[] = {

107 .
bI¡îÁ˚Numbî
 = 0,

108 .
	gbNumEndpoöts
 = 1,

109 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_COMM
,

110 .
	gbI¡îÁ˚SubCœss
 = 
USB_CDC_SUBCLASS_ACM
,

111 .
	gbI¡îÁ˚PrŸocﬁ
 = 
USB_CDC_ACM_PROTO_VENDOR
,

112 .
	giI¡îÁ˚
 = 
STRING_RNDIS_CONTROL
,

113 .
	gndesc
 = 4,

114 .
	gdescs
 = (
USBDescOthî
[]) {

117 .
d©a
 = (
uöt8_t
[]) {

119 
USB_DT_CS_INTERFACE
,

120 
USB_CDC_HEADER_TYPE
,

125 .
	gd©a
 = (
uöt8_t
[]) {

127 
USB_DT_CS_INTERFACE
,

128 
USB_CDC_CALL_MANAGEMENT_TYPE
,

134 .
	gd©a
 = (
uöt8_t
[]) {

136 
USB_DT_CS_INTERFACE
,

137 
USB_CDC_ACM_TYPE
,

142 .
	gd©a
 = (
uöt8_t
[]) {

144 
USB_DT_CS_INTERFACE
,

145 
USB_CDC_UNION_TYPE
,

151 .
	gïs
 = (
USBDescEndpoöt
[]) {

153 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

154 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_INT
,

155 .
	gwMaxPackëSize
 = 
STATUS_BYTECOUNT
,

156 .
	gbI¡îvÆ
 = 1 << 
LOG2_STATUS_INTERVAL_MSEC
,

161 .
	gbI¡îÁ˚Numbî
 = 1,

162 .
	gbNumEndpoöts
 = 2,

163 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_CDC_DATA
,

164 .
	giI¡îÁ˚
 = 
STRING_DATA
,

165 .
	gïs
 = (
USBDescEndpoöt
[]) {

167 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x02,

168 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

169 .
	gwMaxPackëSize
 = 0x40,

171 .
	gbEndpoötAddªss
 = 
USB_DIR_OUT
 | 0x02,

172 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

173 .
	gwMaxPackëSize
 = 0x40,

179 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_cdc
[] = {

182 .
bI¡îÁ˚Numbî
 = 0,

183 .
	gbNumEndpoöts
 = 1,

184 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_COMM
,

185 .
	gbI¡îÁ˚SubCœss
 = 
USB_CDC_SUBCLASS_ETHERNET
,

186 .
	gbI¡îÁ˚PrŸocﬁ
 = 
USB_CDC_PROTO_NONE
,

187 .
	giI¡îÁ˚
 = 
STRING_CONTROL
,

188 .
	gndesc
 = 3,

189 .
	gdescs
 = (
USBDescOthî
[]) {

192 .
d©a
 = (
uöt8_t
[]) {

194 
USB_DT_CS_INTERFACE
,

195 
USB_CDC_HEADER_TYPE
,

200 .
	gd©a
 = (
uöt8_t
[]) {

202 
USB_DT_CS_INTERFACE
,

203 
USB_CDC_UNION_TYPE
,

209 .
	gd©a
 = (
uöt8_t
[]) {

211 
USB_DT_CS_INTERFACE
,

212 
USB_CDC_ETHERNET_TYPE
,

213 
STRING_ETHADDR
,

215 
ETH_FRAME_LEN
 & 0xff,

216 
ETH_FRAME_LEN
 >> 8,

222 .
	gïs
 = (
USBDescEndpoöt
[]) {

224 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

225 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_INT
,

226 .
	gwMaxPackëSize
 = 
STATUS_BYTECOUNT
,

227 .
	gbI¡îvÆ
 = 1 << 
LOG2_STATUS_INTERVAL_MSEC
,

232 .
	gbI¡îÁ˚Numbî
 = 1,

233 .
	gbA…î«ãSëtög
 = 0,

234 .
	gbNumEndpoöts
 = 0,

235 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_CDC_DATA
,

238 .
	gbI¡îÁ˚Numbî
 = 1,

239 .
	gbA…î«ãSëtög
 = 1,

240 .
	gbNumEndpoöts
 = 2,

241 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_CDC_DATA
,

242 .
	giI¡îÁ˚
 = 
STRING_DATA
,

243 .
	gïs
 = (
USBDescEndpoöt
[]) {

245 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x02,

246 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

247 .
	gwMaxPackëSize
 = 0x40,

249 .
	gbEndpoötAddªss
 = 
USB_DIR_OUT
 | 0x02,

250 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

251 .
	gwMaxPackëSize
 = 0x40,

257 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_√t
 = {

258 .
bcdUSB
 = 0x0200,

259 .
	gbDevi˚Cœss
 = 
USB_CLASS_COMM
,

260 .
	gbMaxPackëSize0
 = 0x40,

261 .
	gbNumC⁄figuøti⁄s
 = 2,

262 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

264 .
bNumI¡îÁ˚s
 = 2,

265 .
	gbC⁄figuøti⁄VÆue
 = 
DEV_RNDIS_CONFIG_VALUE
,

266 .
	giC⁄figuøti⁄
 = 
STRING_RNDIS
,

267 .
	gbmAâribuãs
 = 0xc0,

268 .
	gbMaxPowî
 = 0x32,

269 .
	gnif
 = 
ARRAY_SIZE
(
desc_iÁ˚_∫dis
),

270 .
	gifs
 = 
desc_iÁ˚_∫dis
,

272 .
	gbNumI¡îÁ˚s
 = 2,

273 .
	gbC⁄figuøti⁄VÆue
 = 
DEV_CONFIG_VALUE
,

274 .
	giC⁄figuøti⁄
 = 
STRING_CDC
,

275 .
	gbmAâribuãs
 = 0xc0,

276 .
	gbMaxPowî
 = 0x32,

277 .
	gnif
 = 
ARRAY_SIZE
(
desc_iÁ˚_cdc
),

278 .
	gifs
 = 
desc_iÁ˚_cdc
,

283 c⁄° 
USBDesc
 
	gdesc_√t
 = {

284 .
id
 = {

285 .
idVíd‹
 = 
RNDIS_VENDOR_NUM
,

286 .
	gidProdu˘
 = 
RNDIS_PRODUCT_NUM
,

287 .
	gbcdDevi˚
 = 0,

288 .
	giM™uÁ˘uªr
 = 
STRING_MANUFACTURER
,

289 .
	giProdu˘
 = 
STRING_PRODUCT
,

290 .
	giSîülNumbî
 = 
STRING_SERIALNUMBER
,

292 .
	gfuŒ
 = &
desc_devi˚_√t
,

293 .
	g°r
 = 
usb_√t_°rögèbÀ
,

299 
	#RNDIS_MAXIMUM_FRAME_SIZE
 1518

	)

300 
	#RNDIS_MAX_TOTAL_SIZE
 1558

	)

303 
	#RNDIS_MAJOR_VERSION
 1

	)

304 
	#RNDIS_MINOR_VERSION
 0

	)

307 
	#RNDIS_STATUS_SUCCESS
 0x00000000U

	)

308 
	#RNDIS_STATUS_FAILURE
 0xc0000001U

	)

309 
	#RNDIS_STATUS_INVALID_DATA
 0xc0010015U

	)

310 
	#RNDIS_STATUS_NOT_SUPPORTED
 0xc00000bbU

	)

311 
	#RNDIS_STATUS_MEDIA_CONNECT
 0x4001000bU

	)

312 
	#RNDIS_STATUS_MEDIA_DISCONNECT
 0x4001000cU

	)

316 
	mRNDIS_PACKET_MSG
 = 1,

317 
	mRNDIS_INITIALIZE_MSG
 = 2,

318 
	mRNDIS_HALT_MSG
 = 3,

319 
	mRNDIS_QUERY_MSG
 = 4,

320 
	mRNDIS_SET_MSG
 = 5,

321 
	mRNDIS_RESET_MSG
 = 6,

322 
	mRNDIS_INDICATE_STATUS_MSG
 = 7,

323 
	mRNDIS_KEEPALIVE_MSG
 = 8,

328 
	mRNDIS_INITIALIZE_CMPLT
 = 0x80000002U,

329 
	mRNDIS_QUERY_CMPLT
 = 0x80000004U,

330 
	mRNDIS_SET_CMPLT
 = 0x80000005U,

331 
	mRNDIS_RESET_CMPLT
 = 0x80000006U,

332 
	mRNDIS_KEEPALIVE_CMPLT
 = 0x80000008U,

337 
	mRNDIS_DF_CONNECTIONLESS
 = 1,

338 
	mRNDIS_DF_CONNECTIONORIENTED
 = 2,

341 
	#RNDIS_MEDIUM_802_3
 0x00000000U

	)

344 
	#OID_PNP_CAPABILITIES
 0xfd010100

	)

345 
	#OID_PNP_SET_POWER
 0xfd010101

	)

346 
	#OID_PNP_QUERY_POWER
 0xfd010102

	)

347 
	#OID_PNP_ADD_WAKE_UP_PATTERN
 0xfd010103

	)

348 
	#OID_PNP_REMOVE_WAKE_UP_PATTERN
 0xfd010104

	)

349 
	#OID_PNP_ENABLE_WAKE_UP
 0xfd010106

	)

351 
uöt32_t
 
	tÀ32
;

353 
	s∫dis_öô_msg_ty≥
 {

354 
À32
 
	mMesßgeTy≥
;

355 
À32
 
	mMesßgeLígth
;

356 
À32
 
	mReque°ID
;

357 
À32
 
	mMaj‹Vîsi⁄
;

358 
À32
 
	mMö‹Vîsi⁄
;

359 
À32
 
	mMaxTøns„rSize
;

360 } 
	t∫dis_öô_msg_ty≥
;

362 
	s∫dis_öô_cm∂t_ty≥
 {

363 
À32
 
	mMesßgeTy≥
;

364 
À32
 
	mMesßgeLígth
;

365 
À32
 
	mReque°ID
;

366 
À32
 
	mSètus
;

367 
À32
 
	mMaj‹Vîsi⁄
;

368 
À32
 
	mMö‹Vîsi⁄
;

369 
À32
 
	mDevi˚Fœgs
;

370 
À32
 
	mMedium
;

371 
À32
 
	mMaxPackësPîTøns„r
;

372 
À32
 
	mMaxTøns„rSize
;

373 
À32
 
	mPackëAlignmítFa˘‹
;

374 
À32
 
	mAFLi°Off£t
;

375 
À32
 
	mAFLi°Size
;

376 } 
	t∫dis_öô_cm∂t_ty≥
;

378 
	s∫dis_hÆt_msg_ty≥
 {

379 
À32
 
	mMesßgeTy≥
;

380 
À32
 
	mMesßgeLígth
;

381 
À32
 
	mReque°ID
;

382 } 
	t∫dis_hÆt_msg_ty≥
;

384 
	s∫dis_quîy_msg_ty≥
 {

385 
À32
 
	mMesßgeTy≥
;

386 
À32
 
	mMesßgeLígth
;

387 
À32
 
	mReque°ID
;

388 
À32
 
	mOID
;

389 
À32
 
	mInf‹m©i⁄Buf„rLígth
;

390 
À32
 
	mInf‹m©i⁄Buf„rOff£t
;

391 
À32
 
	mDevi˚VcH™dÀ
;

392 } 
	t∫dis_quîy_msg_ty≥
;

394 
	s∫dis_quîy_cm∂t_ty≥
 {

395 
À32
 
	mMesßgeTy≥
;

396 
À32
 
	mMesßgeLígth
;

397 
À32
 
	mReque°ID
;

398 
À32
 
	mSètus
;

399 
À32
 
	mInf‹m©i⁄Buf„rLígth
;

400 
À32
 
	mInf‹m©i⁄Buf„rOff£t
;

401 } 
	t∫dis_quîy_cm∂t_ty≥
;

403 
	s∫dis_£t_msg_ty≥
 {

404 
À32
 
	mMesßgeTy≥
;

405 
À32
 
	mMesßgeLígth
;

406 
À32
 
	mReque°ID
;

407 
À32
 
	mOID
;

408 
À32
 
	mInf‹m©i⁄Buf„rLígth
;

409 
À32
 
	mInf‹m©i⁄Buf„rOff£t
;

410 
À32
 
	mDevi˚VcH™dÀ
;

411 } 
	t∫dis_£t_msg_ty≥
;

413 
	s∫dis_£t_cm∂t_ty≥
 {

414 
À32
 
	mMesßgeTy≥
;

415 
À32
 
	mMesßgeLígth
;

416 
À32
 
	mReque°ID
;

417 
À32
 
	mSètus
;

418 } 
	t∫dis_£t_cm∂t_ty≥
;

420 
	s∫dis_ª£t_msg_ty≥
 {

421 
À32
 
	mMesßgeTy≥
;

422 
À32
 
	mMesßgeLígth
;

423 
À32
 
	mRe£rved
;

424 } 
	t∫dis_ª£t_msg_ty≥
;

426 
	s∫dis_ª£t_cm∂t_ty≥
 {

427 
À32
 
	mMesßgeTy≥
;

428 
À32
 
	mMesßgeLígth
;

429 
À32
 
	mSètus
;

430 
À32
 
	mAddªssögRe£t
;

431 } 
	t∫dis_ª£t_cm∂t_ty≥
;

433 
	s∫dis_ödiˇã_°©us_msg_ty≥
 {

434 
À32
 
	mMesßgeTy≥
;

435 
À32
 
	mMesßgeLígth
;

436 
À32
 
	mSètus
;

437 
À32
 
	mSètusBuf„rLígth
;

438 
À32
 
	mSètusBuf„rOff£t
;

439 } 
	t∫dis_ödiˇã_°©us_msg_ty≥
;

441 
	s∫dis_kì∑live_msg_ty≥
 {

442 
À32
 
	mMesßgeTy≥
;

443 
À32
 
	mMesßgeLígth
;

444 
À32
 
	mReque°ID
;

445 } 
	t∫dis_kì∑live_msg_ty≥
;

447 
	s∫dis_kì∑live_cm∂t_ty≥
 {

448 
À32
 
	mMesßgeTy≥
;

449 
À32
 
	mMesßgeLígth
;

450 
À32
 
	mReque°ID
;

451 
À32
 
	mSètus
;

452 } 
	t∫dis_kì∑live_cm∂t_ty≥
;

454 
	s∫dis_∑ckë_msg_ty≥
 {

455 
À32
 
	mMesßgeTy≥
;

456 
À32
 
	mMesßgeLígth
;

457 
À32
 
	mD©aOff£t
;

458 
À32
 
	mD©aLígth
;

459 
À32
 
	mOOBD©aOff£t
;

460 
À32
 
	mOOBD©aLígth
;

461 
À32
 
	mNumOOBD©aEÀmíts
;

462 
À32
 
	mPîPackëInfoOff£t
;

463 
À32
 
	mPîPackëInfoLígth
;

464 
À32
 
	mVcH™dÀ
;

465 
À32
 
	mRe£rved
;

468 
	s∫dis_c⁄fig_∑ømëî
 {

469 
À32
 
	mP¨amëîNameOff£t
;

470 
À32
 
	mP¨amëîNameLígth
;

471 
À32
 
	mP¨amëîTy≥
;

472 
À32
 
	mP¨amëîVÆueOff£t
;

473 
À32
 
	mP¨amëîVÆueLígth
;

477 
	e∫dis_°©e


479 
	mRNDIS_UNINITIALIZED
,

480 
	mRNDIS_INITIALIZED
,

481 
	mRNDIS_DATA_INITIALIZED
,

485 
	endis_oid
 {

487 
	mOID_GEN_SUPPORTED_LIST
 = 0x00010101,

488 
	mOID_GEN_HARDWARE_STATUS
 = 0x00010102,

489 
	mOID_GEN_MEDIA_SUPPORTED
 = 0x00010103,

490 
	mOID_GEN_MEDIA_IN_USE
 = 0x00010104,

491 
	mOID_GEN_MAXIMUM_LOOKAHEAD
 = 0x00010105,

492 
	mOID_GEN_MAXIMUM_FRAME_SIZE
 = 0x00010106,

493 
	mOID_GEN_LINK_SPEED
 = 0x00010107,

494 
	mOID_GEN_TRANSMIT_BUFFER_SPACE
 = 0x00010108,

495 
	mOID_GEN_RECEIVE_BUFFER_SPACE
 = 0x00010109,

496 
	mOID_GEN_TRANSMIT_BLOCK_SIZE
 = 0x0001010a,

497 
	mOID_GEN_RECEIVE_BLOCK_SIZE
 = 0x0001010b,

498 
	mOID_GEN_VENDOR_ID
 = 0x0001010c,

499 
	mOID_GEN_VENDOR_DESCRIPTION
 = 0x0001010d,

500 
	mOID_GEN_CURRENT_PACKET_FILTER
 = 0x0001010e,

501 
	mOID_GEN_CURRENT_LOOKAHEAD
 = 0x0001010f,

502 
	mOID_GEN_DRIVER_VERSION
 = 0x00010110,

503 
	mOID_GEN_MAXIMUM_TOTAL_SIZE
 = 0x00010111,

504 
	mOID_GEN_PROTOCOL_OPTIONS
 = 0x00010112,

505 
	mOID_GEN_MAC_OPTIONS
 = 0x00010113,

506 
	mOID_GEN_MEDIA_CONNECT_STATUS
 = 0x00010114,

507 
	mOID_GEN_MAXIMUM_SEND_PACKETS
 = 0x00010115,

508 
	mOID_GEN_VENDOR_DRIVER_VERSION
 = 0x00010116,

509 
	mOID_GEN_SUPPORTED_GUIDS
 = 0x00010117,

510 
	mOID_GEN_NETWORK_LAYER_ADDRESSES
 = 0x00010118,

511 
	mOID_GEN_TRANSPORT_HEADER_OFFSET
 = 0x00010119,

512 
	mOID_GEN_MACHINE_NAME
 = 0x0001021a,

513 
	mOID_GEN_RNDIS_CONFIG_PARAMETER
 = 0x0001021b,

514 
	mOID_GEN_VLAN_ID
 = 0x0001021c,

517 
	mOID_GEN_MEDIA_CAPABILITIES
 = 0x00010201,

518 
	mOID_GEN_PHYSICAL_MEDIUM
 = 0x00010202,

521 
	mOID_GEN_XMIT_OK
 = 0x00020101,

522 
	mOID_GEN_RCV_OK
 = 0x00020102,

523 
	mOID_GEN_XMIT_ERROR
 = 0x00020103,

524 
	mOID_GEN_RCV_ERROR
 = 0x00020104,

525 
	mOID_GEN_RCV_NO_BUFFER
 = 0x00020105,

528 
	mOID_GEN_DIRECTED_BYTES_XMIT
 = 0x00020201,

529 
	mOID_GEN_DIRECTED_FRAMES_XMIT
 = 0x00020202,

530 
	mOID_GEN_MULTICAST_BYTES_XMIT
 = 0x00020203,

531 
	mOID_GEN_MULTICAST_FRAMES_XMIT
 = 0x00020204,

532 
	mOID_GEN_BROADCAST_BYTES_XMIT
 = 0x00020205,

533 
	mOID_GEN_BROADCAST_FRAMES_XMIT
 = 0x00020206,

534 
	mOID_GEN_DIRECTED_BYTES_RCV
 = 0x00020207,

535 
	mOID_GEN_DIRECTED_FRAMES_RCV
 = 0x00020208,

536 
	mOID_GEN_MULTICAST_BYTES_RCV
 = 0x00020209,

537 
	mOID_GEN_MULTICAST_FRAMES_RCV
 = 0x0002020a,

538 
	mOID_GEN_BROADCAST_BYTES_RCV
 = 0x0002020b,

539 
	mOID_GEN_BROADCAST_FRAMES_RCV
 = 0x0002020c,

540 
	mOID_GEN_RCV_CRC_ERROR
 = 0x0002020d,

541 
	mOID_GEN_TRANSMIT_QUEUE_LENGTH
 = 0x0002020e,

542 
	mOID_GEN_GET_TIME_CAPS
 = 0x0002020f,

543 
	mOID_GEN_GET_NETCARD_TIME
 = 0x00020210,

544 
	mOID_GEN_NETCARD_LOAD
 = 0x00020211,

545 
	mOID_GEN_DEVICE_PROFILE
 = 0x00020212,

546 
	mOID_GEN_INIT_TIME_MS
 = 0x00020213,

547 
	mOID_GEN_RESET_COUNTS
 = 0x00020214,

548 
	mOID_GEN_MEDIA_SENSE_COUNTS
 = 0x00020215,

549 
	mOID_GEN_FRIENDLY_NAME
 = 0x00020216,

550 
	mOID_GEN_MINIPORT_INFO
 = 0x00020217,

551 
	mOID_GEN_RESET_VERIFY_PARAMETERS
 = 0x00020218,

554 
	mOID_802_3_PERMANENT_ADDRESS
 = 0x01010101,

555 
	mOID_802_3_CURRENT_ADDRESS
 = 0x01010102,

556 
	mOID_802_3_MULTICAST_LIST
 = 0x01010103,

557 
	mOID_802_3_MAXIMUM_LIST_SIZE
 = 0x01010104,

558 
	mOID_802_3_MAC_OPTIONS
 = 0x01010105,

559 
	mOID_802_3_RCV_ERROR_ALIGNMENT
 = 0x01020101,

560 
	mOID_802_3_XMIT_ONE_COLLISION
 = 0x01020102,

561 
	mOID_802_3_XMIT_MORE_COLLISIONS
 = 0x01020103,

562 
	mOID_802_3_XMIT_DEFERRED
 = 0x01020201,

563 
	mOID_802_3_XMIT_MAX_COLLISIONS
 = 0x01020202,

564 
	mOID_802_3_RCV_OVERRUN
 = 0x01020203,

565 
	mOID_802_3_XMIT_UNDERRUN
 = 0x01020204,

566 
	mOID_802_3_XMIT_HEARTBEAT_FAILURE
 = 0x01020205,

567 
	mOID_802_3_XMIT_TIMES_CRS_LOST
 = 0x01020206,

568 
	mOID_802_3_XMIT_LATE_COLLISIONS
 = 0x01020207,

571 c⁄° 
uöt32_t
 
	goid_suµ‹ãd_li°
[] =

574 
OID_GEN_SUPPORTED_LIST
,

575 
OID_GEN_HARDWARE_STATUS
,

576 
OID_GEN_MEDIA_SUPPORTED
,

577 
OID_GEN_MEDIA_IN_USE
,

578 
OID_GEN_MAXIMUM_FRAME_SIZE
,

579 
OID_GEN_LINK_SPEED
,

580 
OID_GEN_TRANSMIT_BLOCK_SIZE
,

581 
OID_GEN_RECEIVE_BLOCK_SIZE
,

582 
OID_GEN_VENDOR_ID
,

583 
OID_GEN_VENDOR_DESCRIPTION
,

584 
OID_GEN_VENDOR_DRIVER_VERSION
,

585 
OID_GEN_CURRENT_PACKET_FILTER
,

586 
OID_GEN_MAXIMUM_TOTAL_SIZE
,

587 
OID_GEN_MEDIA_CONNECT_STATUS
,

588 
OID_GEN_PHYSICAL_MEDIUM
,

591 
OID_GEN_XMIT_OK
,

592 
OID_GEN_RCV_OK
,

593 
OID_GEN_XMIT_ERROR
,

594 
OID_GEN_RCV_ERROR
,

595 
OID_GEN_RCV_NO_BUFFER
,

599 
OID_802_3_PERMANENT_ADDRESS
,

600 
OID_802_3_CURRENT_ADDRESS
,

601 
OID_802_3_MULTICAST_LIST
,

602 
OID_802_3_MAC_OPTIONS
,

603 
OID_802_3_MAXIMUM_LIST_SIZE
,

606 
OID_802_3_RCV_ERROR_ALIGNMENT
,

607 
OID_802_3_XMIT_ONE_COLLISION
,

608 
OID_802_3_XMIT_MORE_COLLISIONS
,

611 
	#NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA
 (1 << 0)

	)

612 
	#NDIS_MAC_OPTION_RECEIVE_SERIALIZED
 (1 << 1)

	)

613 
	#NDIS_MAC_OPTION_TRANSFERS_NOT_PEND
 (1 << 2)

	)

614 
	#NDIS_MAC_OPTION_NO_LOOPBACK
 (1 << 3)

	)

615 
	#NDIS_MAC_OPTION_FULL_DUPLEX
 (1 << 4)

	)

616 
	#NDIS_MAC_OPTION_EOTX_INDICATION
 (1 << 5)

	)

617 
	#NDIS_MAC_OPTION_8021P_PRIORITY
 (1 << 6)

	)

619 
	s∫dis_ª•⁄£
 {

620 
QTAILQ_ENTRY
(
∫dis_ª•⁄£
Ë
	míåõs
;

621 
uöt32_t
 
	mÀngth
;

622 
uöt8_t
 
	mbuf
[0];

625 
	sUSBNëSèã
 {

626 
USBDevi˚
 
	mdev
;

628 
∫dis_°©e
 
	m∫dis_°©e
;

629 
uöt32_t
 
	mmedium
;

630 
uöt32_t
 
	m•ìd
;

631 
uöt32_t
 
	mmedü_°©e
;

632 
uöt16_t
 
	mfûãr
;

633 
uöt32_t
 
	mvíd‹id
;

635 
	mout_±r
;

636 
uöt8_t
 
	mout_buf
[2048];

638 
USBPackë
 *
	möpkt
;

639 
	mö_±r
, 
	mö_Àn
;

640 
uöt8_t
 
	mö_buf
[2048];

642 
	musb°rög_mac
[13];

643 
NICSèã
 *
	mnic
;

644 
NICC⁄f
 
	mc⁄f
;

645 
QTAILQ_HEAD
(
∫dis_ª•_hód
, 
∫dis_ª•⁄£
Ë
	m∫dis_ª•
;

646 } 
	tUSBNëSèã
;

648 
	$is_∫dis
(
USBNëSèã
 *
s
)

650  
s
->
dev
.
c⁄fig
->
bC⁄figuøti⁄VÆue
 =
DEV_RNDIS_CONFIG_VALUE
;

651 
	}
}

653 
	$ndis_quîy
(
USBNëSèã
 *
s
, 
uöt32_t
 
oid
,

654 
uöt8_t
 *
öbuf
, 
öÀn
, uöt8_à*
outbuf
,

655 
size_t
 
ouéí
)

657 
i
;

659 
oid
) {

662 
OID_GEN_SUPPORTED_LIST
:

663 
i
 = 0; i < 
	`ARRAY_SIZE
(
oid_suµ‹ãd_li°
); i++)

664 ((
À32
 *Ë
outbuf
)[
i
] = 
	`˝u_to_À32
(
oid_suµ‹ãd_li°
[i]);

665  (
oid_suµ‹ãd_li°
);

668 
OID_GEN_HARDWARE_STATUS
:

669 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

670  (
À32
);

673 
OID_GEN_MEDIA_SUPPORTED
:

674 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
s
->
medium
);

675  (
À32
);

678 
OID_GEN_MEDIA_IN_USE
:

679 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
s
->
medium
);

680  (
À32
);

683 
OID_GEN_MAXIMUM_FRAME_SIZE
:

684 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
ETH_FRAME_LEN
);

685  (
À32
);

688 
OID_GEN_LINK_SPEED
:

689 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
s
->
•ìd
);

690  (
À32
);

693 
OID_GEN_TRANSMIT_BLOCK_SIZE
:

694 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
ETH_FRAME_LEN
);

695  (
À32
);

698 
OID_GEN_RECEIVE_BLOCK_SIZE
:

699 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
ETH_FRAME_LEN
);

700  (
À32
);

703 
OID_GEN_VENDOR_ID
:

704 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
s
->
víd‹id
);

705  (
À32
);

708 
OID_GEN_VENDOR_DESCRIPTION
:

709 
	`p°r˝y
((*)
outbuf
, 
ouéí
, "QEMU USB RNDIS Net");

710  
	`°æí
((*)
outbuf
) + 1;

712 
OID_GEN_VENDOR_DRIVER_VERSION
:

713 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(1);

714  (
À32
);

717 
OID_GEN_CURRENT_PACKET_FILTER
:

718 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
s
->
fûãr
);

719  (
À32
);

722 
OID_GEN_MAXIMUM_TOTAL_SIZE
:

723 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
RNDIS_MAX_TOTAL_SIZE
);

724  (
À32
);

727 
OID_GEN_MEDIA_CONNECT_STATUS
:

728 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(
s
->
medü_°©e
);

729  (
À32
);

731 
OID_GEN_PHYSICAL_MEDIUM
:

732 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

733  (
À32
);

735 
OID_GEN_MAC_OPTIONS
:

736 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(

737 
NDIS_MAC_OPTION_RECEIVE_SERIALIZED
 |

738 
NDIS_MAC_OPTION_FULL_DUPLEX
);

739  (
À32
);

743 
OID_GEN_XMIT_OK
:

744 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

745  (
À32
);

748 
OID_GEN_RCV_OK
:

749 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

750  (
À32
);

753 
OID_GEN_XMIT_ERROR
:

754 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

755  (
À32
);

758 
OID_GEN_RCV_ERROR
:

759 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

760  (
À32
);

763 
OID_GEN_RCV_NO_BUFFER
:

764 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

765  (
À32
);

769 
OID_802_3_PERMANENT_ADDRESS
:

770 
	`mem˝y
(
outbuf
, 
s
->
c⁄f
.
maˇddr
.
a
, 6);

774 
OID_802_3_CURRENT_ADDRESS
:

775 
	`mem˝y
(
outbuf
, 
s
->
c⁄f
.
maˇddr
.
a
, 6);

779 
OID_802_3_MULTICAST_LIST
:

780 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0xe0000000);

781  (
À32
);

784 
OID_802_3_MAXIMUM_LIST_SIZE
:

785 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(1);

786  (
À32
);

788 
OID_802_3_MAC_OPTIONS
:

793 
OID_802_3_RCV_ERROR_ALIGNMENT
:

794 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

795  (
À32
);

798 
OID_802_3_XMIT_ONE_COLLISION
:

799 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

800  (
À32
);

803 
OID_802_3_XMIT_MORE_COLLISIONS
:

804 *((
À32
 *Ë
outbuf
Ë
	`˝u_to_À32
(0);

805  (
À32
);

808 
	`Ârötf
(
°dîr
, "usb√t: unknow¿OID 0x%08x\n", 
oid
);

812 
	}
}

814 
	$ndis_£t
(
USBNëSèã
 *
s
, 
uöt32_t
 
oid
,

815 
uöt8_t
 *
öbuf
, 
öÀn
)

817 
oid
) {

818 
OID_GEN_CURRENT_PACKET_FILTER
:

819 
s
->
fûãr
 = 
	`À32_to_˝up
((
À32
 *Ë
öbuf
);

820 i‡(
s
->
fûãr
) {

821 
s
->
∫dis_°©e
 = 
RNDIS_DATA_INITIALIZED
;

823 
s
->
∫dis_°©e
 = 
RNDIS_INITIALIZED
;

827 
OID_802_3_MULTICAST_LIST
:

831 
	}
}

833 
	$∫dis_gë_ª•⁄£
(
USBNëSèã
 *
s
, 
uöt8_t
 *
buf
)

835 
ªt
 = 0;

836 
∫dis_ª•⁄£
 *
r
 = 
s
->
∫dis_ª•
.
tqh_fú°
;

838 i‡(!
r
)

839  
ªt
;

841 
	`QTAILQ_REMOVE
(&
s
->
∫dis_ª•
, 
r
, 
íåõs
);

842 
ªt
 = 
r
->
Àngth
;

843 
	`mem˝y
(
buf
, 
r
->buf,Ñ->
Àngth
);

844 
	`g_‰ì
(
r
);

846  
ªt
;

847 
	}
}

849 *
	$∫dis_queue_ª•⁄£
(
USBNëSèã
 *
s
, 
Àngth
)

851 
∫dis_ª•⁄£
 *
r
 =

852 
	`g_mÆloc0
((
∫dis_ª•⁄£
Ë+ 
Àngth
);

854 
	`QTAILQ_INSERT_TAIL
(&
s
->
∫dis_ª•
, 
r
, 
íåõs
);

855 
r
->
Àngth
 =Üength;

857  &
r
->
buf
[0];

858 
	}
}

860 
	$∫dis_˛ór_ª•⁄£queue
(
USBNëSèã
 *
s
)

862 
∫dis_ª•⁄£
 *
r
;

864 (
r
 = 
s
->
∫dis_ª•
.
tqh_fú°
)) {

865 
	`QTAILQ_REMOVE
(&
s
->
∫dis_ª•
, 
r
, 
íåõs
);

866 
	`g_‰ì
(
r
);

868 
	}
}

870 
	$∫dis_öô_ª•⁄£
(
USBNëSèã
 *
s
, 
∫dis_öô_msg_ty≥
 *
buf
)

872 
∫dis_öô_cm∂t_ty≥
 *
ª•
 =

873 
	`∫dis_queue_ª•⁄£
(
s
, (
∫dis_öô_cm∂t_ty≥
));

875 i‡(!
ª•
)

876  
USB_RET_STALL
;

878 
ª•
->
MesßgeTy≥
 = 
	`˝u_to_À32
(
RNDIS_INITIALIZE_CMPLT
);

879 
ª•
->
MesßgeLígth
 = 
	`˝u_to_À32
((
∫dis_öô_cm∂t_ty≥
));

880 
ª•
->
Reque°ID
 = 
buf
->RequestID;

881 
ª•
->
Sètus
 = 
	`˝u_to_À32
(
RNDIS_STATUS_SUCCESS
);

882 
ª•
->
Maj‹Vîsi⁄
 = 
	`˝u_to_À32
(
RNDIS_MAJOR_VERSION
);

883 
ª•
->
Mö‹Vîsi⁄
 = 
	`˝u_to_À32
(
RNDIS_MINOR_VERSION
);

884 
ª•
->
Devi˚Fœgs
 = 
	`˝u_to_À32
(
RNDIS_DF_CONNECTIONLESS
);

885 
ª•
->
Medium
 = 
	`˝u_to_À32
(
RNDIS_MEDIUM_802_3
);

886 
ª•
->
MaxPackësPîTøns„r
 = 
	`˝u_to_À32
(1);

887 
ª•
->
MaxTøns„rSize
 = 
	`˝u_to_À32
(
ETH_FRAME_LEN
 +

888 (
∫dis_∑ckë_msg_ty≥
) + 22);

889 
ª•
->
PackëAlignmítFa˘‹
 = 
	`˝u_to_À32
(0);

890 
ª•
->
AFLi°Off£t
 = 
	`˝u_to_À32
(0);

891 
ª•
->
AFLi°Size
 = 
	`˝u_to_À32
(0);

893 
	}
}

895 
	$∫dis_quîy_ª•⁄£
(
USBNëSèã
 *
s
,

896 
∫dis_quîy_msg_ty≥
 *
buf
, 
Àngth
)

898 
∫dis_quîy_cm∂t_ty≥
 *
ª•
;

900 
uöt8_t
 
öfobuf
[(
oid_suµ‹ãd_li°
)];

901 
uöt32_t
 
bufoffs
, 
buÊí
;

902 
öfobuÊí
;

903 
ª•Àn
;

905 
bufoffs
 = 
	`À32_to_˝u
(
buf
->
Inf‹m©i⁄Buf„rOff£t
) + 8;

906 
buÊí
 = 
	`À32_to_˝u
(
buf
->
Inf‹m©i⁄Buf„rLígth
);

907 i‡(
bufoffs
 + 
buÊí
 > 
Àngth
)

908  
USB_RET_STALL
;

910 
öfobuÊí
 = 
	`ndis_quîy
(
s
, 
	`À32_to_˝u
(
buf
->
OID
),

911 
bufoffs
 + (
uöt8_t
 *Ë
buf
, 
buÊí
, 
öfobuf
,

912 (
öfobuf
));

913 
ª•Àn
 = (
∫dis_quîy_cm∂t_ty≥
) +

914 ((
öfobuÊí
 < 0) ? 0 : infobuflen);

915 
ª•
 = 
	`∫dis_queue_ª•⁄£
(
s
, 
ª•Àn
);

916 i‡(!
ª•
)

917  
USB_RET_STALL
;

919 
ª•
->
MesßgeTy≥
 = 
	`˝u_to_À32
(
RNDIS_QUERY_CMPLT
);

920 
ª•
->
Reque°ID
 = 
buf
->RequestID;

921 
ª•
->
MesßgeLígth
 = 
	`˝u_to_À32
(
ª•Àn
);

923 i‡(
öfobuÊí
 < 0) {

925 
ª•
->
Sètus
 = 
	`˝u_to_À32
(
RNDIS_STATUS_NOT_SUPPORTED
);

926 
ª•
->
Inf‹m©i⁄Buf„rLígth
 = 
	`˝u_to_À32
(0);

927 
ª•
->
Inf‹m©i⁄Buf„rOff£t
 = 
	`˝u_to_À32
(0);

931 
ª•
->
Sètus
 = 
	`˝u_to_À32
(
RNDIS_STATUS_SUCCESS
);

932 
ª•
->
Inf‹m©i⁄Buf„rOff£t
 =

933 
	`˝u_to_À32
(
öfobuÊí
 ? (
∫dis_quîy_cm∂t_ty≥
) - 8 : 0);

934 
ª•
->
Inf‹m©i⁄Buf„rLígth
 = 
	`˝u_to_À32
(
öfobuÊí
);

935 
	`mem˝y
(
ª•
 + 1, 
öfobuf
, 
öfobuÊí
);

938 
	}
}

940 
	$∫dis_£t_ª•⁄£
(
USBNëSèã
 *
s
,

941 
∫dis_£t_msg_ty≥
 *
buf
, 
Àngth
)

943 
∫dis_£t_cm∂t_ty≥
 *
ª•
 =

944 
	`∫dis_queue_ª•⁄£
(
s
, (
∫dis_£t_cm∂t_ty≥
));

945 
uöt32_t
 
bufoffs
, 
buÊí
;

946 
ªt
;

948 i‡(!
ª•
)

949  
USB_RET_STALL
;

951 
bufoffs
 = 
	`À32_to_˝u
(
buf
->
Inf‹m©i⁄Buf„rOff£t
) + 8;

952 
buÊí
 = 
	`À32_to_˝u
(
buf
->
Inf‹m©i⁄Buf„rLígth
);

953 i‡(
bufoffs
 + 
buÊí
 > 
Àngth
)

954  
USB_RET_STALL
;

956 
ªt
 = 
	`ndis_£t
(
s
, 
	`À32_to_˝u
(
buf
->
OID
),

957 
bufoffs
 + (
uöt8_t
 *Ë
buf
, 
buÊí
);

958 
ª•
->
MesßgeTy≥
 = 
	`˝u_to_À32
(
RNDIS_SET_CMPLT
);

959 
ª•
->
Reque°ID
 = 
buf
->RequestID;

960 
ª•
->
MesßgeLígth
 = 
	`˝u_to_À32
((
∫dis_£t_cm∂t_ty≥
));

961 i‡(
ªt
 < 0) {

963 
ª•
->
Sètus
 = 
	`˝u_to_À32
(
RNDIS_STATUS_NOT_SUPPORTED
);

966 
ª•
->
Sètus
 = 
	`˝u_to_À32
(
RNDIS_STATUS_SUCCESS
);

969 
	}
}

971 
	$∫dis_ª£t_ª•⁄£
(
USBNëSèã
 *
s
, 
∫dis_ª£t_msg_ty≥
 *
buf
)

973 
∫dis_ª£t_cm∂t_ty≥
 *
ª•
 =

974 
	`∫dis_queue_ª•⁄£
(
s
, (
∫dis_ª£t_cm∂t_ty≥
));

976 i‡(!
ª•
)

977  
USB_RET_STALL
;

979 
ª•
->
MesßgeTy≥
 = 
	`˝u_to_À32
(
RNDIS_RESET_CMPLT
);

980 
ª•
->
MesßgeLígth
 = 
	`˝u_to_À32
((
∫dis_ª£t_cm∂t_ty≥
));

981 
ª•
->
Sètus
 = 
	`˝u_to_À32
(
RNDIS_STATUS_SUCCESS
);

982 
ª•
->
AddªssögRe£t
 = 
	`˝u_to_À32
(1);

985 
	}
}

987 
	$∫dis_kì∑live_ª•⁄£
(
USBNëSèã
 *
s
,

988 
∫dis_kì∑live_msg_ty≥
 *
buf
)

990 
∫dis_kì∑live_cm∂t_ty≥
 *
ª•
 =

991 
	`∫dis_queue_ª•⁄£
(
s
, (
∫dis_kì∑live_cm∂t_ty≥
));

993 i‡(!
ª•
)

994  
USB_RET_STALL
;

996 
ª•
->
MesßgeTy≥
 = 
	`˝u_to_À32
(
RNDIS_KEEPALIVE_CMPLT
);

997 
ª•
->
MesßgeLígth
 = 
	`˝u_to_À32
((
∫dis_kì∑live_cm∂t_ty≥
));

998 
ª•
->
Reque°ID
 = 
buf
->RequestID;

999 
ª•
->
Sètus
 = 
	`˝u_to_À32
(
RNDIS_STATUS_SUCCESS
);

1002 
	}
}

1004 
	$∫dis_∑r£
(
USBNëSèã
 *
s
, 
uöt8_t
 *
d©a
, 
Àngth
)

1006 
uöt32_t
 
msg_ty≥
;

1007 
À32
 *
tmp
 = (À32 *Ë
d©a
;

1009 
msg_ty≥
 = 
	`À32_to_˝up
(
tmp
);

1011 
msg_ty≥
) {

1012 
RNDIS_INITIALIZE_MSG
:

1013 
s
->
∫dis_°©e
 = 
RNDIS_INITIALIZED
;

1014  
	`∫dis_öô_ª•⁄£
(
s
, (
∫dis_öô_msg_ty≥
 *Ë
d©a
);

1016 
RNDIS_HALT_MSG
:

1017 
s
->
∫dis_°©e
 = 
RNDIS_UNINITIALIZED
;

1020 
RNDIS_QUERY_MSG
:

1021  
	`∫dis_quîy_ª•⁄£
(
s
, (
∫dis_quîy_msg_ty≥
 *Ë
d©a
, 
Àngth
);

1023 
RNDIS_SET_MSG
:

1024  
	`∫dis_£t_ª•⁄£
(
s
, (
∫dis_£t_msg_ty≥
 *Ë
d©a
, 
Àngth
);

1026 
RNDIS_RESET_MSG
:

1027 
	`∫dis_˛ór_ª•⁄£queue
(
s
);

1028 
s
->
out_±r
 = s->
ö_±r
 = s->
ö_Àn
 = 0;

1029  
	`∫dis_ª£t_ª•⁄£
(
s
, (
∫dis_ª£t_msg_ty≥
 *Ë
d©a
);

1031 
RNDIS_KEEPALIVE_MSG
:

1033  
	`∫dis_kì∑live_ª•⁄£
(
s
, (
∫dis_kì∑live_msg_ty≥
 *Ë
d©a
);

1036  
USB_RET_STALL
;

1037 
	}
}

1039 
	$usb_√t_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

1041 
	}
}

1043 
	$usb_√t_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

1044 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

1046 
USBNëSèã
 *
s
 = (USBNëSèã *Ë
dev
;

1047 
ªt
;

1049 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

1050 i‡(
ªt
 >= 0) {

1051  
ªt
;

1054 
ªt
 = 0;

1055 
ªque°
) {

1056 
CœssI¡îÁ˚OutReque°
 | 
USB_CDC_SEND_ENCAPSULATED_COMMAND
:

1057 i‡(!
	`is_∫dis
(
s
Ë|| 
vÆue
 || 
ödex
 != 0) {

1058 
Áû
;

1060 #ifde‡
TRAFFIC_DEBUG


1062 
i
;

1063 
	`Ârötf
(
°dîr
, "SEND_ENCAPSULATED_COMMAND:");

1064 
i
 = 0; i < 
Àngth
; i++) {

1065 i‡(!(
i
 & 15))

1066 
	`Ârötf
(
°dîr
, "\n%04x:", 
i
);

1067 
	`Ârötf
(
°dîr
, " %02x", 
d©a
[
i
]);

1069 
	`Ârötf
(
°dîr
, "\n\n");

1072 
ªt
 = 
	`∫dis_∑r£
(
s
, 
d©a
, 
Àngth
);

1075 
CœssI¡îÁ˚Reque°
 | 
USB_CDC_GET_ENCAPSULATED_RESPONSE
:

1076 i‡(!
	`is_∫dis
(
s
Ë|| 
vÆue
 || 
ödex
 != 0) {

1077 
Áû
;

1079 
ªt
 = 
	`∫dis_gë_ª•⁄£
(
s
, 
d©a
);

1080 i‡(!
ªt
) {

1081 
d©a
[0] = 0;

1082 
ªt
 = 1;

1084 #ifde‡
TRAFFIC_DEBUG


1086 
i
;

1087 
	`Ârötf
(
°dîr
, "GET_ENCAPSULATED_RESPONSE:");

1088 
i
 = 0; i < 
ªt
; i++) {

1089 i‡(!(
i
 & 15))

1090 
	`Ârötf
(
°dîr
, "\n%04x:", 
i
);

1091 
	`Ârötf
(
°dîr
, " %02x", 
d©a
[
i
]);

1093 
	`Ârötf
(
°dîr
, "\n\n");

1099 
Áû
:

1100 
	`Ârötf
(
°dîr
, "usbnet: failed controlÅransaction: "

1102 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
);

1103 
ªt
 = 
USB_RET_STALL
;

1106  
ªt
;

1107 
	}
}

1109 
	$usb_√t_h™dÀ_°©usö
(
USBNëSèã
 *
s
, 
USBPackë
 *
p
)

1111 
À32
 
buf
[2];

1112 
ªt
 = 8;

1114 i‡(
p
->
iov
.
size
 < 8) {

1115  
USB_RET_STALL
;

1118 
buf
[0] = 
	`˝u_to_À32
(1);

1119 
buf
[1] = 
	`˝u_to_À32
(0);

1120 
	`usb_∑ckë_c›y
(
p
, 
buf
, 8);

1121 i‡(!
s
->
∫dis_ª•
.
tqh_fú°
)

1122 
ªt
 = 
USB_RET_NAK
;

1124 #ifde‡
TRAFFIC_DEBUG


1125 
	`Ârötf
(
°dîr
, "usbnet: interruptÖollÜen %zuÑeturn %d",

1126 
p
->
iov
.
size
, 
ªt
);

1127 
	`iov_hexdump
(
p
->
iov
.iov,Ö->iov.
niov
, 
°dîr
, "usb√t", 
ªt
);

1130  
ªt
;

1131 
	}
}

1133 
	$usb_√t_h™dÀ_d©aö
(
USBNëSèã
 *
s
, 
USBPackë
 *
p
)

1135 
ªt
 = 
USB_RET_NAK
;

1137 i‡(
s
->
ö_±r
 > s->
ö_Àn
) {

1138 
s
->
ö_±r
 = s->
ö_Àn
 = 0;

1139 
ªt
 = 
USB_RET_NAK
;

1140  
ªt
;

1142 i‡(!
s
->
ö_Àn
) {

1143 
ªt
 = 
USB_RET_NAK
;

1144  
ªt
;

1146 
ªt
 = 
s
->
ö_Àn
 - s->
ö_±r
;

1147 i‡(
ªt
 > 
p
->
iov
.
size
) {

1148 
ªt
 = 
p
->
iov
.
size
;

1150 
	`usb_∑ckë_c›y
(
p
, &
s
->
ö_buf
[s->
ö_±r
], 
ªt
);

1151 
s
->
ö_±r
 +
ªt
;

1152 i‡(
s
->
ö_±r
 >s->
ö_Àn
 &&

1153 (
	`is_∫dis
(
s
Ë|| (s->
ö_Àn
 & (64 - 1)Ë|| !
ªt
)) {

1155 
s
->
ö_±r
 = s->
ö_Àn
 = 0;

1158 #ifde‡
TRAFFIC_DEBUG


1159 
	`Ârötf
(
°dîr
, "usb√t: d©®öÜí %zuÑëu∫ %d", 
p
->
iov
.
size
, 
ªt
);

1160 
	`iov_hexdump
(
p
->
iov
.iov,Ö->iov.
niov
, 
°dîr
, "usb√t", 
ªt
);

1163  
ªt
;

1164 
	}
}

1166 
	$usb_√t_h™dÀ_d©aout
(
USBNëSèã
 *
s
, 
USBPackë
 *
p
)

1168 
ªt
 = 
p
->
iov
.
size
;

1169 
sz
 = (
s
->
out_buf
Ë- s->
out_±r
;

1170 
∫dis_∑ckë_msg_ty≥
 *
msg
 =

1171 (
∫dis_∑ckë_msg_ty≥
 *Ë
s
->
out_buf
;

1172 
uöt32_t
 
Àn
;

1174 #ifde‡
TRAFFIC_DEBUG


1175 
	`Ârötf
(
°dîr
, "usb√t: d©®ouàÀ¿%zu\n", 
p
->
iov
.
size
);

1176 
	`iov_hexdump
(
p
->
iov
.iov,Ö->iov.
niov
, 
°dîr
, "usb√t",Ö->iov.
size
);

1179 i‡(
sz
 > 
ªt
)

1180 
sz
 = 
ªt
;

1181 
	`usb_∑ckë_c›y
(
p
, &
s
->
out_buf
[s->
out_±r
], 
sz
);

1182 
s
->
out_±r
 +
sz
;

1184 i‡(!
	`is_∫dis
(
s
)) {

1185 i‡(
ªt
 < 64) {

1186 
	`qemu_£nd_∑ckë
(&
s
->
nic
->
nc
, s->
out_buf
, s->
out_±r
);

1187 
s
->
out_±r
 = 0;

1189  
ªt
;

1191 
Àn
 = 
	`À32_to_˝u
(
msg
->
MesßgeLígth
);

1192 i‡(
s
->
out_±r
 < 8 || s->out_±∏< 
Àn
)

1193  
ªt
;

1194 i‡(
	`À32_to_˝u
(
msg
->
MesßgeTy≥
Ë=
RNDIS_PACKET_MSG
) {

1195 
uöt32_t
 
offs
 = 8 + 
	`À32_to_˝u
(
msg
->
D©aOff£t
);

1196 
uöt32_t
 
size
 = 
	`À32_to_˝u
(
msg
->
D©aLígth
);

1197 i‡(
offs
 + 
size
 <
Àn
)

1198 
	`qemu_£nd_∑ckë
(&
s
->
nic
->
nc
, s->
out_buf
 + 
offs
, 
size
);

1200 
s
->
out_±r
 -
Àn
;

1201 
	`memmove
(
s
->
out_buf
, &s->out_buf[
Àn
], s->
out_±r
);

1203  
ªt
;

1204 
	}
}

1206 
	$usb_√t_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

1208 
USBNëSèã
 *
s
 = (USBNëSèã *Ë
dev
;

1209 
ªt
 = 0;

1211 
p
->
pid
) {

1212 
USB_TOKEN_IN
:

1213 
p
->
ï
->
ƒ
) {

1215 
ªt
 = 
	`usb_√t_h™dÀ_°©usö
(
s
, 
p
);

1219 
ªt
 = 
	`usb_√t_h™dÀ_d©aö
(
s
, 
p
);

1223 
Áû
;

1227 
USB_TOKEN_OUT
:

1228 
p
->
ï
->
ƒ
) {

1230 
ªt
 = 
	`usb_√t_h™dÀ_d©aout
(
s
, 
p
);

1234 
Áû
;

1239 
Áû
:

1240 
ªt
 = 
USB_RET_STALL
;

1243 i‡(
ªt
 =
USB_RET_STALL
)

1244 
	`Ârötf
(
°dîr
, "usbnet: failed dataÅransaction: "

1246 
p
->
pid
,Ö->
ï
->
ƒ
,Ö->
iov
.
size
);

1247  
ªt
;

1248 
	}
}

1250 
ssize_t
 
	$usb√t_ª˚ive
(
NëClõ¡Sèã
 *
nc
, c⁄° 
uöt8_t
 *
buf
, 
size_t
 
size
)

1252 
USBNëSèã
 *
s
 = 
	`DO_UPCAST
(
NICSèã
, 
nc
,Çc)->
›aque
;

1253 
∫dis_∑ckë_msg_ty≥
 *
msg
;

1255 i‡(
	`is_∫dis
(
s
)) {

1256 
msg
 = (
∫dis_∑ckë_msg_ty≥
 *Ë
s
->
ö_buf
;

1257 i‡(
s
->
∫dis_°©e
 !
RNDIS_DATA_INITIALIZED
) {

1260 i‡(
size
 + (
∫dis_∑ckë_msg_ty≥
Ë> (
s
->
ö_buf
))

1263 
	`mem£t
(
msg
, 0, (
∫dis_∑ckë_msg_ty≥
));

1264 
msg
->
MesßgeTy≥
 = 
	`˝u_to_À32
(
RNDIS_PACKET_MSG
);

1265 
msg
->
MesßgeLígth
 = 
	`˝u_to_À32
(
size
 + (
∫dis_∑ckë_msg_ty≥
));

1266 
msg
->
D©aOff£t
 = 
	`˝u_to_À32
((
∫dis_∑ckë_msg_ty≥
) - 8);

1267 
msg
->
D©aLígth
 = 
	`˝u_to_À32
(
size
);

1276 
	`mem˝y
(
msg
 + 1, 
buf
, 
size
);

1277 
s
->
ö_Àn
 = 
size
 + (
∫dis_∑ckë_msg_ty≥
);

1279 i‡(
size
 > (
s
->
ö_buf
))

1281 
	`mem˝y
(
s
->
ö_buf
, 
buf
, 
size
);

1282 
s
->
ö_Àn
 = 
size
;

1284 
s
->
ö_±r
 = 0;

1285  
size
;

1286 
	}
}

1288 
	$usb√t_ˇn_ª˚ive
(
NëClõ¡Sèã
 *
nc
)

1290 
USBNëSèã
 *
s
 = 
	`DO_UPCAST
(
NICSèã
, 
nc
,Çc)->
›aque
;

1292 i‡(
	`is_∫dis
(
s
Ë&& s->
∫dis_°©e
 !
RNDIS_DATA_INITIALIZED
) {

1296  !
s
->
ö_Àn
;

1297 
	}
}

1299 
	$usb√t_˛ónup
(
NëClõ¡Sèã
 *
nc
)

1301 
USBNëSèã
 *
s
 = 
	`DO_UPCAST
(
NICSèã
, 
nc
,Çc)->
›aque
;

1303 
s
->
nic
 = 
NULL
;

1304 
	}
}

1306 
	$usb_√t_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

1308 
USBNëSèã
 *
s
 = (USBNëSèã *Ë
dev
;

1311 
	`∫dis_˛ór_ª•⁄£queue
(
s
);

1312 
	`qemu_dñ_√t_˛õ¡
(&
s
->
nic
->
nc
);

1313 
	}
}

1315 
NëClõ¡Info
 
	g√t_usb√t_öfo
 = {

1316 .
ty≥
 = 
NET_CLIENT_OPTIONS_KIND_NIC
,

1317 .
	gsize
 = (
NICSèã
),

1318 .
	gˇn_ª˚ive
 = 
usb√t_ˇn_ª˚ive
,

1319 .
	gª˚ive
 = 
usb√t_ª˚ive
,

1320 .
	g˛ónup
 = 
usb√t_˛ónup
,

1323 
	$usb_√t_öô‚
(
USBDevi˚
 *
dev
)

1325 
USBNëSèã
 *
s
 = 
	`DO_UPCAST
(USBNëSèã, 
dev
, dev);

1327 
	`usb_desc_¸óã_£rül
(
dev
);

1328 
	`usb_desc_öô
(
dev
);

1330 
s
->
∫dis_°©e
 = 
RNDIS_UNINITIALIZED
;

1331 
	`QTAILQ_INIT
(&
s
->
∫dis_ª•
);

1333 
s
->
medium
 = 0;

1334 
s
->
•ìd
 = 1000000;

1335 
s
->
medü_°©e
 = 0; ;

1336 
s
->
fûãr
 = 0;

1337 
s
->
víd‹id
 = 0x1234;

1339 
	`qemu_maˇddr_deÁu…_if_un£t
(&
s
->
c⁄f
.
maˇddr
);

1340 
s
->
nic
 = 
	`qemu_√w_nic
(&
√t_usb√t_öfo
, &s->
c⁄f
,

1341 
	`obje˘_gë_ty≥«me
(
	`OBJECT
(
s
)), s->
dev
.
qdev
.
id
, s);

1342 
	`qemu_f‹m©_nic_öfo_°r
(&
s
->
nic
->
nc
, s->
c⁄f
.
maˇddr
.
a
);

1343 
	`¢¥ötf
(
s
->
usb°rög_mac
, (s->usbstring_mac),

1346 
s
->
c⁄f
.
maˇddr
.
a
[1],

1347 
s
->
c⁄f
.
maˇddr
.
a
[2],

1348 
s
->
c⁄f
.
maˇddr
.
a
[3],

1349 
s
->
c⁄f
.
maˇddr
.
a
[4],

1350 
s
->
c⁄f
.
maˇddr
.
a
[5]);

1351 
	`usb_desc_£t_°rög
(
dev
, 
STRING_ETHADDR
, 
s
->
usb°rög_mac
);

1353 
	`add_boŸ_devi˚_∑th
(
s
->
c⁄f
.
boŸödex
, &
dev
->
qdev
, "/ethernet@0");

1355 
	}
}

1357 
USBDevi˚
 *
	$usb_√t_öô
(
USBBus
 *
bus
, c⁄° *
cmdlöe
)

1359 
Eº‹
 *
loˇl_îr
 = 
NULL
;

1360 
USBDevi˚
 *
dev
;

1361 
QemuO±s
 *
›ts
;

1362 
idx
;

1364 
›ts
 = 
	`qemu_›ts_∑r£
(
	`qemu_föd_›ts
("√t"), 
cmdlöe
, 0);

1365 i‡(!
›ts
) {

1366  
NULL
;

1368 
	`qemu_›t_£t
(
›ts
, "type", "nic");

1369 
	`qemu_›t_£t
(
›ts
, "model", "usb");

1371 
idx
 = 
	`√t_˛õ¡_öô
(
›ts
, 0, &
loˇl_îr
);

1372 i‡(
	`îr‹_is_£t
(&
loˇl_îr
)) {

1373 
	`qîr‹_ªp‹t_îr
(
loˇl_îr
);

1374 
	`îr‹_‰ì
(
loˇl_îr
);

1375  
NULL
;

1378 
dev
 = 
	`usb_¸óã
(
bus
, "usb-net");

1379 i‡(!
dev
) {

1380  
NULL
;

1382 
	`qdev_£t_nic_¥›îtõs
(&
dev
->
qdev
, &
nd_èbÀ
[
idx
]);

1383 
	`qdev_öô_noÁû
(&
dev
->
qdev
);

1384  
dev
;

1385 
	}
}

1387 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_√t
 = {

1388 .
«me
 = "usb-net",

1389 .
	gunmigøèbÀ
 = 1,

1392 
Pr›îty
 
	g√t_¥›îtõs
[] = {

1393 
DEFINE_NIC_PROPERTIES
(
USBNëSèã
, 
c⁄f
),

1394 
DEFINE_PROP_END_OF_LIST
(),

1397 
	$usb_√t_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1399 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1400 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

1402 
uc
->
öô
 = 
usb_√t_öô‚
;

1403 
uc
->
¥odu˘_desc
 = "QEMU USB Network Interface";

1404 
uc
->
usb_desc
 = &
desc_√t
;

1405 
uc
->
h™dÀ_ª£t
 = 
usb_√t_h™dÀ_ª£t
;

1406 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_√t_h™dÀ_c⁄åﬁ
;

1407 
uc
->
h™dÀ_d©a
 = 
usb_√t_h™dÀ_d©a
;

1408 
uc
->
h™dÀ_de°roy
 = 
usb_√t_h™dÀ_de°roy
;

1409 
dc
->
fw_«me
 = "network";

1410 
dc
->
vmsd
 = &
vm°©e_usb_√t
;

1411 
dc
->
¥›s
 = 
√t_¥›îtõs
;

1412 
	}
}

1414 
Ty≥Info
 
	g√t_öfo
 = {

1415 .
«me
 = "usb-net",

1416 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

1417 .
	gö°™˚_size
 = (
USBNëSèã
),

1418 .
	g˛ass_öô
 = 
usb_√t_˛ass_öô‚
,

1421 
	$usb_√t_ªgi°î_ty≥s
()

1423 
	`ty≥_ªgi°î_°©ic
(&
√t_öfo
);

1424 
	`usb_Àgacy_ªgi°î
("usb-√t", "√t", 
usb_√t_öô
);

1425 
	}
}

1427 
ty≥_öô
(
usb_√t_ªgi°î_ty≥s
)

	@dev-serial.c

11 
	~"qemu-comm⁄.h
"

12 
	~"qemu-îr‹.h
"

13 
	~"hw/usb.h
"

14 
	~"hw/usb/desc.h
"

15 
	~"qemu-ch¨.h
"

19 #ifde‡
DEBUG_Sîül


20 
	#DPRINTF
(
fmt
, ...) \

21 dÿ{ 
	`¥ötf
("usb-£rül: " 
fmt
 , ## 
__VA_ARGS__
); } 0)

	)

23 
	#DPRINTF
(
fmt
, ...Ëdÿ{} 0)

	)

26 
	#RECV_BUF
 384

	)

29 
	#FTDI_RESET
 0

	)

30 
	#FTDI_SET_MDM_CTRL
 1

	)

31 
	#FTDI_SET_FLOW_CTRL
 2

	)

32 
	#FTDI_SET_BAUD
 3

	)

33 
	#FTDI_SET_DATA
 4

	)

34 
	#FTDI_GET_MDM_ST
 5

	)

35 
	#FTDI_SET_EVENT_CHR
 6

	)

36 
	#FTDI_SET_ERROR_CHR
 7

	)

37 
	#FTDI_SET_LATENCY
 9

	)

38 
	#FTDI_GET_LATENCY
 10

	)

40 
	#Devi˚OutVíd‹
 ((
USB_DIR_OUT
|
USB_TYPE_VENDOR
|
USB_RECIP_DEVICE
)<<8)

	)

41 
	#Devi˚InVíd‹
 ((
USB_DIR_IN
 |
USB_TYPE_VENDOR
|
USB_RECIP_DEVICE
)<<8)

	)

45 
	#FTDI_RESET_SIO
 0

	)

46 
	#FTDI_RESET_RX
 1

	)

47 
	#FTDI_RESET_TX
 2

	)

51 
	#FTDI_DTR
 1

	)

52 
	#FTDI_SET_DTR
 (
FTDI_DTR
 << 8)

	)

53 
	#FTDI_RTS
 2

	)

54 
	#FTDI_SET_RTS
 (
FTDI_RTS
 << 8)

	)

58 
	#FTDI_RTS_CTS_HS
 1

	)

59 
	#FTDI_DTR_DSR_HS
 2

	)

60 
	#FTDI_XON_XOFF_HS
 4

	)

64 
	#FTDI_PARITY
 (0x7 << 8)

	)

65 
	#FTDI_ODD
 (0x1 << 8)

	)

66 
	#FTDI_EVEN
 (0x2 << 8)

	)

67 
	#FTDI_MARK
 (0x3 << 8)

	)

68 
	#FTDI_SPACE
 (0x4 << 8)

	)

70 
	#FTDI_STOP
 (0x3 << 11)

	)

71 
	#FTDI_STOP1
 (0x0 << 11)

	)

72 
	#FTDI_STOP15
 (0x1 << 11)

	)

73 
	#FTDI_STOP2
 (0x2 << 11)

	)

77 
	#FTDI_CTS
 (1<<4)

78 
	#FTDI_DSR
 (1<<5)

79 
	#FTDI_RI
 (1<<6)

80 
	#FTDI_RLSD
 (1<<7)

81 

	)

84 
	#FTDI_DR
 (1<<0)

85 
	#FTDI_OE
 (1<<1)

86 
	#FTDI_PE
 (1<<2)

87 
	#FTDI_FE
 (1<<3)

88 
	#FTDI_BI
 (1<<4)

89 
	#FTDI_THRE
 (1<<5)

90 
	#FTDI_TEMT
 (1<<6)

91 
	#FTDI_FIFO
 (1<<7)

92 

	)

94 
USBDevi˚
 
	mdev
;

95 
uöt8_t
 
	mªcv_buf
[
RECV_BUF
];

96 
uöt16_t
 
	mªcv_±r
;

97 
uöt16_t
 
	mªcv_u£d
;

98 
uöt8_t
 
	mevít_chr
;

99 
uöt8_t
 
	mîr‹_chr
;

100 
uöt8_t
 
	mevít_åiggî
;

101 
QEMUSîülSëP¨ams
 
	m∑øms
;

102 
	mœãncy
;

103 
Ch¨DrivîSèã
 *
	mcs
;

104 } 
	tUSBSîülSèã
;

107 
	mSTR_MANUFACTURER
 = 1,

108 
	mSTR_PRODUCT_SERIAL
,

109 
	mSTR_PRODUCT_BRAILLE
,

110 
	mSTR_SERIALNUMBER
,

113 c⁄° 
USBDescSåögs
 
	gdesc_°rögs
 = {

114 [
STR_MANUFACTURER
] = "QEMU",

115 [
STR_PRODUCT_SERIAL
] = "QEMU USB SERIAL",

116 [
STR_PRODUCT_BRAILLE
] = "QEMU USB BRAILLE",

117 [
STR_SERIALNUMBER
] = "1",

120 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚0
 = {

121 .
bI¡îÁ˚Numbî
 = 0,

122 .
	gbNumEndpoöts
 = 2,

123 .
	gbI¡îÁ˚Cœss
 = 0xff,

124 .
	gbI¡îÁ˚SubCœss
 = 0xff,

125 .
	gbI¡îÁ˚PrŸocﬁ
 = 0xff,

126 .
	gïs
 = (
USBDescEndpoöt
[]) {

128 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

129 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

130 .
	gwMaxPackëSize
 = 64,

132 .
	gbEndpoötAddªss
 = 
USB_DIR_OUT
 | 0x02,

133 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

134 .
	gwMaxPackëSize
 = 64,

139 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚
 = {

140 .
bcdUSB
 = 0x0200,

141 .
	gbMaxPackëSize0
 = 8,

142 .
	gbNumC⁄figuøti⁄s
 = 1,

143 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

145 .
bNumI¡îÁ˚s
 = 1,

146 .
	gbC⁄figuøti⁄VÆue
 = 1,

147 .
	gbmAâribuãs
 = 0x80,

148 .
	gbMaxPowî
 = 50,

149 .
	gnif
 = 1,

150 .
	gifs
 = &
desc_iÁ˚0
,

155 c⁄° 
USBDesc
 
	gdesc_£rül
 = {

156 .
id
 = {

157 .
idVíd‹
 = 0x0403,

158 .
	gidProdu˘
 = 0x6001,

159 .
	gbcdDevi˚
 = 0x0400,

160 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

161 .
	giProdu˘
 = 
STR_PRODUCT_SERIAL
,

162 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

164 .
	gfuŒ
 = &
desc_devi˚
,

165 .
	g°r
 = 
desc_°rögs
,

168 c⁄° 
USBDesc
 
	gdesc_bøûÀ
 = {

169 .
id
 = {

170 .
idVíd‹
 = 0x0403,

171 .
	gidProdu˘
 = 0xfe72,

172 .
	gbcdDevi˚
 = 0x0400,

173 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

174 .
	giProdu˘
 = 
STR_PRODUCT_BRAILLE
,

175 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

177 .
	gfuŒ
 = &
desc_devi˚
,

178 .
	g°r
 = 
desc_°rögs
,

181 
	$usb_£rül_ª£t
(
USBSîülSèã
 *
s
)

184 
s
->
evít_chr
 = 0x0d;

185 
s
->
evít_åiggî
 = 0;

186 
s
->
ªcv_±r
 = 0;

187 
s
->
ªcv_u£d
 = 0;

189 
	}
}

191 
	$usb_£rül_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

193 
USBSîülSèã
 *
s
 = (USBSîülSèã *)
dev
;

195 
	`DPRINTF
("Reset\n");

197 
	`usb_£rül_ª£t
(
s
);

199 
	}
}

201 
uöt8_t
 
	$usb_gë_modem_löes
(
USBSîülSèã
 *
s
)

203 
Êags
;

204 
uöt8_t
 
ªt
;

206 i‡(
	`qemu_chr_„_io˘l
(
s
->
cs
, 
CHR_IOCTL_SERIAL_GET_TIOCM
, &
Êags
Ë=-
ENOTSUP
)

207  
FTDI_CTS
|
FTDI_DSR
|
FTDI_RLSD
;

209 
ªt
 = 0;

210 i‡(
Êags
 & 
CHR_TIOCM_CTS
)

211 
ªt
 |
FTDI_CTS
;

212 i‡(
Êags
 & 
CHR_TIOCM_DSR
)

213 
ªt
 |
FTDI_DSR
;

214 i‡(
Êags
 & 
CHR_TIOCM_RI
)

215 
ªt
 |
FTDI_RI
;

216 i‡(
Êags
 & 
CHR_TIOCM_CAR
)

217 
ªt
 |
FTDI_RLSD
;

219  
ªt
;

220 
	}
}

222 
	$usb_£rül_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

223 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

225 
USBSîülSèã
 *
s
 = (USBSîülSèã *)
dev
;

226 
ªt
;

228 
	`DPRINTF
("gŸ c⁄åﬁ %x, vÆuê%x\n",
ªque°
, 
vÆue
);

229 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

230 i‡(
ªt
 >= 0) {

231  
ªt
;

234 
ªt
 = 0;

235 
ªque°
) {

236 
EndpoötOutReque°
 | 
USB_REQ_CLEAR_FEATURE
:

237 
ªt
 = 0;

241 
Devi˚OutVíd‹
 | 
FTDI_RESET
:

242 
vÆue
) {

243 
FTDI_RESET_SIO
:

244 
	`usb_£rül_ª£t
(
s
);

246 
FTDI_RESET_RX
:

247 
s
->
ªcv_±r
 = 0;

248 
s
->
ªcv_u£d
 = 0;

251 
FTDI_RESET_TX
:

256 
Devi˚OutVíd‹
 | 
FTDI_SET_MDM_CTRL
:

258 
Êags
;

259 
	`qemu_chr_„_io˘l
(
s
->
cs
,
CHR_IOCTL_SERIAL_GET_TIOCM
, &
Êags
);

260 i‡(
vÆue
 & 
FTDI_SET_RTS
) {

261 i‡(
vÆue
 & 
FTDI_RTS
)

262 
Êags
 |
CHR_TIOCM_RTS
;

264 
Êags
 &~
CHR_TIOCM_RTS
;

266 i‡(
vÆue
 & 
FTDI_SET_DTR
) {

267 i‡(
vÆue
 & 
FTDI_DTR
)

268 
Êags
 |
CHR_TIOCM_DTR
;

270 
Êags
 &~
CHR_TIOCM_DTR
;

272 
	`qemu_chr_„_io˘l
(
s
->
cs
,
CHR_IOCTL_SERIAL_SET_TIOCM
, &
Êags
);

275 
Devi˚OutVíd‹
 | 
FTDI_SET_FLOW_CTRL
:

278 
Devi˚OutVíd‹
 | 
FTDI_SET_BAUD
: {

279 c⁄° 
subdivis‹s8
[8] = { 0, 4, 2, 1, 3, 5, 6, 7 };

280 
subdivis‹8
 = 
subdivis‹s8
[((
vÆue
 & 0xc000) >> 14)

281 | ((
ödex
 & 1) << 2)];

282 
divis‹
 = 
vÆue
 & 0x3fff;

285 i‡(
divis‹
 =1 && 
subdivis‹8
 == 0)

286 
subdivis‹8
 = 4;

287 i‡(
divis‹
 =0 && 
subdivis‹8
 == 0)

288 
divis‹
 = 1;

290 
s
->
∑øms
.
•ìd
 = (48000000 / 2Ë/ (8 * 
divis‹
 + 
subdivis‹8
);

291 
	`qemu_chr_„_io˘l
(
s
->
cs
, 
CHR_IOCTL_SERIAL_SET_PARAMS
, &s->
∑øms
);

294 
Devi˚OutVíd‹
 | 
FTDI_SET_DATA
:

295 
vÆue
 & 
FTDI_PARITY
) {

297 
s
->
∑øms
.
∑rôy
 = 'N';

299 
FTDI_ODD
:

300 
s
->
∑øms
.
∑rôy
 = 'O';

302 
FTDI_EVEN
:

303 
s
->
∑øms
.
∑rôy
 = 'E';

306 
	`DPRINTF
("unsuµ‹ãdÖ¨ôy %d\n", 
vÆue
 & 
FTDI_PARITY
);

307 
Áû
;

309 
vÆue
 & 
FTDI_STOP
) {

310 
FTDI_STOP1
:

311 
s
->
∑øms
.
°›_bôs
 = 1;

313 
FTDI_STOP2
:

314 
s
->
∑øms
.
°›_bôs
 = 2;

317 
	`DPRINTF
("unsuµ‹ãd st› bô†%d\n", 
vÆue
 & 
FTDI_STOP
);

318 
Áû
;

320 
	`qemu_chr_„_io˘l
(
s
->
cs
, 
CHR_IOCTL_SERIAL_SET_PARAMS
, &s->
∑øms
);

323 
Devi˚InVíd‹
 | 
FTDI_GET_MDM_ST
:

324 
d©a
[0] = 
	`usb_gë_modem_löes
(
s
) | 1;

325 
d©a
[1] = 0;

326 
ªt
 = 2;

328 
Devi˚OutVíd‹
 | 
FTDI_SET_EVENT_CHR
:

330 
s
->
evít_chr
 = 
vÆue
;

332 
Devi˚OutVíd‹
 | 
FTDI_SET_ERROR_CHR
:

334 
s
->
îr‹_chr
 = 
vÆue
;

336 
Devi˚OutVíd‹
 | 
FTDI_SET_LATENCY
:

337 
s
->
œãncy
 = 
vÆue
;

339 
Devi˚InVíd‹
 | 
FTDI_GET_LATENCY
:

340 
d©a
[0] = 
s
->
œãncy
;

341 
ªt
 = 1;

344 
Áû
:

345 
	`DPRINTF
("gŸ unsuµ‹ãd/bogu†c⁄åﬁ %x, vÆuê%x\n", 
ªque°
, 
vÆue
);

346 
ªt
 = 
USB_RET_STALL
;

349  
ªt
;

350 
	}
}

352 
	$usb_£rül_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

354 
USBSîülSèã
 *
s
 = (USBSîülSèã *)
dev
;

355 
i
, 
ªt
 = 0;

356 
uöt8_t
 
devï
 = 
p
->
ï
->
ƒ
;

357 
iovec
 *
iov
;

358 
uöt8_t
 
hódî
[2];

359 
fú°_Àn
, 
Àn
;

361 
p
->
pid
) {

362 
USB_TOKEN_OUT
:

363 i‡(
devï
 != 2)

364 
Áû
;

365 
i
 = 0; i < 
p
->
iov
.
niov
; i++) {

366 
iov
 = 
p
->iov.iov + 
i
;

367 
	`qemu_chr_„_wrôe
(
s
->
cs
, 
iov
->
iov_ba£
, iov->
iov_Àn
);

371 
USB_TOKEN_IN
:

372 i‡(
devï
 != 1)

373 
Áû
;

374 
fú°_Àn
 = 
RECV_BUF
 - 
s
->
ªcv_±r
;

375 
Àn
 = 
p
->
iov
.
size
;

376 i‡(
Àn
 <= 2) {

377 
ªt
 = 
USB_RET_NAK
;

380 
hódî
[0] = 
	`usb_gë_modem_löes
(
s
) | 1;

383 i‡(
s
->
evít_åiggî
 && s->evít_åiggî & 
FTDI_BI
) {

384 
s
->
evít_åiggî
 &~
FTDI_BI
;

385 
hódî
[1] = 
FTDI_BI
;

386 
	`usb_∑ckë_c›y
(
p
, 
hódî
, 2);

387 
ªt
 = 2;

390 
hódî
[1] = 0;

392 
Àn
 -= 2;

393 i‡(
Àn
 > 
s
->
ªcv_u£d
)

394 
Àn
 = 
s
->
ªcv_u£d
;

395 i‡(!
Àn
) {

396 
ªt
 = 
USB_RET_NAK
;

399 i‡(
fú°_Àn
 > 
Àn
)

400 
fú°_Àn
 = 
Àn
;

401 
	`usb_∑ckë_c›y
(
p
, 
hódî
, 2);

402 
	`usb_∑ckë_c›y
(
p
, 
s
->
ªcv_buf
 + s->
ªcv_±r
, 
fú°_Àn
);

403 i‡(
Àn
 > 
fú°_Àn
)

404 
	`usb_∑ckë_c›y
(
p
, 
s
->
ªcv_buf
, 
Àn
 - 
fú°_Àn
);

405 
s
->
ªcv_u£d
 -
Àn
;

406 
s
->
ªcv_±r
 = (s->ªcv_±∏+ 
Àn
Ë% 
RECV_BUF
;

407 
ªt
 = 
Àn
 + 2;

411 
	`DPRINTF
("BadÅoken\n");

412 
Áû
:

413 
ªt
 = 
USB_RET_STALL
;

417  
ªt
;

418 
	}
}

420 
	$usb_£rül_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

422 
USBSîülSèã
 *
s
 = (USBSîülSèã *)
dev
;

424 
	`qemu_chr_dñëe
(
s
->
cs
);

425 
	}
}

427 
	$usb_£rül_ˇn_ªad
(*
›aque
)

429 
USBSîülSèã
 *
s
 = 
›aque
;

430  
RECV_BUF
 - 
s
->
ªcv_u£d
;

431 
	}
}

433 
	$usb_£rül_ªad
(*
›aque
, c⁄° 
uöt8_t
 *
buf
, 
size
)

435 
USBSîülSèã
 *
s
 = 
›aque
;

436 
fú°_size
, 
°¨t
;

439 i‡(
size
 > (
RECV_BUF
 - 
s
->
ªcv_u£d
))

440 
size
 = 
RECV_BUF
 - 
s
->
ªcv_u£d
;

442 
°¨t
 = 
s
->
ªcv_±r
 + s->
ªcv_u£d
;

443 i‡(
°¨t
 < 
RECV_BUF
) {

445 
fú°_size
 = 
RECV_BUF
 - 
°¨t
;

446 i‡(
fú°_size
 > 
size
)

447 
fú°_size
 = 
size
;

449 
	`mem˝y
(
s
->
ªcv_buf
 + 
°¨t
, 
buf
, 
fú°_size
);

452 i‡(
size
 > 
fú°_size
)

453 
	`mem˝y
(
s
->
ªcv_buf
, 
buf
 + 
fú°_size
, 
size
 - first_size);

455 
°¨t
 -
RECV_BUF
;

456 
	`mem˝y
(
s
->
ªcv_buf
 + 
°¨t
, 
buf
, 
size
);

458 
s
->
ªcv_u£d
 +
size
;

459 
	}
}

461 
	$usb_£rül_evít
(*
›aque
, 
evít
)

463 
USBSîülSèã
 *
s
 = 
›aque
;

465 
evít
) {

466 
CHR_EVENT_BREAK
:

467 
s
->
evít_åiggî
 |
FTDI_BI
;

469 
CHR_EVENT_FOCUS
:

471 
CHR_EVENT_OPENED
:

472 
	`usb_£rül_ª£t
(
s
);

476 
	}
}

478 
	$usb_£rül_öô‚
(
USBDevi˚
 *
dev
)

480 
USBSîülSèã
 *
s
 = 
	`DO_UPCAST
(USBSîülSèã, 
dev
, dev);

482 
	`usb_desc_¸óã_£rül
(
dev
);

483 
	`usb_desc_öô
(
dev
);

485 i‡(!
s
->
cs
) {

486 
	`îr‹_ªp‹t
("Property chardev isÑequired");

490 
	`qemu_chr_add_h™dÀrs
(
s
->
cs
, 
usb_£rül_ˇn_ªad
, 
usb_£rül_ªad
,

491 
usb_£rül_evít
, 
s
);

492 
	`usb_£rül_h™dÀ_ª£t
(
dev
);

494 
	}
}

496 
USBDevi˚
 *
	$usb_£rül_öô
(
USBBus
 *
bus
, c⁄° *
fûíame
)

498 
USBDevi˚
 *
dev
;

499 
Ch¨DrivîSèã
 *
cdrv
;

500 
uöt32_t
 
víd‹id
 = 0, 
¥odu˘id
 = 0;

501 
œbñ
[32];

502 
ödex
;

504 *
fûíame
 && *filename != ':') {

505 c⁄° *
p
;

506 *
e
;

507 i‡(
	`°r°¨t
(
fûíame
, "víd‹id=", &
p
)) {

508 
víd‹id
 = 
	`°πﬁ
(
p
, &
e
, 16);

509 i‡(
e
 =
p
 || (*e && *e != ',' && *e != ':')) {

510 
	`îr‹_ªp‹t
("bogu†víd‹ ID %s", 
p
);

511  
NULL
;

513 
fûíame
 = 
e
;

514 } i‡(
	`°r°¨t
(
fûíame
, "¥odu˘id=", &
p
)) {

515 
¥odu˘id
 = 
	`°πﬁ
(
p
, &
e
, 16);

516 i‡(
e
 =
p
 || (*e && *e != ',' && *e != ':')) {

517 
	`îr‹_ªp‹t
("bogu†¥odu˘ ID %s", 
p
);

518  
NULL
;

520 
fûíame
 = 
e
;

522 
	`îr‹_ªp‹t
("uƒecognized sîü»USB o±i⁄ %s", 
fûíame
);

523  
NULL
;

525 *
fûíame
 == ',')

526 
fûíame
++;

528 i‡(!*
fûíame
) {

529 
	`îr‹_ªp‹t
("character device specificationÇeeded");

530  
NULL
;

532 
fûíame
++;

534 
	`¢¥ötf
(
œbñ
, ÷abñ), "usb£rül%d", 
ödex
++);

535 
cdrv
 = 
	`qemu_chr_√w
(
œbñ
, 
fûíame
, 
NULL
);

536 i‡(!
cdrv
)

537  
NULL
;

539 
dev
 = 
	`usb_¸óã
(
bus
, "usb-serial");

540 i‡(!
dev
) {

541  
NULL
;

543 
	`qdev_¥›_£t_chr
(&
dev
->
qdev
, "ch¨dev", 
cdrv
);

544 i‡(
víd‹id
)

545 
	`qdev_¥›_£t_uöt16
(&
dev
->
qdev
, "víd‹id", 
víd‹id
);

546 i‡(
¥odu˘id
)

547 
	`qdev_¥›_£t_uöt16
(&
dev
->
qdev
, "¥odu˘id", 
¥odu˘id
);

548 
	`qdev_öô_noÁû
(&
dev
->
qdev
);

550  
dev
;

551 
	}
}

553 
USBDevi˚
 *
	$usb_bøûÀ_öô
(
USBBus
 *
bus
, c⁄° *
unu£d
)

555 
USBDevi˚
 *
dev
;

556 
Ch¨DrivîSèã
 *
cdrv
;

558 
cdrv
 = 
	`qemu_chr_√w
("bøûÀ", "bøûÀ", 
NULL
);

559 i‡(!
cdrv
)

560  
NULL
;

562 
dev
 = 
	`usb_¸óã
(
bus
, "usb-braille");

563 
	`qdev_¥›_£t_chr
(&
dev
->
qdev
, "ch¨dev", 
cdrv
);

564 
	`qdev_öô_noÁû
(&
dev
->
qdev
);

566  
dev
;

567 
	}
}

569 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_£rül
 = {

570 .
«me
 = "usb-serial",

571 .
	gunmigøèbÀ
 = 1,

574 
Pr›îty
 
	g£rül_¥›îtõs
[] = {

575 
DEFINE_PROP_CHR
("ch¨dev", 
USBSîülSèã
, 
cs
),

576 
DEFINE_PROP_END_OF_LIST
(),

579 
	$usb_£rül_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

581 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

582 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

584 
uc
->
öô
 = 
usb_£rül_öô‚
;

585 
uc
->
¥odu˘_desc
 = "QEMU USB Serial";

586 
uc
->
usb_desc
 = &
desc_£rül
;

587 
uc
->
h™dÀ_ª£t
 = 
usb_£rül_h™dÀ_ª£t
;

588 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_£rül_h™dÀ_c⁄åﬁ
;

589 
uc
->
h™dÀ_d©a
 = 
usb_£rül_h™dÀ_d©a
;

590 
uc
->
h™dÀ_de°roy
 = 
usb_£rül_h™dÀ_de°roy
;

591 
dc
->
vmsd
 = &
vm°©e_usb_£rül
;

592 
dc
->
¥›s
 = 
£rül_¥›îtõs
;

593 
	}
}

595 
Ty≥Info
 
	g£rül_öfo
 = {

596 .
«me
 = "usb-serial",

597 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

598 .
	gö°™˚_size
 = (
USBSîülSèã
),

599 .
	g˛ass_öô
 = 
usb_£rül_˛ass_öô‚
,

602 
Pr›îty
 
	gbøûÀ_¥›îtõs
[] = {

603 
DEFINE_PROP_CHR
("ch¨dev", 
USBSîülSèã
, 
cs
),

604 
DEFINE_PROP_END_OF_LIST
(),

607 
	$usb_bøûÀ_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

609 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

610 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

612 
uc
->
öô
 = 
usb_£rül_öô‚
;

613 
uc
->
¥odu˘_desc
 = "QEMU USB Braille";

614 
uc
->
usb_desc
 = &
desc_bøûÀ
;

615 
uc
->
h™dÀ_ª£t
 = 
usb_£rül_h™dÀ_ª£t
;

616 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_£rül_h™dÀ_c⁄åﬁ
;

617 
uc
->
h™dÀ_d©a
 = 
usb_£rül_h™dÀ_d©a
;

618 
uc
->
h™dÀ_de°roy
 = 
usb_£rül_h™dÀ_de°roy
;

619 
dc
->
vmsd
 = &
vm°©e_usb_£rül
;

620 
dc
->
¥›s
 = 
bøûÀ_¥›îtõs
;

621 
	}
}

623 
Ty≥Info
 
	gbøûÀ_öfo
 = {

624 .
«me
 = "usb-braille",

625 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

626 .
	gö°™˚_size
 = (
USBSîülSèã
),

627 .
	g˛ass_öô
 = 
usb_bøûÀ_˛ass_öô‚
,

630 
	$usb_£rül_ªgi°î_ty≥s
()

632 
	`ty≥_ªgi°î_°©ic
(&
£rül_öfo
);

633 
	`usb_Àgacy_ªgi°î
("usb-£rül", "£rül", 
usb_£rül_öô
);

634 
	`ty≥_ªgi°î_°©ic
(&
bøûÀ_öfo
);

635 
	`usb_Àgacy_ªgi°î
("usb-bøûÀ", "bøûÀ", 
usb_bøûÀ_öô
);

636 
	}
}

638 
ty≥_öô
(
usb_£rül_ªgi°î_ty≥s
)

	@dev-smartcard-reader.c

37 
	~"qemu-comm⁄.h
"

38 
	~"qemu-îr‹.h
"

39 
	~"hw/usb.h
"

40 
	~"hw/usb/desc.h
"

41 
	~"m⁄ô‹.h
"

43 
	~"hw/ccid.h
"

45 
	#DPRINTF
(
s
, 
lvl
, 
fmt
, ...) \

47 i‡(
lvl
 <
s
->
debug
) { \

48 
	`¥ötf
("usb-ccid: " 
fmt
 , ## 
__VA_ARGS__
); \

50 } 0)

	)

52 
	#D_WARN
 1

	)

53 
	#D_INFO
 2

	)

54 
	#D_MORE_INFO
 3

	)

55 
	#D_VERBOSE
 4

	)

57 
	#CCID_DEV_NAME
 "usb-ccid"

	)

65 
	#BULK_OUT_DATA_SIZE
 65536

	)

66 
	#PENDING_ANSWERS_NUM
 128

	)

68 
	#BULK_IN_BUF_SIZE
 384

	)

69 
	#BULK_IN_PENDING_NUM
 8

	)

71 
	#I¡îÁ˚OutCœss
 \

72 ((
USB_DIR_OUT
 | 
USB_TYPE_CLASS
 | 
USB_RECIP_INTERFACE
)<<8)

	)

74 
	#I¡îÁ˚InCœss
 \

75 ((
USB_DIR_IN
 | 
USB_TYPE_CLASS
 | 
USB_RECIP_INTERFACE
)<<8)

	)

77 
	#CCID_MAX_PACKET_SIZE
 64

	)

79 
	#CCID_CONTROL_ABORT
 0x1

	)

80 
	#CCID_CONTROL_GET_CLOCK_FREQUENCIES
 0x2

	)

81 
	#CCID_CONTROL_GET_DATA_RATES
 0x3

	)

83 
	#CCID_PRODUCT_DESCRIPTION
 "QEMU USB CCID"

	)

84 
	#CCID_VENDOR_DESCRIPTION
 "QEMU"

	)

85 
	#CCID_INTERFACE_NAME
 "CCID I¡îÁ˚"

	)

86 
	#CCID_SERIAL_NUMBER_STRING
 "1"

	)

94 
	#CCID_VENDOR_ID
 0x08e6

	)

95 
	#CCID_PRODUCT_ID
 0x4433

	)

96 
	#CCID_DEVICE_VERSION
 0x0000

	)

102 
	#CCID_MESSAGE_TYPE_PC_to_RDR_IccPowîOn
 0x62

	)

103 
	#CCID_MESSAGE_TYPE_PC_to_RDR_IccPowîOff
 0x63

	)

104 
	#CCID_MESSAGE_TYPE_PC_to_RDR_GëSlŸSètus
 0x65

	)

105 
	#CCID_MESSAGE_TYPE_PC_to_RDR_X‰Block
 0x6f

	)

106 
	#CCID_MESSAGE_TYPE_PC_to_RDR_GëP¨amëîs
 0x6c

	)

107 
	#CCID_MESSAGE_TYPE_PC_to_RDR_Re£tP¨amëîs
 0x6d

	)

108 
	#CCID_MESSAGE_TYPE_PC_to_RDR_SëP¨amëîs
 0x61

	)

109 
	#CCID_MESSAGE_TYPE_PC_to_RDR_Esˇ≥
 0x6b

	)

110 
	#CCID_MESSAGE_TYPE_PC_to_RDR_IccClock
 0x6e

	)

111 
	#CCID_MESSAGE_TYPE_PC_to_RDR_T0APDU
 0x6a

	)

112 
	#CCID_MESSAGE_TYPE_PC_to_RDR_Secuª
 0x69

	)

113 
	#CCID_MESSAGE_TYPE_PC_to_RDR_Mech™iˇl
 0x71

	)

114 
	#CCID_MESSAGE_TYPE_PC_to_RDR_Ab‹t
 0x72

	)

115 
	#CCID_MESSAGE_TYPE_PC_to_RDR_SëD©aR©eAndClockFªquícy
 0x73

	)

121 
	#CCID_MESSAGE_TYPE_RDR_to_PC_D©aBlock
 0x80

	)

122 
	#CCID_MESSAGE_TYPE_RDR_to_PC_SlŸSètus
 0x81

	)

123 
	#CCID_MESSAGE_TYPE_RDR_to_PC_P¨amëîs
 0x82

	)

124 
	#CCID_MESSAGE_TYPE_RDR_to_PC_Esˇ≥
 0x83

	)

125 
	#CCID_MESSAGE_TYPE_RDR_to_PC_D©aR©eAndClockFªquícy
 0x84

	)

131 
	#CCID_MESSAGE_TYPE_RDR_to_PC_NŸifySlŸCh™ge
 0x50

	)

132 
	#CCID_MESSAGE_TYPE_RDR_to_PC_H¨dw¨eEº‹
 0x51

	)

140 
	#CCID_INT_IN_EP
 1

	)

141 
	#CCID_BULK_IN_EP
 2

	)

142 
	#CCID_BULK_OUT_EP
 3

	)

145 
	#SLOT_0_STATE_MASK
 1

	)

146 
	#SLOT_0_CHANGED_MASK
 2

	)

150 
	mICC_STATUS_PRESENT_ACTIVE
 = 0,

151 
	mICC_STATUS_PRESENT_INACTIVE
,

152 
	mICC_STATUS_NOT_PRESENT


156 
	mCOMMAND_STATUS_NO_ERROR
 = 0,

157 
	mCOMMAND_STATUS_FAILED
,

158 
	mCOMMAND_STATUS_TIME_EXTENSION_REQUIRED


163 
	mERROR_CMD_NOT_SUPPORTED
 = 0,

164 
	mERROR_CMD_ABORTED
 = -1,

165 
	mERROR_ICC_MUTE
 = -2,

166 
	mERROR_XFR_PARITY_ERROR
 = -3,

167 
	mERROR_XFR_OVERRUN
 = -4,

168 
	mERROR_HW_ERROR
 = -5,

173 
	mCLOCK_STATUS_RUNNING
 = 0,

180 
QEMU_PACKED
 
	tCCID_Hódî
 {

181 
uöt8_t
 
	gbMesßgeTy≥
;

182 
uöt32_t
 
	gdwLígth
;

183 
uöt8_t
 
	gbSlŸ
;

184 
uöt8_t
 
	gbSeq
;

185 } 
	tCCID_Hódî
;

187 
QEMU_PACKED
 
	tCCID_BULK_IN
 {

188 
CCID_Hódî
 
	ghdr
;

189 
uöt8_t
 
	gbSètus
;

190 
uöt8_t
 
	gbEº‹
;

191 } 
	tCCID_BULK_IN
;

193 
QEMU_PACKED
 
	tCCID_SlŸSètus
 {

194 
CCID_BULK_IN
 
	gb
;

195 
uöt8_t
 
	gbClockSètus
;

196 } 
	tCCID_SlŸSètus
;

198 
QEMU_PACKED
 
	tCCID_P¨amëî
 {

199 
CCID_BULK_IN
 
	gb
;

200 
uöt8_t
 
	gbPrŸocﬁNum
;

201 
uöt8_t
 
	gabPrŸocﬁD©aSåu˘uª
[0];

202 } 
	tCCID_P¨amëî
;

204 
QEMU_PACKED
 
	tCCID_D©aBlock
 {

205 
CCID_BULK_IN
 
	gb
;

206 
uöt8_t
 
	gbChaöP¨amëî
;

207 
uöt8_t
 
	gabD©a
[0];

208 } 
	tCCID_D©aBlock
;

211 
QEMU_PACKED
 
	tCCID_X„rBlock
 {

212 
CCID_Hódî
 
	ghdr
;

213 
uöt8_t
 
	gbBWI
;

214 
uöt16_t
 
	gwLevñP¨amëî
;

215 
uöt8_t
 
	gabD©a
[0];

216 } 
	tCCID_X„rBlock
;

218 
QEMU_PACKED
 
	tCCID_IccPowîOn
 {

219 
CCID_Hódî
 
	ghdr
;

220 
uöt8_t
 
	gbPowîSñe˘
;

221 
uöt16_t
 
	gabRFU
;

222 } 
	tCCID_IccPowîOn
;

224 
QEMU_PACKED
 
	tCCID_IccPowîOff
 {

225 
CCID_Hódî
 
	ghdr
;

226 
uöt16_t
 
	gabRFU
;

227 } 
	tCCID_IccPowîOff
;

229 
QEMU_PACKED
 
	tCCID_SëP¨amëîs
 {

230 
CCID_Hódî
 
	ghdr
;

231 
uöt8_t
 
	gbPrŸocﬁNum
;

232 
uöt16_t
 
	gabRFU
;

233 
uöt8_t
 
	gabPrŸocﬁD©aSåu˘uª
[0];

234 } 
	tCCID_SëP¨amëîs
;

236 
	sCCID_NŸify_SlŸ_Ch™ge
 {

237 
uöt8_t
 
	mbMesßgeTy≥
;

238 
uöt8_t
 
	mbmSlŸICCSèã
;

239 } 
	tCCID_NŸify_SlŸ_Ch™ge
;

242 
	sAnswî
 {

243 
uöt8_t
 
	m¶Ÿ
;

244 
uöt8_t
 
	m£q
;

245 } 
	tAnswî
;

248 
	sBulkIn
 {

249 
uöt8_t
 
	md©a
[
BULK_IN_BUF_SIZE
];

250 
uöt32_t
 
	mÀn
;

251 
uöt32_t
 
	mpos
;

252 } 
	tBulkIn
;

255 
	mMIGRATION_NONE
,

256 
	mMIGRATION_MIGRATED
,

259 
	sCCIDBus
 {

260 
BusSèã
 
	mqbus
;

261 } 
	tCCIDBus
;

263 
	#MAX_PROTOCOL_SIZE
 7

	)

268 
	sUSBCCIDSèã
 {

269 
USBDevi˚
 
	mdev
;

270 
USBEndpoöt
 *
	möå
;

271 
CCIDBus
 
	mbus
;

272 
CCIDC¨dSèã
 *
	mˇrd
;

273 
BulkIn
 
	mbulk_ö_≥ndög
[
BULK_IN_PENDING_NUM
];

274 
uöt32_t
 
	mbulk_ö_≥ndög_°¨t
;

275 
uöt32_t
 
	mbulk_ö_≥ndög_íd
;

276 
uöt32_t
 
	mbulk_ö_≥ndög_num
;

277 
BulkIn
 *
	mcuºít_bulk_ö
;

278 
uöt8_t
 
	mbulk_out_d©a
[
BULK_OUT_DATA_SIZE
];

279 
uöt32_t
 
	mbulk_out_pos
;

280 
uöt64_t
 
	mœ°_™swî_îr‹
;

281 
Answî
 
	m≥ndög_™swîs
[
PENDING_ANSWERS_NUM
];

282 
uöt32_t
 
	m≥ndög_™swîs_°¨t
;

283 
uöt32_t
 
	m≥ndög_™swîs_íd
;

284 
uöt32_t
 
	m≥ndög_™swîs_num
;

285 
uöt8_t
 
	mbEº‹
;

286 
uöt8_t
 
	mbmComm™dSètus
;

287 
uöt8_t
 
	mbPrŸocﬁNum
;

288 
uöt8_t
 
	mabPrŸocﬁD©aSåu˘uª
[
MAX_PROTOCOL_SIZE
];

289 
uöt32_t
 
	mulPrŸocﬁD©aSåu˘uªSize
;

290 
uöt32_t
 
	m°©e_vm°©e
;

291 
uöt32_t
 
	mmigøti⁄_èrgë_ù
;

292 
uöt16_t
 
	mmigøti⁄_èrgë_p‹t
;

293 
uöt8_t
 
	mmigøti⁄_°©e
;

294 
uöt8_t
 
	mbmSlŸICCSèã
;

295 
uöt8_t
 
	mpowîed
;

296 
uöt8_t
 
	mnŸify_¶Ÿ_ch™ge
;

297 
uöt8_t
 
	mdebug
;

298 } 
	tUSBCCIDSèã
;

310 c⁄° 
uöt8_t
 
	gqemu_ccid_des¸ùt‹
[] = {

397 
	mSTR_MANUFACTURER
 = 1,

398 
	mSTR_PRODUCT
,

399 
	mSTR_SERIALNUMBER
,

400 
	mSTR_INTERFACE
,

403 c⁄° 
USBDescSåögs
 
	gdesc_°rögs
 = {

404 [
STR_MANUFACTURER
] = "QEMU",

405 [
STR_PRODUCT
] = "QEMU USB CCID",

406 [
STR_SERIALNUMBER
] = "1",

407 [
STR_INTERFACE
] = "CCID Interface",

410 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚0
 = {

411 .
bI¡îÁ˚Numbî
 = 0,

412 .
	gbNumEndpoöts
 = 3,

413 .
	gbI¡îÁ˚Cœss
 = 0x0b,

414 .
	gbI¡îÁ˚SubCœss
 = 0x00,

415 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x00,

416 .
	giI¡îÁ˚
 = 
STR_INTERFACE
,

417 .
	gndesc
 = 1,

418 .
	gdescs
 = (
USBDescOthî
[]) {

421 .
d©a
 = 
qemu_ccid_des¸ùt‹
,

424 .
	gïs
 = (
USBDescEndpoöt
[]) {

426 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 
CCID_INT_IN_EP
,

427 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_INT
,

428 .
	gbI¡îvÆ
 = 255,

429 .
	gwMaxPackëSize
 = 64,

431 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
CCID_BULK_IN_EP
,

432 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

433 .
	gwMaxPackëSize
 = 64,

435 .
	gbEndpoötAddªss
 = 
USB_DIR_OUT
 | 
CCID_BULK_OUT_EP
,

436 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

437 .
	gwMaxPackëSize
 = 64,

442 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚
 = {

443 .
bcdUSB
 = 0x0110,

444 .
	gbMaxPackëSize0
 = 64,

445 .
	gbNumC⁄figuøti⁄s
 = 1,

446 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

448 .
bNumI¡îÁ˚s
 = 1,

449 .
	gbC⁄figuøti⁄VÆue
 = 1,

450 .
	gbmAâribuãs
 = 0xe0,

451 .
	gbMaxPowî
 = 50,

452 .
	gnif
 = 1,

453 .
	gifs
 = &
desc_iÁ˚0
,

458 c⁄° 
USBDesc
 
	gdesc_ccid
 = {

459 .
id
 = {

460 .
idVíd‹
 = 
CCID_VENDOR_ID
,

461 .
	gidProdu˘
 = 
CCID_PRODUCT_ID
,

462 .
	gbcdDevi˚
 = 
CCID_DEVICE_VERSION
,

463 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

464 .
	giProdu˘
 = 
STR_PRODUCT
,

465 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

467 .
	gfuŒ
 = &
desc_devi˚
,

468 .
	g°r
 = 
desc_°rögs
,

471 c⁄° 
uöt8_t
 *
	$ccid_ˇrd_gë_©r
(
CCIDC¨dSèã
 *
ˇrd
, 
uöt32_t
 *
Àn
)

473 
CCIDC¨dCœss
 *
cc
 = 
	`CCID_CARD_GET_CLASS
(
ˇrd
);

474 i‡(
cc
->
gë_©r
) {

475  
cc
->
	`gë_©r
(
ˇrd
, 
Àn
);

477  
NULL
;

478 
	}
}

480 
	$ccid_ˇrd_≠du_‰om_gue°
(
CCIDC¨dSèã
 *
ˇrd
,

481 c⁄° 
uöt8_t
 *
≠du
,

482 
uöt32_t
 
Àn
)

484 
CCIDC¨dCœss
 *
cc
 = 
	`CCID_CARD_GET_CLASS
(
ˇrd
);

485 i‡(
cc
->
≠du_‰om_gue°
) {

486 
cc
->
	`≠du_‰om_gue°
(
ˇrd
, 
≠du
, 
Àn
);

488 
	}
}

490 
	$ccid_ˇrd_exô‚
(
CCIDC¨dSèã
 *
ˇrd
)

492 
CCIDC¨dCœss
 *
cc
 = 
	`CCID_CARD_GET_CLASS
(
ˇrd
);

493 i‡(
cc
->
exô‚
) {

494  
cc
->
	`exô‚
(
ˇrd
);

497 
	}
}

499 
	$ccid_ˇrd_öô‚
(
CCIDC¨dSèã
 *
ˇrd
)

501 
CCIDC¨dCœss
 *
cc
 = 
	`CCID_CARD_GET_CLASS
(
ˇrd
);

502 i‡(
cc
->
öô‚
) {

503  
cc
->
	`öô‚
(
ˇrd
);

506 
	}
}

508 
boﬁ
 
	$ccid_has_≥ndög_™swîs
(
USBCCIDSèã
 *
s
)

510  
s
->
≥ndög_™swîs_num
 > 0;

511 
	}
}

513 
	$ccid_˛ór_≥ndög_™swîs
(
USBCCIDSèã
 *
s
)

515 
s
->
≥ndög_™swîs_num
 = 0;

516 
s
->
≥ndög_™swîs_°¨t
 = 0;

517 
s
->
≥ndög_™swîs_íd
 = 0;

518 
	}
}

520 
	$ccid_¥öt_≥ndög_™swîs
(
USBCCIDSèã
 *
s
)

522 
Answî
 *
™swî
;

523 
i
, 
cou¡
;

525 
	`DPRINTF
(
s
, 
D_VERBOSE
, "usb-ccid:Öendingánswers:");

526 i‡(!
	`ccid_has_≥ndög_™swîs
(
s
)) {

527 
	`DPRINTF
(
s
, 
D_VERBOSE
, "Émpty\n");

530 
i
 = 
s
->
≥ndög_™swîs_°¨t
, 
cou¡
 = s->
≥ndög_™swîs_num
 ;

531 
cou¡
 > 0; cou¡--, 
i
++) {

532 
™swî
 = &
s
->
≥ndög_™swîs
[
i
 % 
PENDING_ANSWERS_NUM
];

533 i‡(
cou¡
 == 1) {

534 
	`DPRINTF
(
s
, 
D_VERBOSE
, "%d:%d\n", 
™swî
->
¶Ÿ
,ánswî->
£q
);

536 
	`DPRINTF
(
s
, 
D_VERBOSE
, "%d:%d,", 
™swî
->
¶Ÿ
,ánswî->
£q
);

539 
	}
}

541 
	$ccid_add_≥ndög_™swî
(
USBCCIDSèã
 *
s
, 
CCID_Hódî
 *
hdr
)

543 
Answî
 *
™swî
;

545 
	`as£π
(
s
->
≥ndög_™swîs_num
 < 
PENDING_ANSWERS_NUM
);

546 
s
->
≥ndög_™swîs_num
++;

547 
™swî
 =

548 &
s
->
≥ndög_™swîs
[(s->
≥ndög_™swîs_íd
++Ë% 
PENDING_ANSWERS_NUM
];

549 
™swî
->
¶Ÿ
 = 
hdr
->
bSlŸ
;

550 
™swî
->
£q
 = 
hdr
->
bSeq
;

551 
	`ccid_¥öt_≥ndög_™swîs
(
s
);

552 
	}
}

554 
	$ccid_ªmove_≥ndög_™swî
(
USBCCIDSèã
 *
s
,

555 
uöt8_t
 *
¶Ÿ
, uöt8_à*
£q
)

557 
Answî
 *
™swî
;

559 
	`as£π
(
s
->
≥ndög_™swîs_num
 > 0);

560 
s
->
≥ndög_™swîs_num
--;

561 
™swî
 =

562 &
s
->
≥ndög_™swîs
[(s->
≥ndög_™swîs_°¨t
++Ë% 
PENDING_ANSWERS_NUM
];

563 *
¶Ÿ
 = 
™swî
->slot;

564 *
£q
 = 
™swî
->seq;

565 
	`ccid_¥öt_≥ndög_™swîs
(
s
);

566 
	}
}

568 
	$ccid_bulk_ö_˛ór
(
USBCCIDSèã
 *
s
)

570 
s
->
bulk_ö_≥ndög_°¨t
 = 0;

571 
s
->
bulk_ö_≥ndög_íd
 = 0;

572 
s
->
bulk_ö_≥ndög_num
 = 0;

573 
	}
}

575 
	$ccid_bulk_ö_ªÀa£
(
USBCCIDSèã
 *
s
)

577 
	`as£π
(
s
->
cuºít_bulk_ö
 !
NULL
);

578 
s
->
cuºít_bulk_ö
->
pos
 = 0;

579 
s
->
cuºít_bulk_ö
 = 
NULL
;

580 
	}
}

582 
	$ccid_bulk_ö_gë
(
USBCCIDSèã
 *
s
)

584 i‡(
s
->
cuºít_bulk_ö
 !
NULL
 || s->
bulk_ö_≥ndög_num
 == 0) {

587 
	`as£π
(
s
->
bulk_ö_≥ndög_num
 > 0);

588 
s
->
bulk_ö_≥ndög_num
--;

589 
s
->
cuºít_bulk_ö
 =

590 &
s
->
bulk_ö_≥ndög
[(s->
bulk_ö_≥ndög_°¨t
++Ë% 
BULK_IN_PENDING_NUM
];

591 
	}
}

593 *
	$ccid_ª£rve_ªcv_buf
(
USBCCIDSèã
 *
s
, 
uöt16_t
 
Àn
)

595 
BulkIn
 *
bulk_ö
;

597 
	`DPRINTF
(
s
, 
D_VERBOSE
, "%s: QUEUE:Ñe£rvê%d byãs\n", 
__func__
, 
Àn
);

600 i‡(
Àn
 > 
BULK_IN_BUF_SIZE
) {

601 
	`DPRINTF
(
s
, 
D_WARN
, "usb-ccid.c: %s:ÜenÜargerÅhen max (%d>%d). "

603 
__func__
, 
Àn
, 
BULK_IN_BUF_SIZE
);

604  
NULL
;

606 i‡(
s
->
bulk_ö_≥ndög_num
 >
BULK_IN_PENDING_NUM
) {

607 
	`DPRINTF
(
s
, 
D_WARN
, "usb-ccid.c: %s: No free bulk_in buffers. "

608 "disˇrdög mesßge.\n", 
__func__
);

609  
NULL
;

611 
bulk_ö
 =

612 &
s
->
bulk_ö_≥ndög
[(s->
bulk_ö_≥ndög_íd
++Ë% 
BULK_IN_PENDING_NUM
];

613 
s
->
bulk_ö_≥ndög_num
++;

614 
bulk_ö
->
Àn
 =Üen;

615  
bulk_ö
->
d©a
;

616 
	}
}

618 
	$ccid_ª£t
(
USBCCIDSèã
 *
s
)

620 
	`ccid_bulk_ö_˛ór
(
s
);

621 
	`ccid_˛ór_≥ndög_™swîs
(
s
);

622 
	}
}

624 
	$ccid_dëach
(
USBCCIDSèã
 *
s
)

626 
	`ccid_ª£t
(
s
);

627 
	}
}

629 
	$ccid_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

631 
USBCCIDSèã
 *
s
 = 
	`DO_UPCAST
(USBCCIDSèã, 
dev
, dev);

633 
	`DPRINTF
(
s
, 1, "Reset\n");

635 
	`ccid_ª£t
(
s
);

636 
	}
}

638 
	$ccid_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
, 
ªque°
,

639 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

641 
USBCCIDSèã
 *
s
 = 
	`DO_UPCAST
(USBCCIDSèã, 
dev
, dev);

642 
ªt
 = 0;

644 
	`DPRINTF
(
s
, 1, "gŸ c⁄åﬁ %x, vÆuê%x\n", 
ªque°
, 
vÆue
);

645 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

646 i‡(
ªt
 >= 0) {

647  
ªt
;

650 
ªque°
) {

652 
I¡îÁ˚OutCœss
 | 
CCID_CONTROL_ABORT
:

653 
	`DPRINTF
(
s
, 1, "ccid_controlábort UNIMPLEMENTED\n");

654 
ªt
 = 
USB_RET_STALL
;

656 
I¡îÁ˚InCœss
 | 
CCID_CONTROL_GET_CLOCK_FREQUENCIES
:

657 
	`DPRINTF
(
s
, 1, "ccid_control get clock frequencies UNIMPLEMENTED\n");

658 
ªt
 = 
USB_RET_STALL
;

660 
I¡îÁ˚InCœss
 | 
CCID_CONTROL_GET_DATA_RATES
:

661 
	`DPRINTF
(
s
, 1, "ccid_control get dataÑates UNIMPLEMENTED\n");

662 
ªt
 = 
USB_RET_STALL
;

665 
	`DPRINTF
(
s
, 1, "got unsupported/bogus control %x, value %x\n",

666 
ªque°
, 
vÆue
);

667 
ªt
 = 
USB_RET_STALL
;

670  
ªt
;

671 
	}
}

673 
boﬁ
 
	$ccid_ˇrd_ö£πed
(
USBCCIDSèã
 *
s
)

675  
s
->
bmSlŸICCSèã
 & 
SLOT_0_STATE_MASK
;

676 
	}
}

678 
uöt8_t
 
	$ccid_ˇrd_°©us
(
USBCCIDSèã
 *
s
)

680  
	`ccid_ˇrd_ö£πed
(
s
)

681 ? (
s
->
powîed
 ?

682 
ICC_STATUS_PRESENT_ACTIVE


683 : 
ICC_STATUS_PRESENT_INACTIVE


685 : 
ICC_STATUS_NOT_PRESENT
;

686 
	}
}

688 
uöt8_t
 
	$ccid_ˇlc_°©us
(
USBCCIDSèã
 *
s
)

694 
uöt8_t
 
ªt
 = 
	`ccid_ˇrd_°©us
(
s
Ë| (s->
bmComm™dSètus
 << 6);

695 
	`DPRINTF
(
s
, 
D_VERBOSE
, "°©u†%d\n", 
ªt
);

696  
ªt
;

697 
	}
}

699 
	$ccid_ª£t_îr‹_°©us
(
USBCCIDSèã
 *
s
)

701 
s
->
bEº‹
 = 
ERROR_CMD_NOT_SUPPORTED
;

702 
s
->
bmComm™dSètus
 = 
COMMAND_STATUS_NO_ERROR
;

703 
	}
}

705 
	$ccid_wrôe_¶Ÿ_°©us
(
USBCCIDSèã
 *
s
, 
CCID_Hódî
 *
ªcv
)

707 
CCID_SlŸSètus
 *
h
 = 
	`ccid_ª£rve_ªcv_buf
(
s
, (CCID_SlotStatus));

708 i‡(
h
 =
NULL
) {

711 
h
->
b
.
hdr
.
bMesßgeTy≥
 = 
CCID_MESSAGE_TYPE_RDR_to_PC_SlŸSètus
;

712 
h
->
b
.
hdr
.
dwLígth
 = 0;

713 
h
->
b
.
hdr
.
bSlŸ
 = 
ªcv
->bSlot;

714 
h
->
b
.
hdr
.
bSeq
 = 
ªcv
->bSeq;

715 
h
->
b
.
bSètus
 = 
	`ccid_ˇlc_°©us
(
s
);

716 
h
->
b
.
bEº‹
 = 
s
->bError;

717 
h
->
bClockSètus
 = 
CLOCK_STATUS_RUNNING
;

718 
	`ccid_ª£t_îr‹_°©us
(
s
);

719 
	}
}

721 
	$ccid_wrôe_∑ømëîs
(
USBCCIDSèã
 *
s
, 
CCID_Hódî
 *
ªcv
)

723 
CCID_P¨amëî
 *
h
;

724 
uöt32_t
 
Àn
 = 
s
->
ulPrŸocﬁD©aSåu˘uªSize
;

726 
h
 = 
	`ccid_ª£rve_ªcv_buf
(
s
, (
CCID_P¨amëî
Ë+ 
Àn
);

727 i‡(
h
 =
NULL
) {

730 
h
->
b
.
hdr
.
bMesßgeTy≥
 = 
CCID_MESSAGE_TYPE_RDR_to_PC_P¨amëîs
;

731 
h
->
b
.
hdr
.
dwLígth
 = 0;

732 
h
->
b
.
hdr
.
bSlŸ
 = 
ªcv
->bSlot;

733 
h
->
b
.
hdr
.
bSeq
 = 
ªcv
->bSeq;

734 
h
->
b
.
bSètus
 = 
	`ccid_ˇlc_°©us
(
s
);

735 
h
->
b
.
bEº‹
 = 
s
->bError;

736 
h
->
bPrŸocﬁNum
 = 
s
->bProtocolNum;

737 
	`mem˝y
(
h
->
abPrŸocﬁD©aSåu˘uª
, 
s
->abPrŸocﬁD©aSåu˘uª, 
Àn
);

738 
	`ccid_ª£t_îr‹_°©us
(
s
);

739 
	}
}

741 
	$ccid_wrôe_d©a_block
(
USBCCIDSèã
 *
s
, 
uöt8_t
 
¶Ÿ
, uöt8_à
£q
,

742 c⁄° 
uöt8_t
 *
d©a
, 
uöt32_t
 
Àn
)

744 
CCID_D©aBlock
 *
p
 = 
	`ccid_ª£rve_ªcv_buf
(
s
, (*pË+ 
Àn
);

746 i‡(
p
 =
NULL
) {

749 
p
->
b
.
hdr
.
bMesßgeTy≥
 = 
CCID_MESSAGE_TYPE_RDR_to_PC_D©aBlock
;

750 
p
->
b
.
hdr
.
dwLígth
 = 
	`˝u_to_À32
(
Àn
);

751 
p
->
b
.
hdr
.
bSlŸ
 = 
¶Ÿ
;

752 
p
->
b
.
hdr
.
bSeq
 = 
£q
;

753 
p
->
b
.
bSètus
 = 
	`ccid_ˇlc_°©us
(
s
);

754 
p
->
b
.
bEº‹
 = 
s
->bError;

755 i‡(
p
->
b
.
bEº‹
) {

756 
	`DPRINTF
(
s
, 
D_VERBOSE
, "îr‹ %d", 
p
->
b
.
bEº‹
);

758 
	`mem˝y
(
p
->
abD©a
, 
d©a
, 
Àn
);

759 
	`ccid_ª£t_îr‹_°©us
(
s
);

760 
	}
}

762 
	$ccid_wrôe_d©a_block_™swî
(
USBCCIDSèã
 *
s
,

763 c⁄° 
uöt8_t
 *
d©a
, 
uöt32_t
 
Àn
)

765 
uöt8_t
 
£q
;

766 
uöt8_t
 
¶Ÿ
;

768 i‡(!
	`ccid_has_≥ndög_™swîs
(
s
)) {

769 
	`ab‹t
();

771 
	`ccid_ªmove_≥ndög_™swî
(
s
, &
¶Ÿ
, &
£q
);

772 
	`ccid_wrôe_d©a_block
(
s
, 
¶Ÿ
, 
£q
, 
d©a
, 
Àn
);

773 
	}
}

775 
	$ccid_wrôe_d©a_block_©r
(
USBCCIDSèã
 *
s
, 
CCID_Hódî
 *
ªcv
)

777 c⁄° 
uöt8_t
 *
©r
 = 
NULL
;

778 
uöt32_t
 
Àn
 = 0;

780 i‡(
s
->
ˇrd
) {

781 
©r
 = 
	`ccid_ˇrd_gë_©r
(
s
->
ˇrd
, &
Àn
);

783 
	`ccid_wrôe_d©a_block
(
s
, 
ªcv
->
bSlŸ
,Ñecv->
bSeq
, 
©r
, 
Àn
);

784 
	}
}

786 
	$ccid_£t_∑ømëîs
(
USBCCIDSèã
 *
s
, 
CCID_Hódî
 *
ªcv
)

788 
CCID_SëP¨amëîs
 *
ph
 = (CCID_SëP¨amëî†*Ë
ªcv
;

789 
uöt32_t
 
Àn
 = 0;

790 i‡((
ph
->
bPrŸocﬁNum
 & 3) == 0) {

791 
Àn
 = 5;

793 i‡((
ph
->
bPrŸocﬁNum
 & 3) == 1) {

794 
Àn
 = 7;

796 i‡(
Àn
 == 0) {

797 
s
->
bmComm™dSètus
 = 
COMMAND_STATUS_FAILED
;

798 
s
->
bEº‹
 = 7;

801 
s
->
bPrŸocﬁNum
 = 
ph
->bProtocolNum;

802 
	`mem˝y
(
s
->
abPrŸocﬁD©aSåu˘uª
, 
ph
->abPrŸocﬁD©aSåu˘uª, 
Àn
);

803 
s
->
ulPrŸocﬁD©aSåu˘uªSize
 = 
Àn
;

804 
	`DPRINTF
(
s
, 1, "%s: usögÜí %d\n", 
__func__
, 
Àn
);

805 
	}
}

811 c⁄° 
uöt8_t
 
	gabDeÁu…PrŸocﬁD©aSåu˘uª
[7] = {

814 
	$ccid_ª£t_∑ømëîs
(
USBCCIDSèã
 *
s
)

816 
uöt32_t
 
Àn
 = (
abDeÁu…PrŸocﬁD©aSåu˘uª
);

818 
s
->
bPrŸocﬁNum
 = 1;

819 
s
->
ulPrŸocﬁD©aSåu˘uªSize
 = 
Àn
;

820 
	`mem˝y
(
s
->
abPrŸocﬁD©aSåu˘uª
, 
abDeÁu…PrŸocﬁD©aSåu˘uª
, 
Àn
);

821 
	}
}

823 
	$ccid_ªp‹t_îr‹_Áûed
(
USBCCIDSèã
 *
s
, 
uöt8_t
 
îr‹
)

825 
s
->
bmComm™dSètus
 = 
COMMAND_STATUS_FAILED
;

826 
s
->
bEº‹
 = 
îr‹
;

827 
	}
}

830 
	$ccid_⁄_¶Ÿ_ch™ge
(
USBCCIDSèã
 *
s
, 
boﬁ
 
fuŒ
)

833 
uöt8_t
 
cuºít
 = 
s
->
bmSlŸICCSèã
;

834 i‡(
fuŒ
) {

835 
s
->
bmSlŸICCSèã
 |
SLOT_0_STATE_MASK
;

837 
s
->
bmSlŸICCSèã
 &~
SLOT_0_STATE_MASK
;

839 i‡(
cuºít
 !
s
->
bmSlŸICCSèã
) {

840 
s
->
bmSlŸICCSèã
 |
SLOT_0_CHANGED_MASK
;

842 
s
->
nŸify_¶Ÿ_ch™ge
 = 
åue
;

843 
	`usb_wakeup
(
s
->
öå
);

844 
	}
}

846 
	$ccid_wrôe_d©a_block_îr‹
(

847 
USBCCIDSèã
 *
s
, 
uöt8_t
 
¶Ÿ
, uöt8_à
£q
)

849 
	`ccid_wrôe_d©a_block
(
s
, 
¶Ÿ
, 
£q
, 
NULL
, 0);

850 
	}
}

852 
	$ccid_⁄_≠du_‰om_gue°
(
USBCCIDSèã
 *
s
, 
CCID_X„rBlock
 *
ªcv
)

854 
uöt32_t
 
Àn
;

856 i‡(
	`ccid_ˇrd_°©us
(
s
Ë!
ICC_STATUS_PRESENT_ACTIVE
) {

857 
	`DPRINTF
(
s
, 1,

859 
	`ccid_wrôe_d©a_block_îr‹
(
s
, 
ªcv
->
hdr
.
bSlŸ
,Ñecv->hdr.
bSeq
);

862 
Àn
 = 
	`À32_to_˝u
(
ªcv
->
hdr
.
dwLígth
);

863 
	`DPRINTF
(
s
, 1, "%s: seq %d,Üí %d\n", 
__func__
,

864 
ªcv
->
hdr
.
bSeq
, 
Àn
);

865 
	`ccid_add_≥ndög_™swî
(
s
, (
CCID_Hódî
 *)
ªcv
);

866 i‡(
s
->
ˇrd
) {

867 
	`ccid_ˇrd_≠du_‰om_gue°
(
s
->
ˇrd
, 
ªcv
->
abD©a
, 
Àn
);

869 
	`DPRINTF
(
s
, 
D_WARN
, "warning: discardedápdu\n");

871 
	}
}

879 
	$ccid_h™dÀ_bulk_out
(
USBCCIDSèã
 *
s
, 
USBPackë
 *
p
)

881 
CCID_Hódî
 *
ccid_hódî
;

883 i‡(
p
->
iov
.
size
 + 
s
->
bulk_out_pos
 > 
BULK_OUT_DATA_SIZE
) {

884  
USB_RET_STALL
;

886 
ccid_hódî
 = (
CCID_Hódî
 *)
s
->
bulk_out_d©a
;

887 
	`usb_∑ckë_c›y
(
p
, 
s
->
bulk_out_d©a
 + s->
bulk_out_pos
,Ö->
iov
.
size
);

888 
s
->
bulk_out_pos
 +
p
->
iov
.
size
;

889 i‡(
p
->
iov
.
size
 =
CCID_MAX_PACKET_SIZE
) {

890 
	`DPRINTF
(
s
, 
D_VERBOSE
,

892 
p
->
iov
.
size
, 
ccid_hódî
->
dwLígth
);

895 i‡(
s
->
bulk_out_pos
 < 10) {

896 
	`DPRINTF
(
s
, 1,

898 
__func__
);

900 
	`DPRINTF
(
s
, 
D_MORE_INFO
, "%†%x\n", 
__func__
, 
ccid_hódî
->
bMesßgeTy≥
);

901 
ccid_hódî
->
bMesßgeTy≥
) {

902 
CCID_MESSAGE_TYPE_PC_to_RDR_GëSlŸSètus
:

903 
	`ccid_wrôe_¶Ÿ_°©us
(
s
, 
ccid_hódî
);

905 
CCID_MESSAGE_TYPE_PC_to_RDR_IccPowîOn
:

906 
	`DPRINTF
(
s
, 1, "PowerOn: %d\n",

907 ((
CCID_IccPowîOn
 *)(
ccid_hódî
))->
bPowîSñe˘
);

908 
s
->
powîed
 = 
åue
;

909 i‡(!
	`ccid_ˇrd_ö£πed
(
s
)) {

910 
	`ccid_ªp‹t_îr‹_Áûed
(
s
, 
ERROR_ICC_MUTE
);

913 
	`ccid_wrôe_d©a_block_©r
(
s
, 
ccid_hódî
);

915 
CCID_MESSAGE_TYPE_PC_to_RDR_IccPowîOff
:

916 
	`DPRINTF
(
s
, 1, "PowerOff\n");

917 
	`ccid_ª£t_îr‹_°©us
(
s
);

918 
s
->
powîed
 = 
Ál£
;

919 
	`ccid_wrôe_¶Ÿ_°©us
(
s
, 
ccid_hódî
);

921 
CCID_MESSAGE_TYPE_PC_to_RDR_X‰Block
:

922 
	`ccid_⁄_≠du_‰om_gue°
(
s
, (
CCID_X„rBlock
 *)s->
bulk_out_d©a
);

924 
CCID_MESSAGE_TYPE_PC_to_RDR_SëP¨amëîs
:

925 
	`ccid_ª£t_îr‹_°©us
(
s
);

926 
	`ccid_£t_∑ømëîs
(
s
, 
ccid_hódî
);

927 
	`ccid_wrôe_∑ømëîs
(
s
, 
ccid_hódî
);

929 
CCID_MESSAGE_TYPE_PC_to_RDR_Re£tP¨amëîs
:

930 
	`ccid_ª£t_îr‹_°©us
(
s
);

931 
	`ccid_ª£t_∑ømëîs
(
s
);

932 
	`ccid_wrôe_∑ømëîs
(
s
, 
ccid_hódî
);

934 
CCID_MESSAGE_TYPE_PC_to_RDR_GëP¨amëîs
:

935 
	`ccid_ª£t_îr‹_°©us
(
s
);

936 
	`ccid_wrôe_∑ømëîs
(
s
, 
ccid_hódî
);

939 
	`DPRINTF
(
s
, 1,

941 
ccid_hódî
->
bMesßgeTy≥
);

946 
	`ccid_ªp‹t_îr‹_Áûed
(
s
, 
ERROR_CMD_NOT_SUPPORTED
);

947 
	`ccid_wrôe_¶Ÿ_°©us
(
s
, 
ccid_hódî
);

951 
s
->
bulk_out_pos
 = 0;

953 
	}
}

955 
	$ccid_bulk_ö_c›y_to_gue°
(
USBCCIDSèã
 *
s
, 
USBPackë
 *
p
)

957 
ªt
 = 0;

959 
	`as£π
(
p
->
iov
.
size
 > 0);

960 
	`ccid_bulk_ö_gë
(
s
);

961 i‡(
s
->
cuºít_bulk_ö
 !
NULL
) {

962 
ªt
 = 
	`MIN
(
s
->
cuºít_bulk_ö
->
Àn
 - s->cuºít_bulk_ö->
pos
,

963 
p
->
iov
.
size
);

964 
	`usb_∑ckë_c›y
(
p
, 
s
->
cuºít_bulk_ö
->
d©a
 +

965 
s
->
cuºít_bulk_ö
->
pos
, 
ªt
);

966 
s
->
cuºít_bulk_ö
->
pos
 +
ªt
;

967 i‡(
s
->
cuºít_bulk_ö
->
pos
 =s->cuºít_bulk_ö->
Àn
) {

968 
	`ccid_bulk_ö_ªÀa£
(
s
);

972 
ªt
 = 
USB_RET_NAK
;

974 i‡(
ªt
 > 0) {

975 
	`DPRINTF
(
s
, 
D_MORE_INFO
,

977 
__func__
, 
p
->
iov
.
size
, 
ªt
);

979 i‡(
ªt
 !
USB_RET_NAK
 &&Ñë < 
p
->
iov
.
size
) {

980 
	`DPRINTF
(
s
, 1,

982 
__func__
, 
ªt
, 
p
->
iov
.
size
);

984  
ªt
;

985 
	}
}

987 
	$ccid_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

989 
USBCCIDSèã
 *
s
 = 
	`DO_UPCAST
(USBCCIDSèã, 
dev
, dev);

990 
ªt
 = 0;

991 
uöt8_t
 
buf
[2];

993 
p
->
pid
) {

994 
USB_TOKEN_OUT
:

995 
ªt
 = 
	`ccid_h™dÀ_bulk_out
(
s
, 
p
);

998 
USB_TOKEN_IN
:

999 
p
->
ï
->
ƒ
) {

1000 
CCID_BULK_IN_EP
:

1001 i‡(!
p
->
iov
.
size
) {

1002 
ªt
 = 
USB_RET_NAK
;

1004 
ªt
 = 
	`ccid_bulk_ö_c›y_to_gue°
(
s
, 
p
);

1007 
CCID_INT_IN_EP
:

1008 i‡(
s
->
nŸify_¶Ÿ_ch™ge
) {

1010 
buf
[0] = 
CCID_MESSAGE_TYPE_RDR_to_PC_NŸifySlŸCh™ge
;

1011 
buf
[1] = 
s
->
bmSlŸICCSèã
;

1012 
	`usb_∑ckë_c›y
(
p
, 
buf
, 2);

1013 
ªt
 = 2;

1014 
s
->
nŸify_¶Ÿ_ch™ge
 = 
Ál£
;

1015 
s
->
bmSlŸICCSèã
 &~
SLOT_0_CHANGED_MASK
;

1016 
	`DPRINTF
(
s
, 
D_INFO
,

1019 
s
->
bmSlŸICCSèã
, 
p
->
iov
.
size
);

1023 
	`DPRINTF
(
s
, 1, "BadÉndpoint\n");

1024 
ªt
 = 
USB_RET_STALL
;

1029 
	`DPRINTF
(
s
, 1, "BadÅoken\n");

1030 
ªt
 = 
USB_RET_STALL
;

1034  
ªt
;

1035 
	}
}

1037 
	$ccid_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

1039 
USBCCIDSèã
 *
s
 = 
	`DO_UPCAST
(USBCCIDSèã, 
dev
, dev);

1041 
	`ccid_bulk_ö_˛ór
(
s
);

1042 
	}
}

1044 
	$ccid_Êush_≥ndög_™swîs
(
USBCCIDSèã
 *
s
)

1046 
	`ccid_has_≥ndög_™swîs
(
s
)) {

1047 
	`ccid_wrôe_d©a_block_™swî
(
s
, 
NULL
, 0);

1049 
	}
}

1051 
Answî
 *
	$ccid_≥ek_√xt_™swî
(
USBCCIDSèã
 *
s
)

1053  
s
->
≥ndög_™swîs_num
 == 0

1054 ? 
NULL


1055 : &
s
->
≥ndög_™swîs
[s->
≥ndög_™swîs_°¨t
 % 
PENDING_ANSWERS_NUM
];

1056 
	}
}

1058 
Pr›îty
 
	gccid_¥›s
[] = {

1059 
DEFINE_PROP_UINT32
("¶Ÿ", 
CCIDC¨dSèã
, 
¶Ÿ
, 0),

1060 
DEFINE_PROP_END_OF_LIST
(),

1063 
	#TYPE_CCID_BUS
 "ccid-bus"

	)

1064 
	#CCID_BUS
(
obj
Ë
	`OBJECT_CHECK
(
CCIDBus
, (obj), 
TYPE_CCID_BUS
)

	)

1066 c⁄° 
Ty≥Info
 
	gccid_bus_öfo
 = {

1067 .
«me
 = 
TYPE_CCID_BUS
,

1068 .
	g∑ª¡
 = 
TYPE_BUS
,

1069 .
	gö°™˚_size
 = (
CCIDBus
),

1072 
	$ccid_ˇrd_£nd_≠du_to_gue°
(
CCIDC¨dSèã
 *
ˇrd
,

1073 
uöt8_t
 *
≠du
, 
uöt32_t
 
Àn
)

1075 
USBCCIDSèã
 *
s
 = 
	`DO_UPCAST
(USBCCIDSèã, 
dev
.
qdev
,

1076 
ˇrd
->
qdev
.
∑ª¡_bus
->
∑ª¡
);

1077 
Answî
 *
™swî
;

1079 i‡(!
	`ccid_has_≥ndög_™swîs
(
s
)) {

1080 
	`DPRINTF
(
s
, 1, "CCID ERROR: gotán APDU withoutÖendingánswers\n");

1083 
s
->
bmComm™dSètus
 = 
COMMAND_STATUS_NO_ERROR
;

1084 
™swî
 = 
	`ccid_≥ek_√xt_™swî
(
s
);

1085 i‡(
™swî
 =
NULL
) {

1086 
	`ab‹t
();

1088 
	`DPRINTF
(
s
, 1, "APDUÑeturnedÅo guest %d (answer seq %d, slot %d)\n",

1089 
Àn
, 
™swî
->
£q
,ánswî->
¶Ÿ
);

1090 
	`ccid_wrôe_d©a_block_™swî
(
s
, 
≠du
, 
Àn
);

1091 
	}
}

1093 
	$ccid_ˇrd_ˇrd_ªmoved
(
CCIDC¨dSèã
 *
ˇrd
)

1095 
USBCCIDSèã
 *
s
 =

1096 
	`DO_UPCAST
(
USBCCIDSèã
, 
dev
.
qdev
, 
ˇrd
->qdev.
∑ª¡_bus
->
∑ª¡
);

1098 
	`ccid_⁄_¶Ÿ_ch™ge
(
s
, 
Ál£
);

1099 
	`ccid_Êush_≥ndög_™swîs
(
s
);

1100 
	`ccid_ª£t
(
s
);

1101 
	}
}

1103 
	$ccid_ˇrd_ccid_©èch
(
CCIDC¨dSèã
 *
ˇrd
)

1105 
USBCCIDSèã
 *
s
 =

1106 
	`DO_UPCAST
(
USBCCIDSèã
, 
dev
.
qdev
, 
ˇrd
->qdev.
∑ª¡_bus
->
∑ª¡
);

1108 
	`DPRINTF
(
s
, 1, "CCID Attach\n");

1109 i‡(
s
->
migøti⁄_°©e
 =
MIGRATION_MIGRATED
) {

1110 
s
->
migøti⁄_°©e
 = 
MIGRATION_NONE
;

1113 
	}
}

1115 
	$ccid_ˇrd_ccid_dëach
(
CCIDC¨dSèã
 *
ˇrd
)

1117 
USBCCIDSèã
 *
s
 =

1118 
	`DO_UPCAST
(
USBCCIDSèã
, 
dev
.
qdev
, 
ˇrd
->qdev.
∑ª¡_bus
->
∑ª¡
);

1120 
	`DPRINTF
(
s
, 1, "CCID Detach\n");

1121 i‡(
	`ccid_ˇrd_ö£πed
(
s
)) {

1122 
	`ccid_⁄_¶Ÿ_ch™ge
(
s
, 
Ál£
);

1124 
	`ccid_dëach
(
s
);

1125 
	}
}

1127 
	$ccid_ˇrd_ˇrd_îr‹
(
CCIDC¨dSèã
 *
ˇrd
, 
uöt64_t
 
îr‹
)

1129 
USBCCIDSèã
 *
s
 =

1130 
	`DO_UPCAST
(
USBCCIDSèã
, 
dev
.
qdev
, 
ˇrd
->qdev.
∑ª¡_bus
->
∑ª¡
);

1132 
s
->
bmComm™dSètus
 = 
COMMAND_STATUS_FAILED
;

1133 
s
->
œ°_™swî_îr‹
 = 
îr‹
;

1134 
	`DPRINTF
(
s
, 1, "VSC_Eº‹: %" 
PRIX64
 "\n", s->
œ°_™swî_îr‹
);

1140 i‡(
	`ccid_has_≥ndög_™swîs
(
s
)) {

1141 
	`ccid_wrôe_d©a_block_™swî
(
s
, 
NULL
, 0);

1143 
	}
}

1145 
	$ccid_ˇrd_ˇrd_ö£πed
(
CCIDC¨dSèã
 *
ˇrd
)

1147 
USBCCIDSèã
 *
s
 =

1148 
	`DO_UPCAST
(
USBCCIDSèã
, 
dev
.
qdev
, 
ˇrd
->qdev.
∑ª¡_bus
->
∑ª¡
);

1150 
s
->
bmComm™dSètus
 = 
COMMAND_STATUS_NO_ERROR
;

1151 
	`ccid_Êush_≥ndög_™swîs
(
s
);

1152 
	`ccid_⁄_¶Ÿ_ch™ge
(
s
, 
åue
);

1153 
	}
}

1155 
	$ccid_ˇrd_exô
(
Devi˚Sèã
 *
qdev
)

1157 
ªt
 = 0;

1158 
CCIDC¨dSèã
 *
ˇrd
 = 
	`CCID_CARD
(
qdev
);

1159 
USBCCIDSèã
 *
s
 =

1160 
	`DO_UPCAST
(
USBCCIDSèã
, 
dev
.
qdev
, 
ˇrd
->qdev.
∑ª¡_bus
->
∑ª¡
);

1162 i‡(
	`ccid_ˇrd_ö£πed
(
s
)) {

1163 
	`ccid_ˇrd_ˇrd_ªmoved
(
ˇrd
);

1165 
ªt
 = 
	`ccid_ˇrd_exô‚
(
ˇrd
);

1166 
s
->
ˇrd
 = 
NULL
;

1167  
ªt
;

1168 
	}
}

1170 
	$ccid_ˇrd_öô
(
Devi˚Sèã
 *
qdev
)

1172 
CCIDC¨dSèã
 *
ˇrd
 = 
	`CCID_CARD
(
qdev
);

1173 
USBCCIDSèã
 *
s
 =

1174 
	`DO_UPCAST
(
USBCCIDSèã
, 
dev
.
qdev
, 
ˇrd
->qdev.
∑ª¡_bus
->
∑ª¡
);

1175 
ªt
 = 0;

1177 i‡(
ˇrd
->
¶Ÿ
 != 0) {

1178 
	`îr‹_ªp‹t
("Warning: usb-ccid supports one slot, can'tádd %d",

1179 
ˇrd
->
¶Ÿ
);

1182 i‡(
s
->
ˇrd
 !
NULL
) {

1183 
	`îr‹_ªp‹t
("Warning: usb-ccid cardálready full,Çotádding");

1186 
ªt
 = 
	`ccid_ˇrd_öô‚
(
ˇrd
);

1187 i‡(
ªt
 == 0) {

1188 
s
->
ˇrd
 = card;

1190  
ªt
;

1191 
	}
}

1193 
	$ccid_öô‚
(
USBDevi˚
 *
dev
)

1195 
USBCCIDSèã
 *
s
 = 
	`DO_UPCAST
(USBCCIDSèã, 
dev
, dev);

1197 
	`usb_desc_¸óã_£rül
(
dev
);

1198 
	`usb_desc_öô
(
dev
);

1199 
	`qbus_¸óã_ö∂a˚
(&
s
->
bus
.
qbus
, 
TYPE_CCID_BUS
, &
dev
->
qdev
, 
NULL
);

1200 
s
->
öå
 = 
	`usb_ï_gë
(
dev
, 
USB_TOKEN_IN
, 
CCID_INT_IN_EP
);

1201 
s
->
bus
.
qbus
.
Ælow_hŸ∂ug
 = 1;

1202 
s
->
ˇrd
 = 
NULL
;

1203 
s
->
migøti⁄_°©e
 = 
MIGRATION_NONE
;

1204 
s
->
migøti⁄_èrgë_ù
 = 0;

1205 
s
->
migøti⁄_èrgë_p‹t
 = 0;

1206 
s
->
dev
.
•ìd
 = 
USB_SPEED_FULL
;

1207 
s
->
dev
.
•ìdmask
 = 
USB_SPEED_MASK_FULL
;

1208 
s
->
nŸify_¶Ÿ_ch™ge
 = 
Ál£
;

1209 
s
->
powîed
 = 
åue
;

1210 
s
->
≥ndög_™swîs_num
 = 0;

1211 
s
->
œ°_™swî_îr‹
 = 0;

1212 
s
->
bulk_ö_≥ndög_°¨t
 = 0;

1213 
s
->
bulk_ö_≥ndög_íd
 = 0;

1214 
s
->
cuºít_bulk_ö
 = 
NULL
;

1215 
	`ccid_ª£t_îr‹_°©us
(
s
);

1216 
s
->
bulk_out_pos
 = 0;

1217 
	`ccid_ª£t_∑ømëîs
(
s
);

1218 
	`ccid_ª£t
(
s
);

1220 
	}
}

1222 
	$ccid_po°_lﬂd
(*
›aque
, 
vîsi⁄_id
)

1224 
USBCCIDSèã
 *
s
 = 
›aque
;

1232 
s
->
dev
.
°©e
 = s->
°©e_vm°©e
;

1234 
	}
}

1236 
	$ccid_¥e_ßve
(*
›aque
)

1238 
USBCCIDSèã
 *
s
 = 
›aque
;

1240 
s
->
°©e_vm°©e
 = s->
dev
.
°©e
;

1241 i‡(
s
->
dev
.
©èched
) {

1246 
s
->
migøti⁄_°©e
 = 
MIGRATION_MIGRATED
;

1248 
	}
}

1250 
VMSèãDes¸ùti⁄
 
	gbulk_ö_vm°©e
 = {

1251 .
«me
 = "CCID BulkIn state",

1252 .
	gvîsi⁄_id
 = 1,

1253 .
	gmöimum_vîsi⁄_id
 = 1,

1254 .
	gfõlds
 = (
VMSèãFõld
[]) {

1255 
VMSTATE_BUFFER
(
d©a
, 
BulkIn
),

1256 
VMSTATE_UINT32
(
Àn
, 
BulkIn
),

1257 
VMSTATE_UINT32
(
pos
, 
BulkIn
),

1258 
VMSTATE_END_OF_LIST
()

1262 
VMSèãDes¸ùti⁄
 
	g™swî_vm°©e
 = {

1263 .
«me
 = "CCID Answer state",

1264 .
	gvîsi⁄_id
 = 1,

1265 .
	gmöimum_vîsi⁄_id
 = 1,

1266 .
	gfõlds
 = (
VMSèãFõld
[]) {

1267 
VMSTATE_UINT8
(
¶Ÿ
, 
Answî
),

1268 
VMSTATE_UINT8
(
£q
, 
Answî
),

1269 
VMSTATE_END_OF_LIST
()

1273 
VMSèãDes¸ùti⁄
 
	gusb_devi˚_vm°©e
 = {

1274 .
«me
 = "usb_device",

1275 .
	gvîsi⁄_id
 = 1,

1276 .
	gmöimum_vîsi⁄_id
 = 1,

1277 .
	gfõlds
 = (
VMSèãFõld
[]) {

1278 
VMSTATE_UINT8
(
addr
, 
USBDevi˚
),

1279 
VMSTATE_BUFFER
(
£tup_buf
, 
USBDevi˚
),

1280 
VMSTATE_BUFFER
(
d©a_buf
, 
USBDevi˚
),

1281 
VMSTATE_END_OF_LIST
()

1285 
VMSèãDes¸ùti⁄
 
	gccid_vm°©e
 = {

1286 .
«me
 = 
CCID_DEV_NAME
,

1287 .
	gvîsi⁄_id
 = 1,

1288 .
	gmöimum_vîsi⁄_id
 = 1,

1289 .
	gpo°_lﬂd
 = 
ccid_po°_lﬂd
,

1290 .
	g¥e_ßve
 = 
ccid_¥e_ßve
,

1291 .
	gfõlds
 = (
VMSèãFõld
[]) {

1292 
VMSTATE_STRUCT
(
dev
, 
USBCCIDSèã
, 1, 
usb_devi˚_vm°©e
, 
USBDevi˚
),

1293 
VMSTATE_UINT8
(
debug
, 
USBCCIDSèã
),

1294 
VMSTATE_BUFFER
(
bulk_out_d©a
, 
USBCCIDSèã
),

1295 
VMSTATE_UINT32
(
bulk_out_pos
, 
USBCCIDSèã
),

1296 
VMSTATE_UINT8
(
bmSlŸICCSèã
, 
USBCCIDSèã
),

1297 
VMSTATE_UINT8
(
powîed
, 
USBCCIDSèã
),

1298 
VMSTATE_UINT8
(
nŸify_¶Ÿ_ch™ge
, 
USBCCIDSèã
),

1299 
VMSTATE_UINT64
(
œ°_™swî_îr‹
, 
USBCCIDSèã
),

1300 
VMSTATE_UINT8
(
bEº‹
, 
USBCCIDSèã
),

1301 
VMSTATE_UINT8
(
bmComm™dSètus
, 
USBCCIDSèã
),

1302 
VMSTATE_UINT8
(
bPrŸocﬁNum
, 
USBCCIDSèã
),

1303 
VMSTATE_BUFFER
(
abPrŸocﬁD©aSåu˘uª
, 
USBCCIDSèã
),

1304 
VMSTATE_UINT32
(
ulPrŸocﬁD©aSåu˘uªSize
, 
USBCCIDSèã
),

1305 
VMSTATE_STRUCT_ARRAY
(
bulk_ö_≥ndög
, 
USBCCIDSèã
,

1306 
BULK_IN_PENDING_NUM
, 1, 
bulk_ö_vm°©e
, 
BulkIn
),

1307 
VMSTATE_UINT32
(
bulk_ö_≥ndög_°¨t
, 
USBCCIDSèã
),

1308 
VMSTATE_UINT32
(
bulk_ö_≥ndög_íd
, 
USBCCIDSèã
),

1309 
VMSTATE_STRUCT_ARRAY
(
≥ndög_™swîs
, 
USBCCIDSèã
,

1310 
PENDING_ANSWERS_NUM
, 1, 
™swî_vm°©e
, 
Answî
),

1311 
VMSTATE_UINT32
(
≥ndög_™swîs_num
, 
USBCCIDSèã
),

1312 
VMSTATE_UINT8
(
migøti⁄_°©e
, 
USBCCIDSèã
),

1313 
VMSTATE_UINT32
(
°©e_vm°©e
, 
USBCCIDSèã
),

1314 
VMSTATE_END_OF_LIST
()

1318 
Pr›îty
 
	gccid_¥›îtõs
[] = {

1319 
DEFINE_PROP_UINT8
("debug", 
USBCCIDSèã
, 
debug
, 0),

1320 
DEFINE_PROP_END_OF_LIST
(),

1323 
	$ccid_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1325 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1326 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

1328 
uc
->
öô
 = 
ccid_öô‚
;

1329 
uc
->
¥odu˘_desc
 = "QEMU USB CCID";

1330 
uc
->
usb_desc
 = &
desc_ccid
;

1331 
uc
->
h™dÀ_ª£t
 = 
ccid_h™dÀ_ª£t
;

1332 
uc
->
h™dÀ_c⁄åﬁ
 = 
ccid_h™dÀ_c⁄åﬁ
;

1333 
uc
->
h™dÀ_d©a
 = 
ccid_h™dÀ_d©a
;

1334 
uc
->
h™dÀ_de°roy
 = 
ccid_h™dÀ_de°roy
;

1335 
dc
->
desc
 = "CCID Rev 1.1 smartcardÑeader";

1336 
dc
->
vmsd
 = &
ccid_vm°©e
;

1337 
dc
->
¥›s
 = 
ccid_¥›îtõs
;

1338 
	}
}

1340 
Ty≥Info
 
	gccid_öfo
 = {

1341 .
«me
 = 
CCID_DEV_NAME
,

1342 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

1343 .
	gö°™˚_size
 = (
USBCCIDSèã
),

1344 .
	g˛ass_öô
 = 
ccid_˛ass_öô‚
,

1347 
	$ccid_ˇrd_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1349 
Devi˚Cœss
 *
k
 = 
	`DEVICE_CLASS
(
kœss
);

1350 
k
->
bus_ty≥
 = 
TYPE_CCID_BUS
;

1351 
k
->
öô
 = 
ccid_ˇrd_öô
;

1352 
k
->
exô
 = 
ccid_ˇrd_exô
;

1353 
k
->
¥›s
 = 
ccid_¥›s
;

1354 
	}
}

1356 
Ty≥Info
 
	gccid_ˇrd_ty≥_öfo
 = {

1357 .
«me
 = 
TYPE_CCID_CARD
,

1358 .
	g∑ª¡
 = 
TYPE_DEVICE
,

1359 .
	gö°™˚_size
 = (
CCIDC¨dSèã
),

1360 .
	gab°ø˘
 = 
åue
,

1361 .
	g˛ass_size
 = (
CCIDC¨dCœss
),

1362 .
	g˛ass_öô
 = 
ccid_ˇrd_˛ass_öô
,

1365 
	$ccid_ªgi°î_ty≥s
()

1367 
	`ty≥_ªgi°î_°©ic
(&
ccid_bus_öfo
);

1368 
	`ty≥_ªgi°î_°©ic
(&
ccid_ˇrd_ty≥_öfo
);

1369 
	`ty≥_ªgi°î_°©ic
(&
ccid_öfo
);

1370 
	`usb_Àgacy_ªgi°î
(
CCID_DEV_NAME
, "ccid", 
NULL
);

1371 
	}
}

1373 
ty≥_öô
(
ccid_ªgi°î_ty≥s
)

	@dev-storage.c

10 
	~"qemu-comm⁄.h
"

11 
	~"qemu-›ti⁄.h
"

12 
	~"qemu-c⁄fig.h
"

13 
	~"hw/usb.h
"

14 
	~"hw/usb/desc.h
"

15 
	~"hw/scsi.h
"

16 
	~"c⁄sﬁe.h
"

17 
	~"m⁄ô‹.h
"

18 
	~"sy£mu.h
"

19 
	~"blockdev.h
"

23 #ifde‡
DEBUG_MSD


24 
	#DPRINTF
(
fmt
, ...) \

25 dÿ{ 
	`¥ötf
("usb-msd: " 
fmt
 , ## 
__VA_ARGS__
); } 0)

	)

27 
	#DPRINTF
(
fmt
, ...Ëdÿ{} 0)

	)

31 
	#MassSt‹ageRe£t
 0xff

	)

32 
	#GëMaxLun
 0x„

	)

34 
	eUSBMSDMode
 {

35 
	mUSB_MSDM_CBW
,

36 
	mUSB_MSDM_DATAOUT
,

37 
	mUSB_MSDM_DATAIN
,

38 
	mUSB_MSDM_CSW


41 
	susb_msd_csw
 {

42 
uöt32_t
 
	msig
;

43 
uöt32_t
 
	mèg
;

44 
uöt32_t
 
	mªsidue
;

45 
uöt8_t
 
	m°©us
;

49 
USBDevi˚
 
	mdev
;

50 
USBMSDMode
 
	mmode
;

51 
uöt32_t
 
	mscsi_off
;

52 
uöt32_t
 
	mscsi_Àn
;

53 
uöt32_t
 
	md©a_Àn
;

54 
usb_msd_csw
 
	mcsw
;

55 
SCSIReque°
 *
	mªq
;

56 
SCSIBus
 
	mbus
;

57 
BlockC⁄f
 
	mc⁄f
;

58 *
	m£rül
;

59 
SCSIDevi˚
 *
	mscsi_dev
;

60 
uöt32_t
 
	mªmovabÀ
;

62 
USBPackë
 *
	m∑ckë
;

63 } 
	tMSDSèã
;

65 
	susb_msd_cbw
 {

66 
uöt32_t
 
	msig
;

67 
uöt32_t
 
	mèg
;

68 
uöt32_t
 
	md©a_Àn
;

69 
uöt8_t
 
	mÊags
;

70 
uöt8_t
 
	mlun
;

71 
uöt8_t
 
	mcmd_Àn
;

72 
uöt8_t
 
	mcmd
[16];

76 
	mSTR_MANUFACTURER
 = 1,

77 
	mSTR_PRODUCT
,

78 
	mSTR_SERIALNUMBER
,

79 
	mSTR_CONFIG_FULL
,

80 
	mSTR_CONFIG_HIGH
,

83 c⁄° 
USBDescSåögs
 
	gdesc_°rögs
 = {

84 [
STR_MANUFACTURER
] = "QEMU",

85 [
STR_PRODUCT
] = "QEMU USB HARDDRIVE",

86 [
STR_SERIALNUMBER
] = "1",

87 [
STR_CONFIG_FULL
] = "Full speed config (usb 1.1)",

88 [
STR_CONFIG_HIGH
] = "High speed config (usb 2.0)",

91 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_fuŒ
 = {

92 .
bI¡îÁ˚Numbî
 = 0,

93 .
	gbNumEndpoöts
 = 2,

94 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_MASS_STORAGE
,

95 .
	gbI¡îÁ˚SubCœss
 = 0x06,

96 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x50,

97 .
	gïs
 = (
USBDescEndpoöt
[]) {

99 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

100 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

101 .
	gwMaxPackëSize
 = 64,

103 .
	gbEndpoötAddªss
 = 
USB_DIR_OUT
 | 0x02,

104 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

105 .
	gwMaxPackëSize
 = 64,

110 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_fuŒ
 = {

111 .
bcdUSB
 = 0x0200,

112 .
	gbMaxPackëSize0
 = 8,

113 .
	gbNumC⁄figuøti⁄s
 = 1,

114 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

116 .
bNumI¡îÁ˚s
 = 1,

117 .
	gbC⁄figuøti⁄VÆue
 = 1,

118 .
	giC⁄figuøti⁄
 = 
STR_CONFIG_FULL
,

119 .
	gbmAâribuãs
 = 0xc0,

120 .
	gnif
 = 1,

121 .
	gifs
 = &
desc_iÁ˚_fuŒ
,

126 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_high
 = {

127 .
bI¡îÁ˚Numbî
 = 0,

128 .
	gbNumEndpoöts
 = 2,

129 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_MASS_STORAGE
,

130 .
	gbI¡îÁ˚SubCœss
 = 0x06,

131 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x50,

132 .
	gïs
 = (
USBDescEndpoöt
[]) {

134 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

135 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

136 .
	gwMaxPackëSize
 = 512,

138 .
	gbEndpoötAddªss
 = 
USB_DIR_OUT
 | 0x02,

139 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

140 .
	gwMaxPackëSize
 = 512,

145 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_high
 = {

146 .
bcdUSB
 = 0x0200,

147 .
	gbMaxPackëSize0
 = 64,

148 .
	gbNumC⁄figuøti⁄s
 = 1,

149 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

151 .
bNumI¡îÁ˚s
 = 1,

152 .
	gbC⁄figuøti⁄VÆue
 = 1,

153 .
	giC⁄figuøti⁄
 = 
STR_CONFIG_HIGH
,

154 .
	gbmAâribuãs
 = 0xc0,

155 .
	gnif
 = 1,

156 .
	gifs
 = &
desc_iÁ˚_high
,

161 c⁄° 
USBDesc
 
	gdesc
 = {

162 .
id
 = {

163 .
idVíd‹
 = 0x46f4,

164 .
	gidProdu˘
 = 0x0001,

165 .
	gbcdDevi˚
 = 0,

166 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

167 .
	giProdu˘
 = 
STR_PRODUCT
,

168 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

170 .
	gfuŒ
 = &
desc_devi˚_fuŒ
,

171 .
	ghigh
 = &
desc_devi˚_high
,

172 .
	g°r
 = 
desc_°rögs
,

175 
	$usb_msd_c›y_d©a
(
MSDSèã
 *
s
, 
USBPackë
 *
p
)

177 
uöt32_t
 
Àn
;

178 
Àn
 = 
p
->
iov
.
size
 -Ö->
ªsu…
;

179 i‡(
Àn
 > 
s
->
scsi_Àn
)

180 
Àn
 = 
s
->
scsi_Àn
;

181 
	`usb_∑ckë_c›y
(
p
, 
	`scsi_ªq_gë_buf
(
s
->
ªq
Ë+ s->
scsi_off
, 
Àn
);

182 
s
->
scsi_Àn
 -
Àn
;

183 
s
->
scsi_off
 +
Àn
;

184 
s
->
d©a_Àn
 -
Àn
;

185 i‡(
s
->
scsi_Àn
 =0 || s->
d©a_Àn
 == 0) {

186 
	`scsi_ªq_c⁄töue
(
s
->
ªq
);

188 
	}
}

190 
	$usb_msd_£nd_°©us
(
MSDSèã
 *
s
, 
USBPackë
 *
p
)

192 
Àn
;

194 
	`DPRINTF
("Command status %dÅag 0x%x,Üen %zd\n",

195 
s
->
csw
.
°©us
, 
	`À32_to_˝u
(s->csw.
èg
), 
p
->
iov
.
size
);

197 
	`as£π
(
s
->
csw
.
sig
 =
	`˝u_to_À32
(0x53425355));

198 
Àn
 = 
	`MIN
((
s
->
csw
), 
p
->
iov
.
size
);

199 
	`usb_∑ckë_c›y
(
p
, &
s
->
csw
, 
Àn
);

200 
	`mem£t
(&
s
->
csw
, 0, (s->csw));

201 
	}
}

203 
	$usb_msd_∑ckë_com∂ëe
(
MSDSèã
 *
s
)

205 
USBPackë
 *
p
 = 
s
->
∑ckë
;

210 
	`DPRINTF
("Packë com∂ëê%p\n", 
p
);

211 
s
->
∑ckë
 = 
NULL
;

212 
	`usb_∑ckë_com∂ëe
(&
s
->
dev
, 
p
);

213 
	}
}

215 
	$usb_msd_å™s„r_d©a
(
SCSIReque°
 *
ªq
, 
uöt32_t
 
Àn
)

217 
MSDSèã
 *
s
 = 
	`DO_UPCAST
(MSDSèã, 
dev
.
qdev
, 
ªq
->
bus
->
qbus
.
∑ª¡
);

218 
USBPackë
 *
p
 = 
s
->
∑ckë
;

220 
	`as£π
((
s
->
mode
 =
USB_MSDM_DATAOUT
Ë=(
ªq
->
cmd
.modê=
SCSI_XFER_TO_DEV
));

221 
s
->
scsi_Àn
 = 
Àn
;

222 
s
->
scsi_off
 = 0;

223 i‡(
p
) {

224 
	`usb_msd_c›y_d©a
(
s
, 
p
);

225 
p
 = 
s
->
∑ckë
;

226 i‡(
p
 &&Ö->
ªsu…
 =p->
iov
.
size
) {

227 
	`usb_msd_∑ckë_com∂ëe
(
s
);

230 
	}
}

232 
	$usb_msd_comm™d_com∂ëe
(
SCSIReque°
 *
ªq
, 
uöt32_t
 
°©us
, 
size_t
 
ªsid
)

234 
MSDSèã
 *
s
 = 
	`DO_UPCAST
(MSDSèã, 
dev
.
qdev
, 
ªq
->
bus
->
qbus
.
∑ª¡
);

235 
USBPackë
 *
p
 = 
s
->
∑ckë
;

237 
	`DPRINTF
("Comm™d com∂ëê%dÅag 0x%x\n", 
°©us
, 
ªq
->
èg
);

239 
s
->
csw
.
sig
 = 
	`˝u_to_À32
(0x53425355);

240 
s
->
csw
.
èg
 = 
	`˝u_to_À32
(
ªq
->tag);

241 
s
->
csw
.
ªsidue
 = 
	`˝u_to_À32
(s->
d©a_Àn
);

242 
s
->
csw
.
°©us
 = status != 0;

244 i‡(
s
->
∑ckë
) {

245 i‡(
s
->
d©a_Àn
 =0 && s->
mode
 =
USB_MSDM_DATAOUT
) {

248 
	`usb_msd_£nd_°©us
(
s
, 
p
);

249 
s
->
mode
 = 
USB_MSDM_CBW
;

250 } i‡(
s
->
mode
 =
USB_MSDM_CSW
) {

251 
	`usb_msd_£nd_°©us
(
s
, 
p
);

252 
s
->
mode
 = 
USB_MSDM_CBW
;

254 i‡(
s
->
d©a_Àn
) {

255 
Àn
 = (
p
->
iov
.
size
 -Ö->
ªsu…
);

256 
	`usb_∑ckë_skù
(
p
, 
Àn
);

257 
s
->
d©a_Àn
 -
Àn
;

259 i‡(
s
->
d©a_Àn
 == 0) {

260 
s
->
mode
 = 
USB_MSDM_CSW
;

263 
	`usb_msd_∑ckë_com∂ëe
(
s
);

264 } i‡(
s
->
d©a_Àn
 == 0) {

265 
s
->
mode
 = 
USB_MSDM_CSW
;

267 
	`scsi_ªq_uƒef
(
ªq
);

268 
s
->
ªq
 = 
NULL
;

269 
	}
}

271 
	$usb_msd_ªque°_ˇn˚Œed
(
SCSIReque°
 *
ªq
)

273 
MSDSèã
 *
s
 = 
	`DO_UPCAST
(MSDSèã, 
dev
.
qdev
, 
ªq
->
bus
->
qbus
.
∑ª¡
);

275 i‡(
ªq
 =
s
->req) {

276 
	`scsi_ªq_uƒef
(
s
->
ªq
);

277 
s
->
ªq
 = 
NULL
;

278 
s
->
scsi_Àn
 = 0;

280 
	}
}

282 
	$usb_msd_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

284 
MSDSèã
 *
s
 = (MSDSèã *)
dev
;

286 
	`DPRINTF
("Reset\n");

287 i‡(
s
->
ªq
) {

288 
	`scsi_ªq_ˇn˚l
(
s
->
ªq
);

290 
	`as£π
(
s
->
ªq
 =
NULL
);

292 i‡(
s
->
∑ckë
) {

293 
s
->
∑ckë
->
ªsu…
 = 
USB_RET_STALL
;

294 
	`usb_msd_∑ckë_com∂ëe
(
s
);

297 
s
->
mode
 = 
USB_MSDM_CBW
;

298 
	}
}

300 
	$usb_msd_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

301 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

303 
MSDSèã
 *
s
 = (MSDSèã *)
dev
;

304 
ªt
;

306 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

307 i‡(
ªt
 >= 0) {

308  
ªt
;

311 
ªt
 = 0;

312 
ªque°
) {

313 
EndpoötOutReque°
 | 
USB_REQ_CLEAR_FEATURE
:

314 
ªt
 = 0;

317 
CœssI¡îÁ˚OutReque°
 | 
MassSt‹ageRe£t
:

319 
s
->
mode
 = 
USB_MSDM_CBW
;

320 
ªt
 = 0;

322 
CœssI¡îÁ˚Reque°
 | 
GëMaxLun
:

323 
d©a
[0] = 0;

324 
ªt
 = 1;

327 
ªt
 = 
USB_RET_STALL
;

330  
ªt
;

331 
	}
}

333 
	$usb_msd_ˇn˚l_io
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

335 
MSDSèã
 *
s
 = 
	`DO_UPCAST
(MSDSèã, 
dev
, dev);

337 
	`as£π
(
s
->
∑ckë
 =
p
);

338 
s
->
∑ckë
 = 
NULL
;

340 i‡(
s
->
ªq
) {

341 
	`scsi_ªq_ˇn˚l
(
s
->
ªq
);

343 
	}
}

345 
	$usb_msd_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

347 
MSDSèã
 *
s
 = (MSDSèã *)
dev
;

348 
uöt32_t
 
èg
;

349 
ªt
 = 0;

350 
usb_msd_cbw
 
cbw
;

351 
uöt8_t
 
devï
 = 
p
->
ï
->
ƒ
;

353 
p
->
pid
) {

354 
USB_TOKEN_OUT
:

355 i‡(
devï
 != 2)

356 
Áû
;

358 
s
->
mode
) {

359 
USB_MSDM_CBW
:

360 i‡(
p
->
iov
.
size
 != 31) {

361 
	`Ârötf
(
°dîr
, "usb-msd: Bad CBW size");

362 
Áû
;

364 
	`usb_∑ckë_c›y
(
p
, &
cbw
, 31);

365 i‡(
	`À32_to_˝u
(
cbw
.
sig
) != 0x43425355) {

366 
	`Ârötf
(
°dîr
, "usb-msd: Bad signature %08x\n",

367 
	`À32_to_˝u
(
cbw
.
sig
));

368 
Áû
;

370 
	`DPRINTF
("Comm™d o¿LUN %d\n", 
cbw
.
lun
);

371 i‡(
cbw
.
lun
 != 0) {

372 
	`Ârötf
(
°dîr
, "usb-msd: Bad LUN %d\n", 
cbw
.
lun
);

373 
Áû
;

375 
èg
 = 
	`À32_to_˝u
(
cbw
.tag);

376 
s
->
d©a_Àn
 = 
	`À32_to_˝u
(
cbw
.data_len);

377 i‡(
s
->
d©a_Àn
 == 0) {

378 
s
->
mode
 = 
USB_MSDM_CSW
;

379 } i‡(
cbw
.
Êags
 & 0x80) {

380 
s
->
mode
 = 
USB_MSDM_DATAIN
;

382 
s
->
mode
 = 
USB_MSDM_DATAOUT
;

384 
	`DPRINTF
("CommandÅag 0x%x flags %08xÜen %d data %d\n",

385 
èg
, 
cbw
.
Êags
, cbw.
cmd_Àn
, 
s
->
d©a_Àn
);

386 
	`as£π
(
	`À32_to_˝u
(
s
->
csw
.
ªsidue
) == 0);

387 
s
->
scsi_Àn
 = 0;

388 
s
->
ªq
 = 
	`scsi_ªq_√w
(s->
scsi_dev
, 
èg
, 0, 
cbw
.
cmd
, 
NULL
);

389 #ifde‡
DEBUG_MSD


390 
	`scsi_ªq_¥öt
(
s
->
ªq
);

392 
	`scsi_ªq_íqueue
(
s
->
ªq
);

393 i‡(
s
->
ªq
 && s->ªq->
cmd
.
x„r
 !
SCSI_XFER_NONE
) {

394 
	`scsi_ªq_c⁄töue
(
s
->
ªq
);

396 
ªt
 = 
p
->
ªsu…
;

399 
USB_MSDM_DATAOUT
:

400 
	`DPRINTF
("D©®ouà%zd/%d\n", 
p
->
iov
.
size
, 
s
->
d©a_Àn
);

401 i‡(
p
->
iov
.
size
 > 
s
->
d©a_Àn
) {

402 
Áû
;

405 i‡(
s
->
scsi_Àn
) {

406 
	`usb_msd_c›y_d©a
(
s
, 
p
);

408 i‡(
	`À32_to_˝u
(
s
->
csw
.
ªsidue
)) {

409 
Àn
 = 
p
->
iov
.
size
 -Ö->
ªsu…
;

410 i‡(
Àn
) {

411 
	`usb_∑ckë_skù
(
p
, 
Àn
);

412 
s
->
d©a_Àn
 -
Àn
;

413 i‡(
s
->
d©a_Àn
 == 0) {

414 
s
->
mode
 = 
USB_MSDM_CSW
;

418 i‡(
p
->
ªsu…
 <Ö->
iov
.
size
) {

419 
	`DPRINTF
("De„ºögÖackë %∞[waô d©a-out]\n", 
p
);

420 
s
->
∑ckë
 = 
p
;

421 
ªt
 = 
USB_RET_ASYNC
;

423 
ªt
 = 
p
->
ªsu…
;

428 
	`DPRINTF
("U√x≥˘ed wrôê÷í %zd)\n", 
p
->
iov
.
size
);

429 
Áû
;

433 
USB_TOKEN_IN
:

434 i‡(
devï
 != 1)

435 
Áû
;

437 
s
->
mode
) {

438 
USB_MSDM_DATAOUT
:

439 i‡(
s
->
d©a_Àn
 !0 || 
p
->
iov
.
size
 < 13) {

440 
Áû
;

443 
s
->
∑ckë
 = 
p
;

444 
ªt
 = 
USB_RET_ASYNC
;

447 
USB_MSDM_CSW
:

448 i‡(
p
->
iov
.
size
 < 13) {

449 
Áû
;

452 i‡(
s
->
ªq
) {

454 
	`DPRINTF
("De„ºögÖackë %∞[waô sètus]\n", 
p
);

455 
s
->
∑ckë
 = 
p
;

456 
ªt
 = 
USB_RET_ASYNC
;

458 
	`usb_msd_£nd_°©us
(
s
, 
p
);

459 
s
->
mode
 = 
USB_MSDM_CBW
;

460 
ªt
 = 13;

464 
USB_MSDM_DATAIN
:

465 
	`DPRINTF
("Data in %zd/%d, scsi_len %d\n",

466 
p
->
iov
.
size
, 
s
->
d©a_Àn
, s->
scsi_Àn
);

467 i‡(
s
->
scsi_Àn
) {

468 
	`usb_msd_c›y_d©a
(
s
, 
p
);

470 i‡(
	`À32_to_˝u
(
s
->
csw
.
ªsidue
)) {

471 
Àn
 = 
p
->
iov
.
size
 -Ö->
ªsu…
;

472 i‡(
Àn
) {

473 
	`usb_∑ckë_skù
(
p
, 
Àn
);

474 
s
->
d©a_Àn
 -
Àn
;

475 i‡(
s
->
d©a_Àn
 == 0) {

476 
s
->
mode
 = 
USB_MSDM_CSW
;

480 i‡(
p
->
ªsu…
 <Ö->
iov
.
size
) {

481 
	`DPRINTF
("De„ºögÖackë %∞[waô d©a-ö]\n", 
p
);

482 
s
->
∑ckë
 = 
p
;

483 
ªt
 = 
USB_RET_ASYNC
;

485 
ªt
 = 
p
->
ªsu…
;

490 
	`DPRINTF
("U√x≥˘edÑód (À¿%zd)\n", 
p
->
iov
.
size
);

491 
Áû
;

496 
	`DPRINTF
("BadÅoken\n");

497 
Áû
:

498 
ªt
 = 
USB_RET_STALL
;

502  
ªt
;

503 
	}
}

505 
	$usb_msd_∑ssw‹d_cb
(*
›aque
, 
îr
)

507 
MSDSèã
 *
s
 = 
›aque
;

509 i‡(!
îr
)

510 
îr
 = 
	`usb_devi˚_©èch
(&
s
->
dev
);

512 i‡(
îr
)

513 
	`qdev_u≈lug
(&
s
->
dev
.
qdev
, 
NULL
);

514 
	}
}

516 *
	$usb_msd_lﬂd_ªque°
(
QEMUFûe
 *
f
, 
SCSIReque°
 *
ªq
)

518 
MSDSèã
 *
s
 = 
	`DO_UPCAST
(MSDSèã, 
dev
.
qdev
, 
ªq
->
bus
->
qbus
.
∑ª¡
);

521 
	`as£π
(
s
->
ªq
 =
NULL
);

522 
	`scsi_ªq_ªf
(
ªq
);

523 
s
->
ªq
 =Ñeq;

524  
NULL
;

525 
	}
}

527 c⁄° 
SCSIBusInfo
 
	gusb_msd_scsi_öfo
 = {

528 .
tcq
 = 
Ál£
,

529 .
	gmax_èrgë
 = 0,

530 .
	gmax_lun
 = 0,

532 .
	gå™s„r_d©a
 = 
usb_msd_å™s„r_d©a
,

533 .
	gcom∂ëe
 = 
usb_msd_comm™d_com∂ëe
,

534 .
	gˇn˚l
 = 
usb_msd_ªque°_ˇn˚Œed
,

535 .
	glﬂd_ªque°
 = 
usb_msd_lﬂd_ªque°
,

538 
	$usb_msd_öô‚
(
USBDevi˚
 *
dev
)

540 
MSDSèã
 *
s
 = 
	`DO_UPCAST
(MSDSèã, 
dev
, dev);

541 
BlockDrivîSèã
 *
bs
 = 
s
->
c⁄f
.bs;

543 i‡(!
bs
) {

544 
	`îr‹_ªp‹t
("driveÖropertyÇot set");

548 
	`blkc⁄f_£rül
(&
s
->
c⁄f
, &s->
£rül
);

559 
	`bdrv_dëach_dev
(
bs
, &
s
->
dev
.
qdev
);

560 
s
->
c⁄f
.
bs
 = 
NULL
;

562 i‡(
s
->
£rül
) {

563 
	`usb_desc_£t_°rög
(
dev
, 
STR_SERIALNUMBER
, 
s
->
£rül
);

565 
	`usb_desc_¸óã_£rül
(
dev
);

568 
	`usb_desc_öô
(
dev
);

569 
	`scsi_bus_√w
(&
s
->
bus
, &s->
dev
.
qdev
, &
usb_msd_scsi_öfo
);

570 
s
->
scsi_dev
 = 
	`scsi_bus_Àgacy_add_drive
(&s->
bus
, 
bs
, 0, !!s->
ªmovabÀ
,

571 
s
->
c⁄f
.
boŸödex
);

572 i‡(!
s
->
scsi_dev
) {

575 
s
->
bus
.
qbus
.
Ælow_hŸ∂ug
 = 0;

576 
	`usb_msd_h™dÀ_ª£t
(
dev
);

578 i‡(
	`bdrv_key_ªquúed
(
bs
)) {

579 i‡(
cur_m⁄
) {

580 
	`m⁄ô‹_ªad_bdrv_key_°¨t
(
cur_m⁄
, 
bs
, 
usb_msd_∑ssw‹d_cb
, 
s
);

581 
s
->
dev
.
auto_©èch
 = 0;

583 
auto°¨t
 = 0;

588 
	}
}

590 
USBDevi˚
 *
	$usb_msd_öô
(
USBBus
 *
bus
, c⁄° *
fûíame
)

592 
ƒ
=0;

593 
id
[8];

594 
QemuO±s
 *
›ts
;

595 
DriveInfo
 *
döfo
;

596 
USBDevi˚
 *
dev
;

597 c⁄° *
p1
;

598 
fmt
[32];

601 
	`¢¥ötf
(
id
, (id), "usb%d", 
ƒ
++);

602 
›ts
 = 
	`qemu_›ts_¸óã
(
	`qemu_föd_›ts
("drive"), 
id
, 0, 
NULL
);

604 
p1
 = 
	`°rchr
(
fûíame
, ':');

605 i‡(
p1
++) {

606 c⁄° *
p2
;

608 i‡(
	`°r°¨t
(
fûíame
, "f‹m©=", &
p2
)) {

609 
Àn
 = 
	`MIN
(
p1
 - 
p2
, (
fmt
));

610 
	`p°r˝y
(
fmt
, 
Àn
, 
p2
);

611 
	`qemu_›t_£t
(
›ts
, "f‹m©", 
fmt
);

612 } i‡(*
fûíame
 != ':') {

613 
	`¥ötf
("uƒecognized USB mass-°‹agê›ti⁄ %s\n", 
fûíame
);

614  
NULL
;

616 
fûíame
 = 
p1
;

618 i‡(!*
fûíame
) {

619 
	`¥ötf
("block device specificationÇeeded\n");

620  
NULL
;

622 
	`qemu_›t_£t
(
›ts
, "fûe", 
fûíame
);

623 
	`qemu_›t_£t
(
›ts
, "if", "none");

626 
döfo
 = 
	`drive_öô
(
›ts
, 0);

627 i‡(!
döfo
) {

628 
	`qemu_›ts_dñ
(
›ts
);

629  
NULL
;

633 
dev
 = 
	`usb_¸óã
(
bus
, "usb-storage");

634 i‡(!
dev
) {

635  
NULL
;

637 i‡(
	`qdev_¥›_£t_drive
(&
dev
->
qdev
, "drive", 
döfo
->
bdrv
) < 0) {

638 
	`qdev_‰ì
(&
dev
->
qdev
);

639  
NULL
;

641 i‡(
	`qdev_öô
(&
dev
->
qdev
) < 0)

642  
NULL
;

644  
dev
;

645 
	}
}

647 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_msd
 = {

648 .
«me
 = "usb-storage",

649 .
	gvîsi⁄_id
 = 1,

650 .
	gmöimum_vîsi⁄_id
 = 1,

651 .
	gfõlds
 = (
VMSèãFõld
 []) {

652 
VMSTATE_USB_DEVICE
(
dev
, 
MSDSèã
),

653 
VMSTATE_UINT32
(
mode
, 
MSDSèã
),

654 
VMSTATE_UINT32
(
scsi_Àn
, 
MSDSèã
),

655 
VMSTATE_UINT32
(
scsi_off
, 
MSDSèã
),

656 
VMSTATE_UINT32
(
d©a_Àn
, 
MSDSèã
),

657 
VMSTATE_UINT32
(
csw
.
sig
, 
MSDSèã
),

658 
VMSTATE_UINT32
(
csw
.
èg
, 
MSDSèã
),

659 
VMSTATE_UINT32
(
csw
.
ªsidue
, 
MSDSèã
),

660 
VMSTATE_UINT8
(
csw
.
°©us
, 
MSDSèã
),

661 
VMSTATE_END_OF_LIST
()

665 
Pr›îty
 
	gmsd_¥›îtõs
[] = {

666 
DEFINE_BLOCK_PROPERTIES
(
MSDSèã
, 
c⁄f
),

667 
DEFINE_PROP_STRING
("£rül", 
MSDSèã
, 
£rül
),

668 
DEFINE_PROP_BIT
("ªmovabÀ", 
MSDSèã
, 
ªmovabÀ
, 0, 
Ál£
),

669 
DEFINE_PROP_END_OF_LIST
(),

672 
	$usb_msd_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

674 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

675 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

677 
uc
->
öô
 = 
usb_msd_öô‚
;

678 
uc
->
¥odu˘_desc
 = "QEMU USB MSD";

679 
uc
->
usb_desc
 = &
desc
;

680 
uc
->
ˇn˚l_∑ckë
 = 
usb_msd_ˇn˚l_io
;

681 
uc
->
h™dÀ_©èch
 = 
usb_desc_©èch
;

682 
uc
->
h™dÀ_ª£t
 = 
usb_msd_h™dÀ_ª£t
;

683 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_msd_h™dÀ_c⁄åﬁ
;

684 
uc
->
h™dÀ_d©a
 = 
usb_msd_h™dÀ_d©a
;

685 
dc
->
fw_«me
 = "storage";

686 
dc
->
vmsd
 = &
vm°©e_usb_msd
;

687 
dc
->
¥›s
 = 
msd_¥›îtõs
;

688 
	}
}

690 
Ty≥Info
 
	gmsd_öfo
 = {

691 .
«me
 = "usb-storage",

692 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

693 .
	gö°™˚_size
 = (
MSDSèã
),

694 .
	g˛ass_öô
 = 
usb_msd_˛ass_öô‚
,

697 
	$usb_msd_ªgi°î_ty≥s
()

699 
	`ty≥_ªgi°î_°©ic
(&
msd_öfo
);

700 
	`usb_Àgacy_ªgi°î
("usb-°‹age", "disk", 
usb_msd_öô
);

701 
	}
}

703 
ty≥_öô
(
usb_msd_ªgi°î_ty≥s
)

	@dev-uas.c

12 
	~"qemu-comm⁄.h
"

13 
	~"qemu-›ti⁄.h
"

14 
	~"qemu-c⁄fig.h
"

15 
	~"åa˚.h
"

17 
	~"hw/usb.h
"

18 
	~"hw/usb/desc.h
"

19 
	~"hw/scsi.h
"

20 
	~"hw/scsi-defs.h
"

24 
	#UAS_UI_COMMAND
 0x01

	)

25 
	#UAS_UI_SENSE
 0x03

	)

26 
	#UAS_UI_RESPONSE
 0x04

	)

27 
	#UAS_UI_TASK_MGMT
 0x05

	)

28 
	#UAS_UI_READ_READY
 0x06

	)

29 
	#UAS_UI_WRITE_READY
 0x07

	)

31 
	#UAS_RC_TMF_COMPLETE
 0x00

	)

32 
	#UAS_RC_INVALID_INFO_UNIT
 0x02

	)

33 
	#UAS_RC_TMF_NOT_SUPPORTED
 0x04

	)

34 
	#UAS_RC_TMF_FAILED
 0x05

	)

35 
	#UAS_RC_TMF_SUCCEEDED
 0x08

	)

36 
	#UAS_RC_INCORRECT_LUN
 0x09

	)

37 
	#UAS_RC_OVERLAPPED_TAG
 0x0a

	)

39 
	#UAS_TMF_ABORT_TASK
 0x01

	)

40 
	#UAS_TMF_ABORT_TASK_SET
 0x02

	)

41 
	#UAS_TMF_CLEAR_TASK_SET
 0x04

	)

42 
	#UAS_TMF_LOGICAL_UNIT_RESET
 0x08

	)

43 
	#UAS_TMF_I_T_NEXUS_RESET
 0x10

	)

44 
	#UAS_TMF_CLEAR_ACA
 0x40

	)

45 
	#UAS_TMF_QUERY_TASK
 0x80

	)

46 
	#UAS_TMF_QUERY_TASK_SET
 0x81

	)

47 
	#UAS_TMF_QUERY_ASYNC_EVENT
 0x82

	)

49 
	#UAS_PIPE_ID_COMMAND
 0x01

	)

50 
	#UAS_PIPE_ID_STATUS
 0x02

	)

51 
	#UAS_PIPE_ID_DATA_IN
 0x03

	)

52 
	#UAS_PIPE_ID_DATA_OUT
 0x04

	)

55 
uöt8_t
 
	mid
;

56 
uöt8_t
 
	mª£rved
;

57 
uöt16_t
 
	mèg
;

58 } 
	tQEMU_PACKED
 
	tuas_ui_hódî
;

61 
uöt8_t
 
	m¥io_èsk©å
;

62 
uöt8_t
 
	mª£rved_1
;

63 
uöt8_t
 
	madd_cdb_Àngth
;

64 
uöt8_t
 
	mª£rved_2
;

65 
uöt64_t
 
	mlun
;

66 
uöt8_t
 
	mcdb
[16];

67 
uöt8_t
 
	madd_cdb
[];

68 } 
	tQEMU_PACKED
 
	tuas_ui_comm™d
;

71 
uöt16_t
 
	m°©us_quÆifõr
;

72 
uöt8_t
 
	m°©us
;

73 
uöt8_t
 
	mª£rved
[7];

74 
uöt16_t
 
	m£n£_Àngth
;

75 
uöt8_t
 
	m£n£_d©a
[18];

76 } 
	tQEMU_PACKED
 
	tuas_ui_£n£
;

79 
uöt16_t
 
	madd_ª•⁄£_öfo
;

80 
uöt8_t
 
	mª•⁄£_code
;

81 } 
	tQEMU_PACKED
 
	tuas_ui_ª•⁄£
;

84 
uöt8_t
 
	mfun˘i⁄
;

85 
uöt8_t
 
	mª£rved
;

86 
uöt16_t
 
	mèsk_èg
;

87 
uöt64_t
 
	mlun
;

88 } 
	tQEMU_PACKED
 
	tuas_ui_èsk_mgmt
;

91 
uas_ui_hódî
 
	mhdr
;

93 
uas_ui_comm™d
 
	mcomm™d
;

94 
uas_ui_£n£
 
	m£n£
;

95 
uas_ui_èsk_mgmt
 
	mèsk
;

96 
uas_ui_ª•⁄£
 
	mª•⁄£
;

98 } 
	tQEMU_PACKED
 
	tuas_ui
;

102 
UASDevi˚
 
	tUASDevi˚
;

103 
UASReque°
 
	tUASReque°
;

104 
UASSètus
 
	tUASSètus
;

106 
	sUASDevi˚
 {

107 
USBDevi˚
 
	mdev
;

108 
SCSIBus
 
	mbus
;

109 
UASReque°
 *
	md©aö
;

110 
UASReque°
 *
	md©aout
;

111 
USBPackë
 *
	m°©us
;

112 
QEMUBH
 *
	m°©us_bh
;

113 
QTAILQ_HEAD
(, 
UASSètus
Ë
	mªsu…s
;

114 
QTAILQ_HEAD
(, 
UASReque°
Ë
	mªque°s
;

117 
	sUASReque°
 {

118 
uöt16_t
 
	mèg
;

119 
uöt64_t
 
	mlun
;

120 
UASDevi˚
 *
	muas
;

121 
SCSIDevi˚
 *
	mdev
;

122 
SCSIReque°
 *
	mªq
;

123 
USBPackë
 *
	md©a
;

124 
boﬁ
 
	md©a_async
;

125 
boﬁ
 
	ma˘ive
;

126 
boﬁ
 
	mcom∂ëe
;

127 
uöt32_t
 
	mbuf_off
;

128 
uöt32_t
 
	mbuf_size
;

129 
uöt32_t
 
	md©a_off
;

130 
uöt32_t
 
	md©a_size
;

131 
QTAILQ_ENTRY
(
UASReque°
Ë
	m√xt
;

134 
	sUASSètus
 {

135 
uas_ui
 
	m°©us
;

136 
uöt32_t
 
	mÀngth
;

137 
QTAILQ_ENTRY
(
UASSètus
Ë
	m√xt
;

143 
	mSTR_MANUFACTURER
 = 1,

144 
	mSTR_PRODUCT
,

145 
	mSTR_SERIALNUMBER
,

146 
	mSTR_CONFIG_HIGH
,

149 c⁄° 
USBDescSåögs
 
	gdesc_°rögs
 = {

150 [
STR_MANUFACTURER
] = "QEMU",

151 [
STR_PRODUCT
] = "USB Attached SCSI HBA",

152 [
STR_SERIALNUMBER
] = "27842",

153 [
STR_CONFIG_HIGH
] = "High speed config (usb 2.0)",

156 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_high
 = {

157 .
bI¡îÁ˚Numbî
 = 0,

158 .
	gbNumEndpoöts
 = 4,

159 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_MASS_STORAGE
,

160 .
	gbI¡îÁ˚SubCœss
 = 0x06,

161 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x62,

162 .
	gïs
 = (
USBDescEndpoöt
[]) {

164 .
bEndpoötAddªss
 = 
USB_DIR_OUT
 | 
UAS_PIPE_ID_COMMAND
,

165 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

166 .
	gwMaxPackëSize
 = 512,

167 .
	gexåa
 = (
uöt8_t
[]) {

170 
UAS_PIPE_ID_COMMAND
,

174 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
UAS_PIPE_ID_STATUS
,

175 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

176 .
	gwMaxPackëSize
 = 512,

177 .
	gexåa
 = (
uöt8_t
[]) {

180 
UAS_PIPE_ID_STATUS
,

184 .
	gbEndpoötAddªss
 = 
USB_DIR_IN
 | 
UAS_PIPE_ID_DATA_IN
,

185 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

186 .
	gwMaxPackëSize
 = 512,

187 .
	gexåa
 = (
uöt8_t
[]) {

190 
UAS_PIPE_ID_DATA_IN
,

194 .
	gbEndpoötAddªss
 = 
USB_DIR_OUT
 | 
UAS_PIPE_ID_DATA_OUT
,

195 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

196 .
	gwMaxPackëSize
 = 512,

197 .
	gexåa
 = (
uöt8_t
[]) {

200 
UAS_PIPE_ID_DATA_OUT
,

207 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_high
 = {

208 .
bcdUSB
 = 0x0200,

209 .
	gbMaxPackëSize0
 = 64,

210 .
	gbNumC⁄figuøti⁄s
 = 1,

211 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

213 .
bNumI¡îÁ˚s
 = 1,

214 .
	gbC⁄figuøti⁄VÆue
 = 1,

215 .
	giC⁄figuøti⁄
 = 
STR_CONFIG_HIGH
,

216 .
	gbmAâribuãs
 = 0xc0,

217 .
	gnif
 = 1,

218 .
	gifs
 = &
desc_iÁ˚_high
,

223 c⁄° 
USBDesc
 
	gdesc
 = {

224 .
id
 = {

225 .
idVíd‹
 = 0x46f4,

226 .
	gidProdu˘
 = 0x0003,

227 .
	gbcdDevi˚
 = 0,

228 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

229 .
	giProdu˘
 = 
STR_PRODUCT
,

230 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

232 .
	ghigh
 = &
desc_devi˚_high
,

233 .
	g°r
 = 
desc_°rögs
,

238 
UASSètus
 *
	$usb_uas_Æloc_°©us
(
uöt8_t
 
id
, 
uöt16_t
 
èg
)

240 
UASSètus
 *
°
 = 
	`g_√w0
(UASStatus, 1);

242 
°
->
°©us
.
hdr
.
id
 = id;

243 
°
->
°©us
.
hdr
.
èg
 = 
	`˝u_to_be16
(tag);

244 
°
->
Àngth
 = (
uas_ui_hódî
);

245  
°
;

246 
	}
}

248 
	$usb_uas_£nd_°©us_bh
(*
›aque
)

250 
UASDevi˚
 *
uas
 = 
›aque
;

251 
UASSètus
 *
°
 = 
	`QTAILQ_FIRST
(&
uas
->
ªsu…s
);

252 
USBPackë
 *
p
 = 
uas
->
°©us
;

254 
	`as£π
(
p
 !
NULL
);

255 
	`as£π
(
°
 !
NULL
);

257 
uas
->
°©us
 = 
NULL
;

258 
	`usb_∑ckë_c›y
(
p
, &
°
->
°©us
, st->
Àngth
);

259 
p
->
ªsu…
 = 
°
->
Àngth
;

260 
	`QTAILQ_REMOVE
(&
uas
->
ªsu…s
, 
°
, 
√xt
);

261 
	`g_‰ì
(
°
);

263 
	`usb_∑ckë_com∂ëe
(&
uas
->
dev
, 
p
);

264 
	}
}

266 
	$usb_uas_queue_°©us
(
UASDevi˚
 *
uas
, 
UASSètus
 *
°
, 
Àngth
)

268 
°
->
Àngth
 +=Üength;

269 
	`QTAILQ_INSERT_TAIL
(&
uas
->
ªsu…s
, 
°
, 
√xt
);

270 i‡(
uas
->
°©us
) {

275 
	`qemu_bh_scheduÀ
(
uas
->
°©us_bh
);

277 
USBEndpoöt
 *
ï
 = 
	`usb_ï_gë
(&
uas
->
dev
, 
USB_TOKEN_IN
,

278 
UAS_PIPE_ID_STATUS
);

279 
	`usb_wakeup
(
ï
);

281 
	}
}

283 
	$usb_uas_queue_ª•⁄£
(
UASDevi˚
 *
uas
, 
uöt16_t
 
èg
,

284 
uöt8_t
 
code
, 
uöt16_t
 
add_öfo
)

286 
UASSètus
 *
°
 = 
	`usb_uas_Æloc_°©us
(
UAS_UI_RESPONSE
, 
èg
);

288 
	`åa˚_usb_uas_ª•⁄£
(
uas
->
dev
.
addr
, 
èg
, 
code
);

289 
°
->
°©us
.
ª•⁄£
.
ª•⁄£_code
 = 
code
;

290 
°
->
°©us
.
ª•⁄£
.
add_ª•⁄£_öfo
 = 
	`˝u_to_be16
(
add_öfo
);

291 
	`usb_uas_queue_°©us
(
uas
, 
°
, (
uas_ui_ª•⁄£
));

292 
	}
}

294 
	$usb_uas_queue_£n£
(
UASReque°
 *
ªq
, 
uöt8_t
 
°©us
)

296 
UASSètus
 *
°
 = 
	`usb_uas_Æloc_°©us
(
UAS_UI_SENSE
, 
ªq
->
èg
);

297 
Àn
, 
¶í
 = 0;

299 
	`åa˚_usb_uas_£n£
(
ªq
->
uas
->
dev
.
addr
,Ñeq->
èg
, 
°©us
);

300 
°
->
°©us
.
£n£
.status = status;

301 
°
->
°©us
.
£n£
.
°©us_quÆifõr
 = 
	`˝u_to_be16
(0);

302 i‡(
°©us
 !
GOOD
) {

303 
¶í
 = 
	`scsi_ªq_gë_£n£
(
ªq
->ªq, 
°
->
°©us
.
£n£
.
£n£_d©a
,

304 (
°
->
°©us
.
£n£
.
£n£_d©a
));

305 
°
->
°©us
.
£n£
.
£n£_Àngth
 = 
	`˝u_to_be16
(
¶í
);

307 
Àn
 = (
uas_ui_£n£
Ë- (
°
->
°©us
.
£n£
.
£n£_d©a
Ë+ 
¶í
;

308 
	`usb_uas_queue_°©us
(
ªq
->
uas
, 
°
, 
Àn
);

309 
	}
}

311 
	$usb_uas_queue_ªad_ªady
(
UASReque°
 *
ªq
)

313 
UASSètus
 *
°
 = 
	`usb_uas_Æloc_°©us
(
UAS_UI_READ_READY
, 
ªq
->
èg
);

315 
	`åa˚_usb_uas_ªad_ªady
(
ªq
->
uas
->
dev
.
addr
,Ñeq->
èg
);

316 
	`usb_uas_queue_°©us
(
ªq
->
uas
, 
°
, 0);

317 
	}
}

319 
	$usb_uas_queue_wrôe_ªady
(
UASReque°
 *
ªq
)

321 
UASSètus
 *
°
 = 
	`usb_uas_Æloc_°©us
(
UAS_UI_WRITE_READY
, 
ªq
->
èg
);

323 
	`åa˚_usb_uas_wrôe_ªady
(
ªq
->
uas
->
dev
.
addr
,Ñeq->
èg
);

324 
	`usb_uas_queue_°©us
(
ªq
->
uas
, 
°
, 0);

325 
	}
}

329 
	$usb_uas_gë_lun
(
uöt64_t
 
lun64
)

331  (
lun64
 >> 48) & 0xff;

332 
	}
}

334 
SCSIDevi˚
 *
	$usb_uas_gë_dev
(
UASDevi˚
 *
uas
, 
uöt64_t
 
lun64
)

336 i‡((
lun64
 >> 56) != 0x00) {

337  
NULL
;

339  
	`scsi_devi˚_föd
(&
uas
->
bus
, 0, 0, 
	`usb_uas_gë_lun
(
lun64
));

340 
	}
}

342 
	$usb_uas_com∂ëe_d©a_∑ckë
(
UASReque°
 *
ªq
)

344 
USBPackë
 *
p
;

346 i‡(!
ªq
->
d©a_async
) {

349 
p
 = 
ªq
->
d©a
;

350 
ªq
->
d©a
 = 
NULL
;

351 
ªq
->
d©a_async
 = 
Ál£
;

352 
	`usb_∑ckë_com∂ëe
(&
ªq
->
uas
->
dev
, 
p
);

353 
	}
}

355 
	$usb_uas_c›y_d©a
(
UASReque°
 *
ªq
)

357 
uöt32_t
 
Àngth
;

359 
Àngth
 = 
	`MIN
(
ªq
->
buf_size
 -Ñeq->
buf_off
,

360 
ªq
->
d©a
->
iov
.
size
 -Ñeq->d©a->
ªsu…
);

361 
	`åa˚_usb_uas_x„r_d©a
(
ªq
->
uas
->
dev
.
addr
,Ñeq->
èg
, 
Àngth
,

362 
ªq
->
d©a
->
ªsu…
,Ñeq->d©a->
iov
.
size
,

363 
ªq
->
buf_off
,Ñeq->
buf_size
);

364 
	`usb_∑ckë_c›y
(
ªq
->
d©a
, 
	`scsi_ªq_gë_buf
‘eq->ªqË+Ñeq->
buf_off
,

365 
Àngth
);

366 
ªq
->
buf_off
 +
Àngth
;

367 
ªq
->
d©a_off
 +
Àngth
;

369 i‡(
ªq
->
d©a
->
ªsu…
 =ªq->d©a->
iov
.
size
) {

370 
	`usb_uas_com∂ëe_d©a_∑ckë
(
ªq
);

372 i‡(
ªq
->
buf_size
 &&Ñeq->
buf_off
 ==Ñeq->buf_size) {

373 
ªq
->
buf_off
 = 0;

374 
ªq
->
buf_size
 = 0;

375 
	`scsi_ªq_c⁄töue
(
ªq
->req);

377 
	}
}

379 
	$usb_uas_°¨t_√xt_å™s„r
(
UASDevi˚
 *
uas
)

381 
UASReque°
 *
ªq
;

383 
	`QTAILQ_FOREACH
(
ªq
, &
uas
->
ªque°s
, 
√xt
) {

384 i‡(
ªq
->
a˘ive
 ||Ñeq->
com∂ëe
) {

387 i‡(
ªq
->ªq->
cmd
.
mode
 =
SCSI_XFER_FROM_DEV
 && 
uas
->
d©aö
 =
NULL
) {

388 
uas
->
d©aö
 = 
ªq
;

389 
	`usb_uas_queue_ªad_ªady
(
ªq
);

390 
ªq
->
a˘ive
 = 
åue
;

393 i‡(
ªq
->ªq->
cmd
.
mode
 =
SCSI_XFER_TO_DEV
 && 
uas
->
d©aout
 =
NULL
) {

394 
uas
->
d©aout
 = 
ªq
;

395 
	`usb_uas_queue_wrôe_ªady
(
ªq
);

396 
ªq
->
a˘ive
 = 
åue
;

400 
	}
}

402 
UASReque°
 *
	$usb_uas_Æloc_ªque°
(
UASDevi˚
 *
uas
, 
uas_ui
 *
ui
)

404 
UASReque°
 *
ªq
;

406 
ªq
 = 
	`g_√w0
(
UASReque°
, 1);

407 
ªq
->
uas
 = uas;

408 
ªq
->
èg
 = 
	`be16_to_˝u
(
ui
->
hdr
.tag);

409 
ªq
->
lun
 = 
	`be64_to_˝u
(
ui
->
comm™d
.lun);

410 
ªq
->
dev
 = 
	`usb_uas_gë_dev
‘eq->
uas
,Ñeq->
lun
);

411  
ªq
;

412 
	}
}

414 
	$usb_uas_scsi_‰ì_ªque°
(
SCSIBus
 *
bus
, *
¥iv
)

416 
UASReque°
 *
ªq
 = 
¥iv
;

417 
UASDevi˚
 *
uas
 = 
ªq
->uas;

419 i‡(
ªq
 =
uas
->
d©aö
) {

420 
uas
->
d©aö
 = 
NULL
;

422 i‡(
ªq
 =
uas
->
d©aout
) {

423 
uas
->
d©aout
 = 
NULL
;

425 
	`QTAILQ_REMOVE
(&
uas
->
ªque°s
, 
ªq
, 
√xt
);

426 
	`g_‰ì
(
ªq
);

427 
	`usb_uas_°¨t_√xt_å™s„r
(
uas
);

428 
	}
}

430 
UASReque°
 *
	$usb_uas_föd_ªque°
(
UASDevi˚
 *
uas
, 
uöt16_t
 
èg
)

432 
UASReque°
 *
ªq
;

434 
	`QTAILQ_FOREACH
(
ªq
, &
uas
->
ªque°s
, 
√xt
) {

435 i‡(
ªq
->
èg
 ==Åag) {

436  
ªq
;

439  
NULL
;

440 
	}
}

442 
	$usb_uas_scsi_å™s„r_d©a
(
SCSIReque°
 *
r
, 
uöt32_t
 
Àn
)

444 
UASReque°
 *
ªq
 = 
r
->
hba_¥iv©e
;

446 
	`åa˚_usb_uas_scsi_d©a
(
ªq
->
uas
->
dev
.
addr
,Ñeq->
èg
, 
Àn
);

447 
ªq
->
buf_off
 = 0;

448 
ªq
->
buf_size
 = 
Àn
;

449 i‡(
ªq
->
d©a
) {

450 
	`usb_uas_c›y_d©a
(
ªq
);

452 
	`usb_uas_°¨t_√xt_å™s„r
(
ªq
->
uas
);

454 
	}
}

456 
	$usb_uas_scsi_comm™d_com∂ëe
(
SCSIReque°
 *
r
,

457 
uöt32_t
 
°©us
, 
size_t
 
ªsid
)

459 
UASReque°
 *
ªq
 = 
r
->
hba_¥iv©e
;

461 
	`åa˚_usb_uas_scsi_com∂ëe
(
ªq
->
uas
->
dev
.
addr
,Ñeq->
èg
, 
°©us
, 
ªsid
);

462 
ªq
->
com∂ëe
 = 
åue
;

463 i‡(
ªq
->
d©a
) {

464 
	`usb_uas_com∂ëe_d©a_∑ckë
(
ªq
);

466 
	`usb_uas_queue_£n£
(
ªq
, 
°©us
);

467 
	`scsi_ªq_uƒef
(
ªq
->req);

468 
	}
}

470 
	$usb_uas_scsi_ªque°_ˇn˚Œed
(
SCSIReque°
 *
r
)

472 
UASReque°
 *
ªq
 = 
r
->
hba_¥iv©e
;

475 
	`scsi_ªq_uƒef
(
ªq
->req);

476 
	}
}

478 c⁄° 
SCSIBusInfo
 
	gusb_uas_scsi_öfo
 = {

479 .
tcq
 = 
åue
,

480 .
	gmax_èrgë
 = 0,

481 .
	gmax_lun
 = 255,

483 .
	gå™s„r_d©a
 = 
usb_uas_scsi_å™s„r_d©a
,

484 .
	gcom∂ëe
 = 
usb_uas_scsi_comm™d_com∂ëe
,

485 .
	gˇn˚l
 = 
usb_uas_scsi_ªque°_ˇn˚Œed
,

486 .
	g‰ì_ªque°
 = 
usb_uas_scsi_‰ì_ªque°
,

491 
	$usb_uas_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

493 
UASDevi˚
 *
uas
 = 
	`DO_UPCAST
(UASDevi˚, 
dev
, dev);

494 
UASReque°
 *
ªq
, *
ƒeq
;

495 
UASSètus
 *
°
, *
n°
;

497 
	`åa˚_usb_uas_ª£t
(
dev
->
addr
);

498 
	`QTAILQ_FOREACH_SAFE
(
ªq
, &
uas
->
ªque°s
, 
√xt
, 
ƒeq
) {

499 
	`scsi_ªq_ˇn˚l
(
ªq
->req);

501 
	`QTAILQ_FOREACH_SAFE
(
°
, &
uas
->
ªsu…s
, 
√xt
, 
n°
) {

502 
	`QTAILQ_REMOVE
(&
uas
->
ªsu…s
, 
°
, 
√xt
);

503 
	`g_‰ì
(
°
);

505 
	}
}

507 
	$usb_uas_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

508 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

510 
ªt
;

512 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

513 i‡(
ªt
 >= 0) {

514  
ªt
;

516 
	`Ârötf
(
°dîr
, "%s: unh™dÀd c⁄åﬁÑeque°\n", 
__func__
);

517  
USB_RET_STALL
;

518 
	}
}

520 
	$usb_uas_ˇn˚l_io
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

522 
UASDevi˚
 *
uas
 = 
	`DO_UPCAST
(UASDevi˚, 
dev
, dev);

523 
UASReque°
 *
ªq
, *
ƒeq
;

525 i‡(
uas
->
°©us
 =
p
) {

526 
uas
->
°©us
 = 
NULL
;

527 
	`qemu_bh_ˇn˚l
(
uas
->
°©us_bh
);

530 
	`QTAILQ_FOREACH_SAFE
(
ªq
, &
uas
->
ªque°s
, 
√xt
, 
ƒeq
) {

531 i‡(
ªq
->
d©a
 =
p
) {

532 
ªq
->
d©a
 = 
NULL
;

536 
	`as£π
(!"canceled usbÖacketÇot found");

537 
	}
}

539 
	$usb_uas_comm™d
(
UASDevi˚
 *
uas
, 
uas_ui
 *
ui
)

541 
UASReque°
 *
ªq
;

542 
uöt32_t
 
Àn
;

544 
ªq
 = 
	`usb_uas_föd_ªque°
(
uas
, 
	`be16_to_˝u
(
ui
->
hdr
.
èg
));

545 i‡(
ªq
) {

546 
ovîœµed_èg
;

548 
ªq
 = 
	`usb_uas_Æloc_ªque°
(
uas
, 
ui
);

549 i‡(
ªq
->
dev
 =
NULL
) {

550 
bad_èrgë
;

553 
	`åa˚_usb_uas_comm™d
(
uas
->
dev
.
addr
, 
ªq
->
èg
,

554 
	`usb_uas_gë_lun
(
ªq
->
lun
),

555 
ªq
->
lun
 >> 32,Ñeq->lun & 0xffffffff);

556 
	`QTAILQ_INSERT_TAIL
(&
uas
->
ªque°s
, 
ªq
, 
√xt
);

557 
ªq
->ªq = 
	`scsi_ªq_√w
‘eq->
dev
,Ñeq->
èg
,

558 
	`usb_uas_gë_lun
(
ªq
->
lun
),

559 
ui
->
comm™d
.
cdb
, 
ªq
);

560 
Àn
 = 
	`scsi_ªq_íqueue
(
ªq
->req);

561 i‡(
Àn
) {

562 
ªq
->
d©a_size
 = 
Àn
;

563 
	`scsi_ªq_c⁄töue
(
ªq
->req);

567 
ovîœµed_èg
:

568 
	`usb_uas_queue_ª•⁄£
(
uas
, 
ªq
->
èg
, 
UAS_RC_OVERLAPPED_TAG
, 0);

571 
bad_èrgë
:

577 
	`usb_uas_queue_ª•⁄£
(
uas
, 
ªq
->
èg
, 
UAS_RC_INVALID_INFO_UNIT
, 0);

578 
	`g_‰ì
(
ªq
);

580 
	}
}

582 
	$usb_uas_èsk
(
UASDevi˚
 *
uas
, 
uas_ui
 *
ui
)

584 
uöt16_t
 
èg
 = 
	`be16_to_˝u
(
ui
->
hdr
.tag);

585 
uöt64_t
 
lun64
 = 
	`be64_to_˝u
(
ui
->
èsk
.
lun
);

586 
SCSIDevi˚
 *
dev
 = 
	`usb_uas_gë_dev
(
uas
, 
lun64
);

587 
lun
 = 
	`usb_uas_gë_lun
(
lun64
);

588 
UASReque°
 *
ªq
;

589 
uöt16_t
 
èsk_èg
;

591 
ªq
 = 
	`usb_uas_föd_ªque°
(
uas
, 
	`be16_to_˝u
(
ui
->
hdr
.
èg
));

592 i‡(
ªq
) {

593 
ovîœµed_èg
;

596 
ui
->
èsk
.
fun˘i⁄
) {

597 
UAS_TMF_ABORT_TASK
:

598 
èsk_èg
 = 
	`be16_to_˝u
(
ui
->
èsk
.task_tag);

599 
	`åa˚_usb_uas_tmf_ab‹t_èsk
(
uas
->
dev
.
addr
, 
èg
, 
èsk_èg
);

600 i‡(
dev
 =
NULL
) {

601 
bad_èrgë
;

603 i‡(
dev
->
lun
 !=Üun) {

604 
öc‹ª˘_lun
;

606 
ªq
 = 
	`usb_uas_föd_ªque°
(
uas
, 
èsk_èg
);

607 i‡(
ªq
 &&Ñeq->
dev
 == dev) {

608 
	`scsi_ªq_ˇn˚l
(
ªq
->req);

610 
	`usb_uas_queue_ª•⁄£
(
uas
, 
èg
, 
UAS_RC_TMF_COMPLETE
, 0);

613 
UAS_TMF_LOGICAL_UNIT_RESET
:

614 
	`åa˚_usb_uas_tmf_logiˇl_unô_ª£t
(
uas
->
dev
.
addr
, 
èg
, 
lun
);

615 i‡(
dev
 =
NULL
) {

616 
bad_èrgë
;

618 i‡(
dev
->
lun
 !=Üun) {

619 
öc‹ª˘_lun
;

621 
	`qdev_ª£t_Æl
(&
dev
->
qdev
);

622 
	`usb_uas_queue_ª•⁄£
(
uas
, 
èg
, 
UAS_RC_TMF_COMPLETE
, 0);

626 
	`åa˚_usb_uas_tmf_unsuµ‹ãd
(
uas
->
dev
.
addr
, 
èg
, 
ui
->
èsk
.
fun˘i⁄
);

627 
	`usb_uas_queue_ª•⁄£
(
uas
, 
èg
, 
UAS_RC_TMF_NOT_SUPPORTED
, 0);

632 
ovîœµed_èg
:

633 
	`usb_uas_queue_ª•⁄£
(
uas
, 
ªq
->
èg
, 
UAS_RC_OVERLAPPED_TAG
, 0);

636 
bad_èrgë
:

638 
	`usb_uas_queue_ª•⁄£
(
uas
, 
èg
, 
UAS_RC_INVALID_INFO_UNIT
, 0);

641 
öc‹ª˘_lun
:

642 
	`usb_uas_queue_ª•⁄£
(
uas
, 
èg
, 
UAS_RC_INCORRECT_LUN
, 0);

644 
	}
}

646 
	$usb_uas_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

648 
UASDevi˚
 *
uas
 = 
	`DO_UPCAST
(UASDevi˚, 
dev
, dev);

649 
uas_ui
 
ui
;

650 
UASSètus
 *
°
;

651 
UASReque°
 *
ªq
;

652 
Àngth
, 
ªt
 = 0;

654 
p
->
ï
->
ƒ
) {

655 
UAS_PIPE_ID_COMMAND
:

656 
Àngth
 = 
	`MIN
((
ui
), 
p
->
iov
.
size
);

657 
	`usb_∑ckë_c›y
(
p
, &
ui
, 
Àngth
);

658 
ui
.
hdr
.
id
) {

659 
UAS_UI_COMMAND
:

660 
	`usb_uas_comm™d
(
uas
, &
ui
);

661 
ªt
 = 
Àngth
;

663 
UAS_UI_TASK_MGMT
:

664 
	`usb_uas_èsk
(
uas
, &
ui
);

665 
ªt
 = 
Àngth
;

668 
	`Ârötf
(
°dîr
, "%s: unknown command ui: id 0x%x\n",

669 
__func__
, 
ui
.
hdr
.
id
);

670 
ªt
 = 
USB_RET_STALL
;

674 
UAS_PIPE_ID_STATUS
:

675 
°
 = 
	`QTAILQ_FIRST
(&
uas
->
ªsu…s
);

676 i‡(
°
 =
NULL
) {

677 
	`as£π
(
uas
->
°©us
 =
NULL
);

678 
uas
->
°©us
 = 
p
;

679 
ªt
 = 
USB_RET_ASYNC
;

682 
	`usb_∑ckë_c›y
(
p
, &
°
->
°©us
, st->
Àngth
);

683 
ªt
 = 
°
->
Àngth
;

684 
	`QTAILQ_REMOVE
(&
uas
->
ªsu…s
, 
°
, 
√xt
);

685 
	`g_‰ì
(
°
);

687 
UAS_PIPE_ID_DATA_IN
:

688 
UAS_PIPE_ID_DATA_OUT
:

689 
ªq
 = (
p
->
ï
->
ƒ
 =
UAS_PIPE_ID_DATA_IN
Ë? 
uas
->
d©aö
 : uas->
d©aout
;

690 i‡(
ªq
 =
NULL
) {

691 
	`Ârötf
(
°dîr
, "%s:ÇÿöÊighàªque°\n", 
__func__
);

692 
ªt
 = 
USB_RET_STALL
;

695 
	`scsi_ªq_ªf
(
ªq
->req);

696 
ªq
->
d©a
 = 
p
;

697 
	`usb_uas_c›y_d©a
(
ªq
);

698 i‡(
p
->
ªsu…
 =p->
iov
.
size
 || 
ªq
->
com∂ëe
) {

699 
ªq
->
d©a
 = 
NULL
;

700 
ªt
 = 
p
->
ªsu…
;

702 
ªq
->
d©a_async
 = 
åue
;

703 
ªt
 = 
USB_RET_ASYNC
;

705 
	`scsi_ªq_uƒef
(
ªq
->req);

706 
	`usb_uas_°¨t_√xt_å™s„r
(
uas
);

709 
	`Ârötf
(
°dîr
, "%s: invÆidÉndpoöà%d\n", 
__func__
, 
p
->
ï
->
ƒ
);

710 
ªt
 = 
USB_RET_STALL
;

713  
ªt
;

714 
	}
}

716 
	$usb_uas_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

718 
UASDevi˚
 *
uas
 = 
	`DO_UPCAST
(UASDevi˚, 
dev
, dev);

720 
	`qemu_bh_dñëe
(
uas
->
°©us_bh
);

721 
	}
}

723 
	$usb_uas_öô
(
USBDevi˚
 *
dev
)

725 
UASDevi˚
 *
uas
 = 
	`DO_UPCAST
(UASDevi˚, 
dev
, dev);

727 
	`usb_desc_¸óã_£rül
(
dev
);

728 
	`usb_desc_öô
(
dev
);

730 
	`QTAILQ_INIT
(&
uas
->
ªsu…s
);

731 
	`QTAILQ_INIT
(&
uas
->
ªque°s
);

732 
uas
->
°©us_bh
 = 
	`qemu_bh_√w
(
usb_uas_£nd_°©us_bh
, uas);

734 
	`scsi_bus_√w
(&
uas
->
bus
, &uas->
dev
.
qdev
, &
usb_uas_scsi_öfo
);

737 
	}
}

739 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_uas
 = {

740 .
«me
 = "usb-uas",

741 .
	gunmigøèbÀ
 = 1,

742 .
	gfõlds
 = (
VMSèãFõld
[]) {

743 
VMSTATE_USB_DEVICE
(
dev
, 
UASDevi˚
),

744 
VMSTATE_END_OF_LIST
()

748 
	$usb_uas_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

750 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

751 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

753 
uc
->
öô
 = 
usb_uas_öô
;

754 
uc
->
¥odu˘_desc
 = 
desc_°rögs
[
STR_PRODUCT
];

755 
uc
->
usb_desc
 = &
desc
;

756 
uc
->
ˇn˚l_∑ckë
 = 
usb_uas_ˇn˚l_io
;

757 
uc
->
h™dÀ_©èch
 = 
usb_desc_©èch
;

758 
uc
->
h™dÀ_ª£t
 = 
usb_uas_h™dÀ_ª£t
;

759 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_uas_h™dÀ_c⁄åﬁ
;

760 
uc
->
h™dÀ_d©a
 = 
usb_uas_h™dÀ_d©a
;

761 
uc
->
h™dÀ_de°roy
 = 
usb_uas_h™dÀ_de°roy
;

762 
dc
->
fw_«me
 = "storage";

763 
dc
->
vmsd
 = &
vm°©e_usb_uas
;

764 
	}
}

766 
Ty≥Info
 
	guas_öfo
 = {

767 .
«me
 = "usb-uas",

768 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

769 .
	gö°™˚_size
 = (
UASDevi˚
),

770 .
	g˛ass_öô
 = 
usb_uas_˛ass_öô‚
,

773 
	$usb_uas_ªgi°î_ty≥s
()

775 
	`ty≥_ªgi°î_°©ic
(&
uas_öfo
);

776 
	}
}

778 
ty≥_öô
(
usb_uas_ªgi°î_ty≥s
)

	@dev-wacom.c

28 
	~"hw/hw.h
"

29 
	~"c⁄sﬁe.h
"

30 
	~"hw/usb.h
"

31 
	~"hw/usb/desc.h
"

34 
	#WACOM_GET_REPORT
 0x2101

	)

35 
	#WACOM_SET_REPORT
 0x2109

	)

38 
	#HID_GET_REPORT
 0xa101

	)

39 
	#HID_GET_IDLE
 0xa102

	)

40 
	#HID_GET_PROTOCOL
 0xa103

	)

41 
	#HID_SET_IDLE
 0x210a

	)

42 
	#HID_SET_PROTOCOL
 0x210b

	)

44 
	sUSBWacomSèã
 {

45 
USBDevi˚
 
	mdev
;

46 
QEMUPutMou£E¡ry
 *
	meh_íåy
;

47 
	mdx
, 
	mdy
, 
	mdz
, 
	mbuâ⁄s_°©e
;

48 
	mx
, 
	my
;

49 
	mmou£_gøbbed
;

51 
	mWACOM_MODE_HID
 = 1,

52 
	mWACOM_MODE_WACOM
 = 2,

53 } 
	mmode
;

54 
uöt8_t
 
	midÀ
;

55 
	mch™ged
;

56 } 
	tUSBWacomSèã
;

59 
	mSTR_MANUFACTURER
 = 1,

60 
	mSTR_PRODUCT
,

61 
	mSTR_SERIALNUMBER
,

64 c⁄° 
USBDescSåögs
 
	gdesc_°rögs
 = {

65 [
STR_MANUFACTURER
] = "QEMU",

66 [
STR_PRODUCT
] = "Wacom PenPartner",

67 [
STR_SERIALNUMBER
] = "1",

70 c⁄° 
USBDescIÁ˚
 
	gdesc_iÁ˚_wacom
 = {

71 .
bI¡îÁ˚Numbî
 = 0,

72 .
	gbNumEndpoöts
 = 1,

73 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_HID
,

74 .
	gbI¡îÁ˚SubCœss
 = 0x01,

75 .
	gbI¡îÁ˚PrŸocﬁ
 = 0x02,

76 .
	gndesc
 = 1,

77 .
	gdescs
 = (
USBDescOthî
[]) {

80 .
d©a
 = (
uöt8_t
[]) {

91 .
	gïs
 = (
USBDescEndpoöt
[]) {

93 .
bEndpoötAddªss
 = 
USB_DIR_IN
 | 0x01,

94 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_INT
,

95 .
	gwMaxPackëSize
 = 8,

96 .
	gbI¡îvÆ
 = 0x0a,

101 c⁄° 
USBDescDevi˚
 
	gdesc_devi˚_wacom
 = {

102 .
bcdUSB
 = 0x0110,

103 .
	gbMaxPackëSize0
 = 8,

104 .
	gbNumC⁄figuøti⁄s
 = 1,

105 .
	gc⁄fs
 = (
USBDescC⁄fig
[]) {

107 .
bNumI¡îÁ˚s
 = 1,

108 .
	gbC⁄figuøti⁄VÆue
 = 1,

109 .
	gbmAâribuãs
 = 0x80,

110 .
	gbMaxPowî
 = 40,

111 .
	gnif
 = 1,

112 .
	gifs
 = &
desc_iÁ˚_wacom
,

117 c⁄° 
USBDesc
 
	gdesc_wacom
 = {

118 .
id
 = {

119 .
idVíd‹
 = 0x056a,

120 .
	gidProdu˘
 = 0x0000,

121 .
	gbcdDevi˚
 = 0x4210,

122 .
	giM™uÁ˘uªr
 = 
STR_MANUFACTURER
,

123 .
	giProdu˘
 = 
STR_PRODUCT
,

124 .
	giSîülNumbî
 = 
STR_SERIALNUMBER
,

126 .
	gfuŒ
 = &
desc_devi˚_wacom
,

127 .
	g°r
 = 
desc_°rögs
,

130 
	$usb_mou£_evít
(*
›aque
,

131 
dx1
, 
dy1
, 
dz1
, 
buâ⁄s_°©e
)

133 
USBWacomSèã
 *
s
 = 
›aque
;

135 
s
->
dx
 +
dx1
;

136 
s
->
dy
 +
dy1
;

137 
s
->
dz
 +
dz1
;

138 
s
->
buâ⁄s_°©e
 = buttons_state;

139 
s
->
ch™ged
 = 1;

140 
	}
}

142 
	$usb_wacom_evít
(*
›aque
,

143 
x
, 
y
, 
dz
, 
buâ⁄s_°©e
)

145 
USBWacomSèã
 *
s
 = 
›aque
;

148 
s
->
x
 = (x * 5040 / 0x7FFF);

149 
s
->
y
 = (y * 3780 / 0x7FFF);

150 
s
->
dz
 += dz;

151 
s
->
buâ⁄s_°©e
 = buttons_state;

152 
s
->
ch™ged
 = 1;

153 
	}
}

155 
ölöe
 
	$öt_˛amp
(
vÆ
, 
vmö
, 
vmax
)

157 i‡(
vÆ
 < 
vmö
)

158  
vmö
;

159 i‡(
vÆ
 > 
vmax
)

160  
vmax
;

162  
vÆ
;

163 
	}
}

165 
	$usb_mou£_pﬁl
(
USBWacomSèã
 *
s
, 
uöt8_t
 *
buf
, 
Àn
)

167 
dx
, 
dy
, 
dz
, 
b
, 
l
;

169 i‡(!
s
->
mou£_gøbbed
) {

170 
s
->
eh_íåy
 = 
	`qemu_add_mou£_evít_h™dÀr
(
usb_mou£_evít
, s, 0,

172 
	`qemu_a˘iv©e_mou£_evít_h™dÀr
(
s
->
eh_íåy
);

173 
s
->
mou£_gøbbed
 = 1;

176 
dx
 = 
	`öt_˛amp
(
s
->dx, -128, 127);

177 
dy
 = 
	`öt_˛amp
(
s
->dy, -128, 127);

178 
dz
 = 
	`öt_˛amp
(
s
->dz, -128, 127);

180 
s
->
dx
 -= dx;

181 
s
->
dy
 -= dy;

182 
s
->
dz
 -= dz;

184 
b
 = 0;

185 i‡(
s
->
buâ⁄s_°©e
 & 
MOUSE_EVENT_LBUTTON
)

186 
b
 |= 0x01;

187 i‡(
s
->
buâ⁄s_°©e
 & 
MOUSE_EVENT_RBUTTON
)

188 
b
 |= 0x02;

189 i‡(
s
->
buâ⁄s_°©e
 & 
MOUSE_EVENT_MBUTTON
)

190 
b
 |= 0x04;

192 
buf
[0] = 
b
;

193 
buf
[1] = 
dx
;

194 
buf
[2] = 
dy
;

195 
l
 = 3;

196 i‡(
Àn
 >= 4) {

197 
buf
[3] = 
dz
;

198 
l
 = 4;

200  
l
;

201 
	}
}

203 
	$usb_wacom_pﬁl
(
USBWacomSèã
 *
s
, 
uöt8_t
 *
buf
, 
Àn
)

205 
b
;

207 i‡(!
s
->
mou£_gøbbed
) {

208 
s
->
eh_íåy
 = 
	`qemu_add_mou£_evít_h™dÀr
(
usb_wacom_evít
, s, 1,

210 
	`qemu_a˘iv©e_mou£_evít_h™dÀr
(
s
->
eh_íåy
);

211 
s
->
mou£_gøbbed
 = 1;

214 
b
 = 0;

215 i‡(
s
->
buâ⁄s_°©e
 & 
MOUSE_EVENT_LBUTTON
)

216 
b
 |= 0x01;

217 i‡(
s
->
buâ⁄s_°©e
 & 
MOUSE_EVENT_RBUTTON
)

218 
b
 |= 0x40;

219 i‡(
s
->
buâ⁄s_°©e
 & 
MOUSE_EVENT_MBUTTON
)

220 
b
 |= 0x20;

222 i‡(
Àn
 < 7)

225 
buf
[0] = 
s
->
mode
;

226 
buf
[5] = 0x00 | (
b
 & 0xf0);

227 
buf
[1] = 
s
->
x
 & 0xff;

228 
buf
[2] = 
s
->
x
 >> 8;

229 
buf
[3] = 
s
->
y
 & 0xff;

230 
buf
[4] = 
s
->
y
 >> 8;

231 i‡(
b
 & 0x3f) {

232 
buf
[6] = 0;

234 
buf
[6] = () -127;

238 
	}
}

240 
	$usb_wacom_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

242 
USBWacomSèã
 *
s
 = (USBWacomSèã *Ë
dev
;

244 
s
->
dx
 = 0;

245 
s
->
dy
 = 0;

246 
s
->
dz
 = 0;

247 
s
->
x
 = 0;

248 
s
->
y
 = 0;

249 
s
->
buâ⁄s_°©e
 = 0;

250 
s
->
mode
 = 
WACOM_MODE_HID
;

251 
	}
}

253 
	$usb_wacom_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

254 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

256 
USBWacomSèã
 *
s
 = (USBWacomSèã *Ë
dev
;

257 
ªt
;

259 
ªt
 = 
	`usb_desc_h™dÀ_c⁄åﬁ
(
dev
, 
p
, 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
d©a
);

260 i‡(
ªt
 >= 0) {

261  
ªt
;

264 
ªt
 = 0;

265 
ªque°
) {

266 
WACOM_SET_REPORT
:

267 i‡(
s
->
mou£_gøbbed
) {

268 
	`qemu_ªmove_mou£_evít_h™dÀr
(
s
->
eh_íåy
);

269 
s
->
mou£_gøbbed
 = 0;

271 
s
->
mode
 = 
d©a
[0];

272 
ªt
 = 0;

274 
WACOM_GET_REPORT
:

275 
d©a
[0] = 0;

276 
d©a
[1] = 
s
->
mode
;

277 
ªt
 = 2;

280 
HID_GET_REPORT
:

281 i‡(
s
->
mode
 =
WACOM_MODE_HID
)

282 
ªt
 = 
	`usb_mou£_pﬁl
(
s
, 
d©a
, 
Àngth
);

283 i‡(
s
->
mode
 =
WACOM_MODE_WACOM
)

284 
ªt
 = 
	`usb_wacom_pﬁl
(
s
, 
d©a
, 
Àngth
);

286 
HID_GET_IDLE
:

287 
ªt
 = 1;

288 
d©a
[0] = 
s
->
idÀ
;

290 
HID_SET_IDLE
:

291 
s
->
idÀ
 = (
uöt8_t
Ë(
vÆue
 >> 8);

292 
ªt
 = 0;

295 
ªt
 = 
USB_RET_STALL
;

298  
ªt
;

299 
	}
}

301 
	$usb_wacom_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

303 
USBWacomSèã
 *
s
 = (USBWacomSèã *Ë
dev
;

304 
uöt8_t
 
buf
[
p
->
iov
.
size
];

305 
ªt
 = 0;

307 
p
->
pid
) {

308 
USB_TOKEN_IN
:

309 i‡(
p
->
ï
->
ƒ
 == 1) {

310 i‡(!(
s
->
ch™ged
 || s->
idÀ
))

311  
USB_RET_NAK
;

312 
s
->
ch™ged
 = 0;

313 i‡(
s
->
mode
 =
WACOM_MODE_HID
)

314 
ªt
 = 
	`usb_mou£_pﬁl
(
s
, 
buf
, 
p
->
iov
.
size
);

315 i‡(
s
->
mode
 =
WACOM_MODE_WACOM
)

316 
ªt
 = 
	`usb_wacom_pﬁl
(
s
, 
buf
, 
p
->
iov
.
size
);

317 
	`usb_∑ckë_c›y
(
p
, 
buf
, 
ªt
);

321 
USB_TOKEN_OUT
:

323 
ªt
 = 
USB_RET_STALL
;

326  
ªt
;

327 
	}
}

329 
	$usb_wacom_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

331 
USBWacomSèã
 *
s
 = (USBWacomSèã *Ë
dev
;

333 i‡(
s
->
mou£_gøbbed
) {

334 
	`qemu_ªmove_mou£_evít_h™dÀr
(
s
->
eh_íåy
);

335 
s
->
mou£_gøbbed
 = 0;

337 
	}
}

339 
	$usb_wacom_öô‚
(
USBDevi˚
 *
dev
)

341 
USBWacomSèã
 *
s
 = 
	`DO_UPCAST
(USBWacomSèã, 
dev
, dev);

342 
	`usb_desc_¸óã_£rül
(
dev
);

343 
	`usb_desc_öô
(
dev
);

344 
s
->
ch™ged
 = 1;

346 
	}
}

348 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_wacom
 = {

349 .
«me
 = "usb-wacom",

350 .
	gunmigøèbÀ
 = 1,

353 
	$usb_wacom_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

355 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

356 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

358 
uc
->
¥odu˘_desc
 = "QEMU PenPartner Tablet";

359 
uc
->
usb_desc
 = &
desc_wacom
;

360 
uc
->
öô
 = 
usb_wacom_öô‚
;

361 
uc
->
h™dÀ_ª£t
 = 
usb_wacom_h™dÀ_ª£t
;

362 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_wacom_h™dÀ_c⁄åﬁ
;

363 
uc
->
h™dÀ_d©a
 = 
usb_wacom_h™dÀ_d©a
;

364 
uc
->
h™dÀ_de°roy
 = 
usb_wacom_h™dÀ_de°roy
;

365 
dc
->
desc
 = "QEMU PenPartner Tablet";

366 
dc
->
vmsd
 = &
vm°©e_usb_wacom
;

367 
	}
}

369 
Ty≥Info
 
	gwacom_öfo
 = {

370 .
«me
 = "usb-wacom-tablet",

371 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

372 .
	gö°™˚_size
 = (
USBWacomSèã
),

373 .
	g˛ass_öô
 = 
usb_wacom_˛ass_öô
,

376 
	$usb_wacom_ªgi°î_ty≥s
()

378 
	`ty≥_ªgi°î_°©ic
(&
wacom_öfo
);

379 
	`usb_Àgacy_ªgi°î
("usb-wacom-èbÀt", "wacom-èbÀt", 
NULL
);

380 
	}
}

382 
ty≥_öô
(
usb_wacom_ªgi°î_ty≥s
)

	@hcd-ehci.c

25 
	~"hw/hw.h
"

26 
	~"qemu-timî.h
"

27 
	~"hw/usb.h
"

28 
	~"hw/pci.h
"

29 
	~"m⁄ô‹.h
"

30 
	~"åa˚.h
"

31 
	~"dma.h
"

33 
	#EHCI_DEBUG
 0

	)

35 #i‡
EHCI_DEBUG


36 
	#DPRINTF
 
¥ötf


	)

38 
	#DPRINTF
(...)

	)

42 
	#USB_RET_PROCERR
 (-99)

	)

44 
	#MMIO_SIZE
 0x1000

	)

47 
	#CAPREGBASE
 0x0000

	)

48 
	#CAPLENGTH
 
CAPREGBASE
 + 0x0000

49 
	#HCIVERSION
 
CAPREGBASE
 + 0x0002

50 
	#HCSPARAMS
 
CAPREGBASE
 + 0x0004

51 
	#HCCPARAMS
 
CAPREGBASE
 + 0x0008

52 
	#EECP
 
HCCPARAMS
 + 1

	)

53 
	#HCSPPORTROUTE1
 
CAPREGBASE
 + 0x000c

	)

54 
	#HCSPPORTROUTE2
 
CAPREGBASE
 + 0x0010

	)

56 
	#OPREGBASE
 0x0020

57 

	)

58 
	#USBCMD
 
OPREGBASE
 + 0x0000

	)

59 
	#USBCMD_RUNSTOP
 (1 << 0)

60 
	#USBCMD_HCRESET
 (1 << 1)

61 
	#USBCMD_FLS
 (3 << 2)

62 
	#USBCMD_FLS_SH
 2

63 
	#USBCMD_PSE
 (1 << 4)

64 
	#USBCMD_ASE
 (1 << 5)

65 
	#USBCMD_IAAD
 (1 << 6)

66 
	#USBCMD_LHCR
 (1 << 7)

67 
	#USBCMD_ASPMC
 (3 << 8)

68 
	#USBCMD_ASPME
 (1 << 11)

69 
	#USBCMD_ITC
 (0x7f << 16)

70 
	#USBCMD_ITC_SH
 16

71 

	)

72 
	#USBSTS
 
OPREGBASE
 + 0x0004

	)

73 
	#USBSTS_RO_MASK
 0x0000003f

	)

74 
	#USBSTS_INT
 (1 << 0)

75 
	#USBSTS_ERRINT
 (1 << 1)

76 
	#USBSTS_PCD
 (1 << 2)

77 
	#USBSTS_FLR
 (1 << 3)

78 
	#USBSTS_HSE
 (1 << 4)

79 
	#USBSTS_IAA
 (1 << 5)

80 
	#USBSTS_HALT
 (1 << 12)

81 
	#USBSTS_REC
 (1 << 13)

82 
	#USBSTS_PSS
 (1 << 14)

83 
	#USBSTS_ASS
 (1 << 15)

84 

	)

89 
	#USBINTR
 
OPREGBASE
 + 0x0008

	)

90 
	#USBINTR_MASK
 0x0000003f

	)

92 
	#FRINDEX
 
OPREGBASE
 + 0x000c

	)

93 
	#CTRLDSSEGMENT
 
OPREGBASE
 + 0x0010

	)

94 
	#PERIODICLISTBASE
 
OPREGBASE
 + 0x0014

	)

95 
	#ASYNCLISTADDR
 
OPREGBASE
 + 0x0018

	)

96 
	#ASYNCLISTADDR_MASK
 0xfffff„0

	)

98 
	#CONFIGFLAG
 
OPREGBASE
 + 0x0040

	)

100 
	#PORTSC
 (
OPREGBASE
 + 0x0044)

	)

101 
	#PORTSC_BEGIN
 
PORTSC


	)

102 
	#PORTSC_END
 (
PORTSC
 + 4 * 
NB_PORTS
)

	)

107 
	#PORTSC_RO_MASK
 0x007001c0

	)

108 
	#PORTSC_RWC_MASK
 0x0000002a

	)

109 
	#PORTSC_WKOC_E
 (1 << 22)

110 
	#PORTSC_WKDS_E
 (1 << 21)

111 
	#PORTSC_WKCN_E
 (1 << 20)

112 
	#PORTSC_PTC
 (15 << 16)

113 
	#PORTSC_PTC_SH
 16

114 
	#PORTSC_PIC
 (3 << 14)

115 
	#PORTSC_PIC_SH
 14

116 
	#PORTSC_POWNER
 (1 << 13)

117 
	#PORTSC_PPOWER
 (1 << 12)

118 
	#PORTSC_LINESTAT
 (3 << 10)

119 
	#PORTSC_LINESTAT_SH
 10

120 
	#PORTSC_PRESET
 (1 << 8)

121 
	#PORTSC_SUSPEND
 (1 << 7)

122 
	#PORTSC_FPRES
 (1 << 6)

123 
	#PORTSC_OCC
 (1 << 5)

124 
	#PORTSC_OCA
 (1 << 4)

125 
	#PORTSC_PEDC
 (1 << 3)

126 
	#PORTSC_PED
 (1 << 2)

127 
	#PORTSC_CSC
 (1 << 1)

128 
	#PORTSC_CONNECT
 (1 << 0)

129 

	)

130 
	#FRAME_TIMER_FREQ
 1000

	)

131 
	#FRAME_TIMER_NS
 (1000000000 / 
FRAME_TIMER_FREQ
)

	)

133 
	#NB_MAXINTRATE
 8

134 
	#NB_PORTS
 6

135 
	#BUFF_SIZE
 5*4096

136 
	#MAX_QH
 100

137 

	)

141 
	mEST_INACTIVE
 = 1000,

142 
	mEST_ACTIVE
,

143 
	mEST_EXECUTING
,

144 
	mEST_SLEEPING
,

147 
	mEST_WAITLISTHEAD
,

148 
	mEST_FETCHENTRY
,

149 
	mEST_FETCHQH
,

150 
	mEST_FETCHITD
,

151 
	mEST_FETCHSITD
,

152 
	mEST_ADVANCEQUEUE
,

153 
	mEST_FETCHQTD
,

154 
	mEST_EXECUTE
,

155 
	mEST_WRITEBACK
,

156 
	mEST_HORIZONTALQH


157 } 
	tEHCI_STATES
;

160 
	#NLPTR_GET
(
x
Ë((xË& 0xfffff„0)

	)

161 
	#NLPTR_TYPE_GET
(
x
Ë(((xË>> 1Ë& 3)

	)

162 
	#NLPTR_TBIT
(
x
) ((x) & 1)

163 

	)

165 
	#NLPTR_TYPE_ITD
 0

166 
	#NLPTR_TYPE_QH
 1

167 
	#NLPTR_TYPE_STITD
 2

168 
	#NLPTR_TYPE_FSTN
 3

169 

	)

173 
	sEHCIôd
 {

174 
uöt32_t
 
	m√xt
;

176 
uöt32_t
 
	må™ß˘
[8];

177 
	#ITD_XACT_ACTIVE
 (1 << 31)

	)

178 
	#ITD_XACT_DBERROR
 (1 << 30)

	)

179 
	#ITD_XACT_BABBLE
 (1 << 29)

	)

180 
	#ITD_XACT_XACTERR
 (1 << 28)

	)

181 
	#ITD_XACT_LENGTH_MASK
 0x0fff0000

	)

182 
	#ITD_XACT_LENGTH_SH
 16

	)

183 
	#ITD_XACT_IOC
 (1 << 15)

	)

184 
	#ITD_XACT_PGSEL_MASK
 0x00007000

	)

185 
	#ITD_XACT_PGSEL_SH
 12

	)

186 
	#ITD_XACT_OFFSET_MASK
 0x00000fff

	)

188 
uöt32_t
 
	mbuÂå
[7];

189 
	#ITD_BUFPTR_MASK
 0xfffff000

	)

190 
	#ITD_BUFPTR_SH
 12

	)

191 
	#ITD_BUFPTR_EP_MASK
 0x00000f00

	)

192 
	#ITD_BUFPTR_EP_SH
 8

	)

193 
	#ITD_BUFPTR_DEVADDR_MASK
 0x0000007f

	)

194 
	#ITD_BUFPTR_DEVADDR_SH
 0

	)

195 
	#ITD_BUFPTR_DIRECTION
 (1 << 11)

	)

196 
	#ITD_BUFPTR_MAXPKT_MASK
 0x000007ff

	)

197 
	#ITD_BUFPTR_MAXPKT_SH
 0

	)

198 
	#ITD_BUFPTR_MULT_MASK
 0x00000003

	)

199 
	#ITD_BUFPTR_MULT_SH
 0

	)

200 } 
	tEHCIôd
;

204 
	sEHCIsôd
 {

205 
uöt32_t
 
	m√xt
;

206 
uöt32_t
 
	mïch¨
;

207 
	#SITD_EPCHAR_IO
 (1 << 31)

	)

208 
	#SITD_EPCHAR_PORTNUM_MASK
 0x7f000000

	)

209 
	#SITD_EPCHAR_PORTNUM_SH
 24

	)

210 
	#SITD_EPCHAR_HUBADD_MASK
 0x007f0000

	)

211 
	#SITD_EPCHAR_HUBADDR_SH
 16

	)

212 
	#SITD_EPCHAR_EPNUM_MASK
 0x00000f00

	)

213 
	#SITD_EPCHAR_EPNUM_SH
 8

	)

214 
	#SITD_EPCHAR_DEVADDR_MASK
 0x0000007f

	)

216 
uöt32_t
 
	mu‰ame
;

217 
	#SITD_UFRAME_CMASK_MASK
 0x0000ff00

	)

218 
	#SITD_UFRAME_CMASK_SH
 8

	)

219 
	#SITD_UFRAME_SMASK_MASK
 0x000000ff

	)

221 
uöt32_t
 
	mªsu…s
;

222 
	#SITD_RESULTS_IOC
 (1 << 31)

	)

223 
	#SITD_RESULTS_PGSEL
 (1 << 30)

	)

224 
	#SITD_RESULTS_TBYTES_MASK
 0x03ff0000

	)

225 
	#SITD_RESULTS_TYBYTES_SH
 16

	)

226 
	#SITD_RESULTS_CPROGMASK_MASK
 0x0000ff00

	)

227 
	#SITD_RESULTS_CPROGMASK_SH
 8

	)

228 
	#SITD_RESULTS_ACTIVE
 (1 << 7)

	)

229 
	#SITD_RESULTS_ERR
 (1 << 6)

	)

230 
	#SITD_RESULTS_DBERR
 (1 << 5)

	)

231 
	#SITD_RESULTS_BABBLE
 (1 << 4)

	)

232 
	#SITD_RESULTS_XACTERR
 (1 << 3)

	)

233 
	#SITD_RESULTS_MISSEDUF
 (1 << 2)

	)

234 
	#SITD_RESULTS_SPLITXSTATE
 (1 << 1)

	)

236 
uöt32_t
 
	mbuÂå
[2];

237 
	#SITD_BUFPTR_MASK
 0xfffff000

	)

238 
	#SITD_BUFPTR_CURROFF_MASK
 0x00000fff

	)

239 
	#SITD_BUFPTR_TPOS_MASK
 0x00000018

	)

240 
	#SITD_BUFPTR_TPOS_SH
 3

	)

241 
	#SITD_BUFPTR_TCNT_MASK
 0x00000007

	)

243 
uöt32_t
 
	mback±r
;

244 } 
	tEHCIsôd
;

248 
	sEHCIqtd
 {

249 
uöt32_t
 
	m√xt
;

250 
uöt32_t
 
	mÆäext
;

251 
uöt32_t
 
	mtokí
;

252 
	#QTD_TOKEN_DTOGGLE
 (1 << 31)

	)

253 
	#QTD_TOKEN_TBYTES_MASK
 0x7fff0000

	)

254 
	#QTD_TOKEN_TBYTES_SH
 16

	)

255 
	#QTD_TOKEN_IOC
 (1 << 15)

	)

256 
	#QTD_TOKEN_CPAGE_MASK
 0x00007000

	)

257 
	#QTD_TOKEN_CPAGE_SH
 12

	)

258 
	#QTD_TOKEN_CERR_MASK
 0x00000c00

	)

259 
	#QTD_TOKEN_CERR_SH
 10

	)

260 
	#QTD_TOKEN_PID_MASK
 0x00000300

	)

261 
	#QTD_TOKEN_PID_SH
 8

	)

262 
	#QTD_TOKEN_ACTIVE
 (1 << 7)

	)

263 
	#QTD_TOKEN_HALT
 (1 << 6)

	)

264 
	#QTD_TOKEN_DBERR
 (1 << 5)

	)

265 
	#QTD_TOKEN_BABBLE
 (1 << 4)

	)

266 
	#QTD_TOKEN_XACTERR
 (1 << 3)

	)

267 
	#QTD_TOKEN_MISSEDUF
 (1 << 2)

	)

268 
	#QTD_TOKEN_SPLITXSTATE
 (1 << 1)

	)

269 
	#QTD_TOKEN_PING
 (1 << 0)

	)

271 
uöt32_t
 
	mbuÂå
[5];

272 
	#QTD_BUFPTR_MASK
 0xfffff000

	)

273 
	#QTD_BUFPTR_SH
 12

	)

274 } 
	tEHCIqtd
;

278 
	sEHCIqh
 {

279 
uöt32_t
 
	m√xt
;

282 
uöt32_t
 
	mïch¨
;

283 
	#QH_EPCHAR_RL_MASK
 0xf0000000

	)

284 
	#QH_EPCHAR_RL_SH
 28

	)

285 
	#QH_EPCHAR_C
 (1 << 27)

	)

286 
	#QH_EPCHAR_MPLEN_MASK
 0x07FF0000

	)

287 
	#QH_EPCHAR_MPLEN_SH
 16

	)

288 
	#QH_EPCHAR_H
 (1 << 15)

	)

289 
	#QH_EPCHAR_DTC
 (1 << 14)

	)

290 
	#QH_EPCHAR_EPS_MASK
 0x00003000

	)

291 
	#QH_EPCHAR_EPS_SH
 12

	)

292 
	#EHCI_QH_EPS_FULL
 0

	)

293 
	#EHCI_QH_EPS_LOW
 1

	)

294 
	#EHCI_QH_EPS_HIGH
 2

	)

295 
	#EHCI_QH_EPS_RESERVED
 3

	)

297 
	#QH_EPCHAR_EP_MASK
 0x00000f00

	)

298 
	#QH_EPCHAR_EP_SH
 8

	)

299 
	#QH_EPCHAR_I
 (1 << 7)

	)

300 
	#QH_EPCHAR_DEVADDR_MASK
 0x0000007f

	)

301 
	#QH_EPCHAR_DEVADDR_SH
 0

	)

304 
uöt32_t
 
	mïˇp
;

305 
	#QH_EPCAP_MULT_MASK
 0xc0000000

	)

306 
	#QH_EPCAP_MULT_SH
 30

	)

307 
	#QH_EPCAP_PORTNUM_MASK
 0x3f800000

	)

308 
	#QH_EPCAP_PORTNUM_SH
 23

	)

309 
	#QH_EPCAP_HUBADDR_MASK
 0x007f0000

	)

310 
	#QH_EPCAP_HUBADDR_SH
 16

	)

311 
	#QH_EPCAP_CMASK_MASK
 0x0000ff00

	)

312 
	#QH_EPCAP_CMASK_SH
 8

	)

313 
	#QH_EPCAP_SMASK_MASK
 0x000000ff

	)

314 
	#QH_EPCAP_SMASK_SH
 0

	)

316 
uöt32_t
 
	mcuºít_qtd
;

317 
uöt32_t
 
	m√xt_qtd
;

318 
uöt32_t
 
	mÆäext_qtd
;

319 
	#QH_ALTNEXT_NAKCNT_MASK
 0x0000001e

	)

320 
	#QH_ALTNEXT_NAKCNT_SH
 1

	)

322 
uöt32_t
 
	mtokí
;

323 
uöt32_t
 
	mbuÂå
[5];

324 
	#BUFPTR_CPROGMASK_MASK
 0x000000ff

	)

325 
	#BUFPTR_FRAMETAG_MASK
 0x0000001f

	)

326 
	#BUFPTR_SBYTES_MASK
 0x00000„0

	)

327 
	#BUFPTR_SBYTES_SH
 5

	)

328 } 
	tEHCIqh
;

332 
	sEHCIf°n
 {

333 
uöt32_t
 
	m√xt
;

334 
uöt32_t
 
	mback±r
;

335 } 
	tEHCIf°n
;

337 
EHCIPackë
 
	tEHCIPackë
;

338 
EHCIQueue
 
	tEHCIQueue
;

339 
EHCISèã
 
	tEHCISèã
;

341 
	easync_°©e
 {

342 
	mEHCI_ASYNC_NONE
 = 0,

343 
	mEHCI_ASYNC_INFLIGHT
,

344 
	mEHCI_ASYNC_FINISHED
,

347 
	sEHCIPackë
 {

348 
EHCIQueue
 *
	mqueue
;

349 
QTAILQ_ENTRY
(
EHCIPackë
Ë
	m√xt
;

351 
EHCIqtd
 
	mqtd
;

352 
uöt32_t
 
	mqtdaddr
;

354 
USBPackë
 
	m∑ckë
;

355 
QEMUSGLi°
 
	msgl
;

356 
	mpid
;

357 
uöt32_t
 
	mtbyãs
;

358 
async_°©e
 
	masync
;

359 
	musb_°©us
;

362 
	sEHCIQueue
 {

363 
EHCISèã
 *
	mehci
;

364 
QTAILQ_ENTRY
(
EHCIQueue
Ë
	m√xt
;

365 
uöt32_t
 
	m£í
;

366 
uöt64_t
 
	mts
;

367 
	masync
;

368 
	mªvÆid©e
;

373 
EHCIqh
 
	mqh
;

374 
uöt32_t
 
	mqhaddr
;

375 
uöt32_t
 
	mqtdaddr
;

376 
USBDevi˚
 *
	mdev
;

377 
QTAILQ_HEAD
(, 
EHCIPackë
Ë
	m∑ckës
;

380 
	$QTAILQ_HEAD
(
	tEHCIQueueHód
, 
	tEHCIQueue
) EHCIQueueHead;

382 
	sEHCISèã
 {

383 
PCIDevi˚
 
dev
;

384 
USBBus
 
bus
;

385 
qemu_úq
 
úq
;

386 
Mem‹yRegi⁄
 
mem
;

387 
com∑ni⁄_cou¡
;

390 
uöt32_t
 
max‰ames
;

397 
uöt8_t
 
mmio
[
MMIO_SIZE
];

399 
uöt8_t
 
ˇp
[
OPREGBASE
];

400 
uöt32_t
 
usbcmd
;

401 
uöt32_t
 
usb°s
;

402 
uöt32_t
 
usböå
;

403 
uöt32_t
 
‰ödex
;

404 
uöt32_t
 
˘æds£gmít
;

405 
uöt32_t
 
≥riodi˛i°ba£
;

406 
uöt32_t
 
asyn˛i°addr
;

407 
uöt32_t
 
nŸu£d
[9];

408 
uöt32_t
 
c⁄figÊag
;

409 
uöt32_t
 
p‹tsc
[
NB_PORTS
];

416 
QEMUTimî
 *
‰ame_timî
;

417 
QEMUBH
 *
async_bh
;

418 
uöt32_t
 
a°©e
;

419 
uöt32_t
 
p°©e
;

420 
USBP‹t
 
p‹ts
[
NB_PORTS
];

421 
USBP‹t
 *
com∑ni⁄_p‹ts
[
NB_PORTS
];

422 
uöt32_t
 
usb°s_≥ndög
;

423 
uöt32_t
 
usb°s_‰ödex
;

424 
EHCIQueueHód
 
aqueues
;

425 
EHCIQueueHód
 
pqueues
;

428 
uöt32_t
 
a_„tch_addr
;

429 
uöt32_t
 
p_„tch_addr
;

431 
USBPackë
 
ùackë
;

432 
QEMUSGLi°
 
isgl
;

434 
uöt64_t
 
œ°_run_ns
;

435 
uöt32_t
 
async_°ïdown
;

438 
	#SET_LAST_RUN_CLOCK
(
s
) \

439 (
s
)->
œ°_run_ns
 = 
	`qemu_gë_˛ock_ns
(
vm_˛ock
);

	)

442 
	#gë_fõld
(
d©a
, 
fõld
) \

443 (((
d©a
Ë& 
fõld
##
_MASK
Ë>> fõld##
_SH
)

	)

445 
	#£t_fõld
(
d©a
, 
√wvÆ
, 
fõld
) do { \

446 
uöt32_t
 
vÆ
 = *
d©a
; \

447 
vÆ
 &~ 
fõld
##
_MASK
; \

448 
vÆ
 |((
√wvÆ
Ë<< 
fõld
##
_SH
Ë& fõld##
_MASK
; \

449 *
d©a
 = 
vÆ
; \

450 
	}
} 0)

	)

452 c⁄° *
	gehci_°©e_«mes
[] = {

453 [
EST_INACTIVE
] = "INACTIVE",

454 [
EST_ACTIVE
] = "ACTIVE",

455 [
EST_EXECUTING
] = "EXECUTING",

456 [
EST_SLEEPING
] = "SLEEPING",

457 [
EST_WAITLISTHEAD
] = "WAITLISTHEAD",

458 [
EST_FETCHENTRY
] = "FETCH ENTRY",

459 [
EST_FETCHQH
] = "FETCH QH",

460 [
EST_FETCHITD
] = "FETCH ITD",

461 [
EST_ADVANCEQUEUE
] = "ADVANCEQUEUE",

462 [
EST_FETCHQTD
] = "FETCH QTD",

463 [
EST_EXECUTE
] = "EXECUTE",

464 [
EST_WRITEBACK
] = "WRITEBACK",

465 [
EST_HORIZONTALQH
] = "HORIZONTALQH",

468 c⁄° *
	gehci_mmio_«mes
[] = {

469 [
CAPLENGTH
] = "CAPLENGTH",

470 [
HCIVERSION
] = "HCIVERSION",

471 [
HCSPARAMS
] = "HCSPARAMS",

472 [
HCCPARAMS
] = "HCCPARAMS",

473 [
USBCMD
] = "USBCMD",

474 [
USBSTS
] = "USBSTS",

475 [
USBINTR
] = "USBINTR",

476 [
FRINDEX
] = "FRINDEX",

477 [
PERIODICLISTBASE
] = "P-LIST BASE",

478 [
ASYNCLISTADDR
] = "A-LIST ADDR",

479 [
PORTSC_BEGIN
] = "PORTSC #0",

480 [
PORTSC_BEGIN
 + 4] = "PORTSC #1",

481 [
PORTSC_BEGIN
 + 8] = "PORTSC #2",

482 [
PORTSC_BEGIN
 + 12] = "PORTSC #3",

483 [
PORTSC_BEGIN
 + 16] = "PORTSC #4",

484 [
PORTSC_BEGIN
 + 20] = "PORTSC #5",

485 [
CONFIGFLAG
] = "CONFIGFLAG",

488 c⁄° *
	$ƒ2°r
(c⁄° **
n
, 
size_t
 
Àn
, 
uöt32_t
 
ƒ
)

490 i‡(
ƒ
 < 
Àn
 && 
n
[ƒ] !
NULL
) {

491  
n
[
ƒ
];

495 
	}
}

497 c⁄° *
	$°©e2°r
(
uöt32_t
 
°©e
)

499  
	`ƒ2°r
(
ehci_°©e_«mes
, 
	`ARRAY_SIZE
”hci_°©e_«mes), 
°©e
);

500 
	}
}

502 c⁄° *
	$addr2°r
(
èrgë_phys_addr_t
 
addr
)

504  
	`ƒ2°r
(
ehci_mmio_«mes
, 
	`ARRAY_SIZE
”hci_mmio_«mes), 
addr
);

505 
	}
}

507 
	$ehci_åa˚_usb°s
(
uöt32_t
 
mask
, 
°©e
)

510 i‡(
mask
 & 
USBSTS_INT
) {

511 
	`åa˚_usb_ehci_usb°s
("INT", 
°©e
);

513 i‡(
mask
 & 
USBSTS_ERRINT
) {

514 
	`åa˚_usb_ehci_usb°s
("ERRINT", 
°©e
);

516 i‡(
mask
 & 
USBSTS_PCD
) {

517 
	`åa˚_usb_ehci_usb°s
("PCD", 
°©e
);

519 i‡(
mask
 & 
USBSTS_FLR
) {

520 
	`åa˚_usb_ehci_usb°s
("FLR", 
°©e
);

522 i‡(
mask
 & 
USBSTS_HSE
) {

523 
	`åa˚_usb_ehci_usb°s
("HSE", 
°©e
);

525 i‡(
mask
 & 
USBSTS_IAA
) {

526 
	`åa˚_usb_ehci_usb°s
("IAA", 
°©e
);

530 i‡(
mask
 & 
USBSTS_HALT
) {

531 
	`åa˚_usb_ehci_usb°s
("HALT", 
°©e
);

533 i‡(
mask
 & 
USBSTS_REC
) {

534 
	`åa˚_usb_ehci_usb°s
("REC", 
°©e
);

536 i‡(
mask
 & 
USBSTS_PSS
) {

537 
	`åa˚_usb_ehci_usb°s
("PSS", 
°©e
);

539 i‡(
mask
 & 
USBSTS_ASS
) {

540 
	`åa˚_usb_ehci_usb°s
("ASS", 
°©e
);

542 
	}
}

544 
ölöe
 
	$ehci_£t_usb°s
(
EHCISèã
 *
s
, 
mask
)

546 i‡((
s
->
usb°s
 & 
mask
) == mask) {

549 
	`ehci_åa˚_usb°s
(
mask
, 1);

550 
s
->
usb°s
 |
mask
;

551 
	}
}

553 
ölöe
 
	$ehci_˛ór_usb°s
(
EHCISèã
 *
s
, 
mask
)

555 i‡((
s
->
usb°s
 & 
mask
) == 0) {

558 
	`ehci_åa˚_usb°s
(
mask
, 0);

559 
s
->
usb°s
 &~
mask
;

560 
	}
}

563 
ölöe
 
	$ehci_upd©e_úq
(
EHCISèã
 *
s
)

565 
Àvñ
 = 0;

567 i‡((
s
->
usb°s
 & 
USBINTR_MASK
Ë& s->
usböå
) {

568 
Àvñ
 = 1;

571 
	`åa˚_usb_ehci_úq
(
Àvñ
, 
s
->
‰ödex
, s->
usb°s
, s->
usböå
);

572 
	`qemu_£t_úq
(
s
->
úq
, 
Àvñ
);

573 
	}
}

576 
ölöe
 
	$ehci_øi£_úq
(
EHCISèã
 *
s
, 
öå
)

578 i‡(
öå
 & (
USBSTS_PCD
 | 
USBSTS_FLR
 | 
USBSTS_HSE
)) {

579 
s
->
usb°s
 |
öå
;

580 
	`ehci_upd©e_úq
(
s
);

582 
s
->
usb°s_≥ndög
 |
öå
;

584 
	}
}

590 
ölöe
 
	$ehci_commô_úq
(
EHCISèã
 *
s
)

592 
uöt32_t
 
ôc
;

594 i‡(!
s
->
usb°s_≥ndög
) {

597 i‡(
s
->
usb°s_‰ödex
 > s->
‰ödex
) {

601 
ôc
 = (
s
->
usbcmd
 >> 16) & 0xff;

602 
s
->
usb°s
 |s->
usb°s_≥ndög
;

603 
s
->
usb°s_≥ndög
 = 0;

604 
s
->
usb°s_‰ödex
 = s->
‰ödex
 + 
ôc
;

605 
	`ehci_upd©e_úq
(
s
);

606 
	}
}

608 
	$ehci_upd©e_hÆt
(
EHCISèã
 *
s
)

610 i‡(
s
->
usbcmd
 & 
USBCMD_RUNSTOP
) {

611 
	`ehci_˛ór_usb°s
(
s
, 
USBSTS_HALT
);

613 i‡(
s
->
a°©e
 =
EST_INACTIVE
 && s->
p°©e
 == EST_INACTIVE) {

614 
	`ehci_£t_usb°s
(
s
, 
USBSTS_HALT
);

617 
	}
}

619 
	$ehci_£t_°©e
(
EHCISèã
 *
s
, 
async
, 
°©e
)

621 i‡(
async
) {

622 
	`åa˚_usb_ehci_°©e
("async", 
	`°©e2°r
(
°©e
));

623 
s
->
a°©e
 = 
°©e
;

624 i‡(
s
->
a°©e
 =
EST_INACTIVE
) {

625 
	`ehci_˛ór_usb°s
(
s
, 
USBSTS_ASS
);

626 
	`ehci_upd©e_hÆt
(
s
);

628 
	`ehci_£t_usb°s
(
s
, 
USBSTS_ASS
);

631 
	`åa˚_usb_ehci_°©e
("≥riodic", 
	`°©e2°r
(
°©e
));

632 
s
->
p°©e
 = 
°©e
;

633 i‡(
s
->
p°©e
 =
EST_INACTIVE
) {

634 
	`ehci_˛ór_usb°s
(
s
, 
USBSTS_PSS
);

635 
	`ehci_upd©e_hÆt
(
s
);

637 
	`ehci_£t_usb°s
(
s
, 
USBSTS_PSS
);

640 
	}
}

642 
	$ehci_gë_°©e
(
EHCISèã
 *
s
, 
async
)

644  
async
 ? 
s
->
a°©e
 : s->
p°©e
;

645 
	}
}

647 
	$ehci_£t_„tch_addr
(
EHCISèã
 *
s
, 
async
, 
uöt32_t
 
addr
)

649 i‡(
async
) {

650 
s
->
a_„tch_addr
 = 
addr
;

652 
s
->
p_„tch_addr
 = 
addr
;

654 
	}
}

656 
	$ehci_gë_„tch_addr
(
EHCISèã
 *
s
, 
async
)

658  
async
 ? 
s
->
a_„tch_addr
 : s->
p_„tch_addr
;

659 
	}
}

661 
	$ehci_åa˚_qh
(
EHCIQueue
 *
q
, 
èrgë_phys_addr_t
 
addr
, 
EHCIqh
 *
qh
)

664 
	`åa˚_usb_ehci_qh_±rs
(
q
, 
addr
, 
qh
->
√xt
,

665 
qh
->
cuºít_qtd
, qh->
√xt_qtd
, qh->
Æäext_qtd
);

666 
	`åa˚_usb_ehci_qh_fõlds
(
addr
,

667 
	`gë_fõld
(
qh
->
ïch¨
, 
QH_EPCHAR_RL
),

668 
	`gë_fõld
(
qh
->
ïch¨
, 
QH_EPCHAR_MPLEN
),

669 
	`gë_fõld
(
qh
->
ïch¨
, 
QH_EPCHAR_EPS
),

670 
	`gë_fõld
(
qh
->
ïch¨
, 
QH_EPCHAR_EP
),

671 
	`gë_fõld
(
qh
->
ïch¨
, 
QH_EPCHAR_DEVADDR
));

672 
	`åa˚_usb_ehci_qh_bôs
(
addr
,

673 (
boﬁ
)(
qh
->
ïch¨
 & 
QH_EPCHAR_C
),

674 (
boﬁ
)(
qh
->
ïch¨
 & 
QH_EPCHAR_H
),

675 (
boﬁ
)(
qh
->
ïch¨
 & 
QH_EPCHAR_DTC
),

676 (
boﬁ
)(
qh
->
ïch¨
 & 
QH_EPCHAR_I
));

677 
	}
}

679 
	$ehci_åa˚_qtd
(
EHCIQueue
 *
q
, 
èrgë_phys_addr_t
 
addr
, 
EHCIqtd
 *
qtd
)

682 
	`åa˚_usb_ehci_qtd_±rs
(
q
, 
addr
, 
qtd
->
√xt
, qtd->
Æäext
);

683 
	`åa˚_usb_ehci_qtd_fõlds
(
addr
,

684 
	`gë_fõld
(
qtd
->
tokí
, 
QTD_TOKEN_TBYTES
),

685 
	`gë_fõld
(
qtd
->
tokí
, 
QTD_TOKEN_CPAGE
),

686 
	`gë_fõld
(
qtd
->
tokí
, 
QTD_TOKEN_CERR
),

687 
	`gë_fõld
(
qtd
->
tokí
, 
QTD_TOKEN_PID
));

688 
	`åa˚_usb_ehci_qtd_bôs
(
addr
,

689 (
boﬁ
)(
qtd
->
tokí
 & 
QTD_TOKEN_IOC
),

690 (
boﬁ
)(
qtd
->
tokí
 & 
QTD_TOKEN_ACTIVE
),

691 (
boﬁ
)(
qtd
->
tokí
 & 
QTD_TOKEN_HALT
),

692 (
boﬁ
)(
qtd
->
tokí
 & 
QTD_TOKEN_BABBLE
),

693 (
boﬁ
)(
qtd
->
tokí
 & 
QTD_TOKEN_XACTERR
));

694 
	}
}

696 
	$ehci_åa˚_ôd
(
EHCISèã
 *
s
, 
èrgë_phys_addr_t
 
addr
, 
EHCIôd
 *
ôd
)

698 
	`åa˚_usb_ehci_ôd
(
addr
, 
ôd
->
√xt
,

699 
	`gë_fõld
(
ôd
->
buÂå
[1], 
ITD_BUFPTR_MAXPKT
),

700 
	`gë_fõld
(
ôd
->
buÂå
[2], 
ITD_BUFPTR_MULT
),

701 
	`gë_fõld
(
ôd
->
buÂå
[0], 
ITD_BUFPTR_EP
),

702 
	`gë_fõld
(
ôd
->
buÂå
[0], 
ITD_BUFPTR_DEVADDR
));

703 
	}
}

705 
	$ehci_åa˚_sôd
(
EHCISèã
 *
s
, 
èrgë_phys_addr_t
 
addr
,

706 
EHCIsôd
 *
sôd
)

708 
	`åa˚_usb_ehci_sôd
(
addr
, 
sôd
->
√xt
,

709 (
boﬁ
)(
sôd
->
ªsu…s
 & 
SITD_RESULTS_ACTIVE
));

710 
	}
}

712 
ölöe
 
boﬁ
 
	$ehci_íabÀd
(
EHCISèã
 *
s
)

714  
s
->
usbcmd
 & 
USBCMD_RUNSTOP
;

715 
	}
}

717 
ölöe
 
boﬁ
 
	$ehci_async_íabÀd
(
EHCISèã
 *
s
)

719  
	`ehci_íabÀd
(
s
Ë&& (s->
usbcmd
 & 
USBCMD_ASE
);

720 
	}
}

722 
ölöe
 
boﬁ
 
	$ehci_≥riodic_íabÀd
(
EHCISèã
 *
s
)

724  
	`ehci_íabÀd
(
s
Ë&& (s->
usbcmd
 & 
USBCMD_PSE
);

725 
	}
}

729 
EHCIPackë
 *
	$ehci_Æloc_∑ckë
(
EHCIQueue
 *
q
)

731 
EHCIPackë
 *
p
;

733 
p
 = 
	`g_√w0
(
EHCIPackë
, 1);

734 
p
->
queue
 = 
q
;

735 
	`usb_∑ckë_öô
(&
p
->
∑ckë
);

736 
	`QTAILQ_INSERT_TAIL
(&
q
->
∑ckës
, 
p
, 
√xt
);

737 
	`åa˚_usb_ehci_∑ckë_a˘i⁄
(
p
->
queue
,Ö, "alloc");

738  
p
;

739 
	}
}

741 
	$ehci_‰ì_∑ckë
(
EHCIPackë
 *
p
)

743 
	`åa˚_usb_ehci_∑ckë_a˘i⁄
(
p
->
queue
,Ö, "free");

744 i‡(
p
->
async
 =
EHCI_ASYNC_INFLIGHT
) {

745 
	`usb_ˇn˚l_∑ckë
(&
p
->
∑ckë
);

747 
	`QTAILQ_REMOVE
(&
p
->
queue
->
∑ckës
,Ö, 
√xt
);

748 
	`usb_∑ckë_˛ónup
(&
p
->
∑ckë
);

749 
	`g_‰ì
(
p
);

750 
	}
}

754 
EHCIQueue
 *
	$ehci_Æloc_queue
(
EHCISèã
 *
ehci
, 
uöt32_t
 
addr
, 
async
)

756 
EHCIQueueHód
 *
hód
 = 
async
 ? &
ehci
->
aqueues
 : &ehci->
pqueues
;

757 
EHCIQueue
 *
q
;

759 
q
 = 
	`g_mÆloc0
((*q));

760 
q
->
ehci
 =Éhci;

761 
q
->
qhaddr
 = 
addr
;

762 
q
->
async
 =ásync;

763 
	`QTAILQ_INIT
(&
q
->
∑ckës
);

764 
	`QTAILQ_INSERT_HEAD
(
hód
, 
q
, 
√xt
);

765 
	`åa˚_usb_ehci_queue_a˘i⁄
(
q
, "alloc");

766  
q
;

767 
	}
}

769 
	$ehci_ˇn˚l_queue
(
EHCIQueue
 *
q
)

771 
EHCIPackë
 *
p
;

773 
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
);

774 i‡(
p
 =
NULL
) {

778 
	`åa˚_usb_ehci_queue_a˘i⁄
(
q
, "cancel");

780 
	`ehci_‰ì_∑ckë
(
p
);

781 } (
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
)Ë!
NULL
);

782 
	}
}

784 
	$ehci_‰ì_queue
(
EHCIQueue
 *
q
)

786 
EHCIQueueHód
 *
hód
 = 
q
->
async
 ? &q->
ehci
->
aqueues
 : &q->ehci->
pqueues
;

788 
	`åa˚_usb_ehci_queue_a˘i⁄
(
q
, "free");

789 
	`ehci_ˇn˚l_queue
(
q
);

790 
	`QTAILQ_REMOVE
(
hód
, 
q
, 
√xt
);

791 
	`g_‰ì
(
q
);

792 
	}
}

794 
EHCIQueue
 *
	$ehci_föd_queue_by_qh
(
EHCISèã
 *
ehci
, 
uöt32_t
 
addr
,

795 
async
)

797 
EHCIQueueHód
 *
hód
 = 
async
 ? &
ehci
->
aqueues
 : &ehci->
pqueues
;

798 
EHCIQueue
 *
q
;

800 
	`QTAILQ_FOREACH
(
q
, 
hód
, 
√xt
) {

801 i‡(
addr
 =
q
->
qhaddr
) {

802  
q
;

805  
NULL
;

806 
	}
}

808 
	$ehci_queues_èg_unu£d_async
(
EHCISèã
 *
ehci
)

810 
EHCIQueue
 *
q
;

812 
	`QTAILQ_FOREACH
(
q
, &
ehci
->
aqueues
, 
√xt
) {

813 i‡(!
q
->
£í
) {

814 
q
->
ªvÆid©e
 = 1;

817 
	}
}

819 
	$ehci_queues_rù_unu£d
(
EHCISèã
 *
ehci
, 
async
)

821 
EHCIQueueHód
 *
hód
 = 
async
 ? &
ehci
->
aqueues
 : &ehci->
pqueues
;

822 
uöt64_t
 
maxage
 = 
FRAME_TIMER_NS
 * 
ehci
->
max‰ames
 * 4;

823 
EHCIQueue
 *
q
, *
tmp
;

825 
	`QTAILQ_FOREACH_SAFE
(
q
, 
hód
, 
√xt
, 
tmp
) {

826 i‡(
q
->
£í
) {

827 
q
->
£í
 = 0;

828 
q
->
ts
 = 
ehci
->
œ°_run_ns
;

831 i‡(
ehci
->
œ°_run_ns
 < 
q
->
ts
 + 
maxage
) {

834 
	`ehci_‰ì_queue
(
q
);

836 
	}
}

838 
	$ehci_queues_rù_devi˚
(
EHCISèã
 *
ehci
, 
USBDevi˚
 *
dev
, 
async
)

840 
EHCIQueueHód
 *
hód
 = 
async
 ? &
ehci
->
aqueues
 : &ehci->
pqueues
;

841 
EHCIQueue
 *
q
, *
tmp
;

843 
	`QTAILQ_FOREACH_SAFE
(
q
, 
hód
, 
√xt
, 
tmp
) {

844 i‡(
q
->
dev
 != dev) {

847 
	`ehci_‰ì_queue
(
q
);

849 
	}
}

851 
	$ehci_queues_rù_Æl
(
EHCISèã
 *
ehci
, 
async
)

853 
EHCIQueueHód
 *
hód
 = 
async
 ? &
ehci
->
aqueues
 : &ehci->
pqueues
;

854 
EHCIQueue
 *
q
, *
tmp
;

856 
	`QTAILQ_FOREACH_SAFE
(
q
, 
hód
, 
√xt
, 
tmp
) {

857 
	`ehci_‰ì_queue
(
q
);

859 
	}
}

863 
	$ehci_©èch
(
USBP‹t
 *
p‹t
)

865 
EHCISèã
 *
s
 = 
p‹t
->
›aque
;

866 
uöt32_t
 *
p‹tsc
 = &
s
->p‹tsc[
p‹t
->
ödex
];

867 c⁄° *
ow√r
 = (*
p‹tsc
 & 
PORTSC_POWNER
) ? "comp" : "ehci";

869 
	`åa˚_usb_ehci_p‹t_©èch
(
p‹t
->
ödex
, 
ow√r
,Ö‹t->
dev
->
¥odu˘_desc
);

871 i‡(*
p‹tsc
 & 
PORTSC_POWNER
) {

872 
USBP‹t
 *
com∑ni⁄
 = 
s
->
com∑ni⁄_p‹ts
[
p‹t
->
ödex
];

873 
com∑ni⁄
->
dev
 = 
p‹t
->dev;

874 
com∑ni⁄
->
›s
->
	`©èch
(companion);

878 *
p‹tsc
 |
PORTSC_CONNECT
;

879 *
p‹tsc
 |
PORTSC_CSC
;

881 
	`ehci_øi£_úq
(
s
, 
USBSTS_PCD
);

882 
	`ehci_commô_úq
(
s
);

883 
	}
}

885 
	$ehci_dëach
(
USBP‹t
 *
p‹t
)

887 
EHCISèã
 *
s
 = 
p‹t
->
›aque
;

888 
uöt32_t
 *
p‹tsc
 = &
s
->p‹tsc[
p‹t
->
ödex
];

889 c⁄° *
ow√r
 = (*
p‹tsc
 & 
PORTSC_POWNER
) ? "comp" : "ehci";

891 
	`åa˚_usb_ehci_p‹t_dëach
(
p‹t
->
ödex
, 
ow√r
);

893 i‡(*
p‹tsc
 & 
PORTSC_POWNER
) {

894 
USBP‹t
 *
com∑ni⁄
 = 
s
->
com∑ni⁄_p‹ts
[
p‹t
->
ödex
];

895 
com∑ni⁄
->
›s
->
	`dëach
(companion);

896 
com∑ni⁄
->
dev
 = 
NULL
;

901 *
p‹tsc
 &~
PORTSC_POWNER
;

905 
	`ehci_queues_rù_devi˚
(
s
, 
p‹t
->
dev
, 0);

906 
	`ehci_queues_rù_devi˚
(
s
, 
p‹t
->
dev
, 1);

908 *
p‹tsc
 &~(
PORTSC_CONNECT
|
PORTSC_PED
);

909 *
p‹tsc
 |
PORTSC_CSC
;

911 
	`ehci_øi£_úq
(
s
, 
USBSTS_PCD
);

912 
	`ehci_commô_úq
(
s
);

913 
	}
}

915 
	$ehci_chûd_dëach
(
USBP‹t
 *
p‹t
, 
USBDevi˚
 *
chûd
)

917 
EHCISèã
 *
s
 = 
p‹t
->
›aque
;

918 
uöt32_t
 
p‹tsc
 = 
s
->p‹tsc[
p‹t
->
ödex
];

920 i‡(
p‹tsc
 & 
PORTSC_POWNER
) {

921 
USBP‹t
 *
com∑ni⁄
 = 
s
->
com∑ni⁄_p‹ts
[
p‹t
->
ödex
];

922 
com∑ni⁄
->
›s
->
	`chûd_dëach
(com∑ni⁄, 
chûd
);

926 
	`ehci_queues_rù_devi˚
(
s
, 
chûd
, 0);

927 
	`ehci_queues_rù_devi˚
(
s
, 
chûd
, 1);

928 
	}
}

930 
	$ehci_wakeup
(
USBP‹t
 *
p‹t
)

932 
EHCISèã
 *
s
 = 
p‹t
->
›aque
;

933 
uöt32_t
 
p‹tsc
 = 
s
->p‹tsc[
p‹t
->
ödex
];

935 i‡(
p‹tsc
 & 
PORTSC_POWNER
) {

936 
USBP‹t
 *
com∑ni⁄
 = 
s
->
com∑ni⁄_p‹ts
[
p‹t
->
ödex
];

937 i‡(
com∑ni⁄
->
›s
->
wakeup
) {

938 
com∑ni⁄
->
›s
->
	`wakeup
(companion);

943 
	`qemu_bh_scheduÀ
(
s
->
async_bh
);

944 
	}
}

946 
	$ehci_ªgi°î_com∑ni⁄
(
USBBus
 *
bus
, 
USBP‹t
 *
p‹ts
[],

947 
uöt32_t
 
p‹tcou¡
, uöt32_à
fú°p‹t
)

949 
EHCISèã
 *
s
 = 
	`c⁄èöî_of
(
bus
, EHCIState, bus);

950 
uöt32_t
 
i
;

952 i‡(
fú°p‹t
 + 
p‹tcou¡
 > 
NB_PORTS
) {

953 
	`qîr‹_ªp‹t
(
QERR_INVALID_PARAMETER_VALUE
, "firstport",

955 
	`îr‹_¥ötf_u∆ess_qmp
(

957 "i†outsidêo‡thêvÆidÑ™gêo‡0 - %u\n", 
fú°p‹t
, firstport,

958 
fú°p‹t
 + 
p‹tcou¡
 - 1, 
NB_PORTS
 - 1);

962 
i
 = 0; i < 
p‹tcou¡
; i++) {

963 i‡(
s
->
com∑ni⁄_p‹ts
[
fú°p‹t
 + 
i
]) {

964 
	`qîr‹_ªp‹t
(
QERR_INVALID_PARAMETER_VALUE
, "masterbus",

966 
	`îr‹_¥ötf_u∆ess_qmp
(

968 
fú°p‹t
 + 
i
, 
bus
->
qbus
.
«me
);

973 
i
 = 0; i < 
p‹tcou¡
; i++) {

974 
s
->
com∑ni⁄_p‹ts
[
fú°p‹t
 + 
i
] = 
p‹ts
[i];

975 
s
->
p‹ts
[
fú°p‹t
 + 
i
].
•ìdmask
 |=

976 
USB_SPEED_MASK_LOW
 | 
USB_SPEED_MASK_FULL
;

978 
s
->
p‹tsc
[
fú°p‹t
 + 
i
] = 
PORTSC_POWNER
;

981 
s
->
com∑ni⁄_cou¡
++;

982 
s
->
mmio
[0x05] = (s->
com∑ni⁄_cou¡
 << 4Ë| 
p‹tcou¡
;

985 
	}
}

987 
USBDevi˚
 *
	$ehci_föd_devi˚
(
EHCISèã
 *
ehci
, 
uöt8_t
 
addr
)

989 
USBDevi˚
 *
dev
;

990 
USBP‹t
 *
p‹t
;

991 
i
;

993 
i
 = 0; i < 
NB_PORTS
; i++) {

994 
p‹t
 = &
ehci
->
p‹ts
[
i
];

995 i‡(!(
ehci
->
p‹tsc
[
i
] & 
PORTSC_PED
)) {

996 
	`DPRINTF
("P‹à%dÇŸÉ«bÀd\n", 
i
);

999 
dev
 = 
	`usb_föd_devi˚
(
p‹t
, 
addr
);

1000 i‡(
dev
 !
NULL
) {

1001  
dev
;

1004  
NULL
;

1005 
	}
}

1008 
	$ehci_ª£t
(*
›aque
)

1010 
EHCISèã
 *
s
 = 
›aque
;

1011 
i
;

1012 
USBDevi˚
 *
devs
[
NB_PORTS
];

1014 
	`åa˚_usb_ehci_ª£t
();

1020 
i
 = 0; i < 
NB_PORTS
; i++) {

1021 
devs
[
i
] = 
s
->
p‹ts
[i].
dev
;

1022 i‡(
devs
[
i
] && devs[i]->
©èched
) {

1023 
	`usb_dëach
(&
s
->
p‹ts
[
i
]);

1027 
	`mem£t
(&
s
->
mmio
[
OPREGBASE
], 0x00, 
MMIO_SIZE
 - OPREGBASE);

1029 
s
->
usbcmd
 = 
NB_MAXINTRATE
 << 
USBCMD_ITC_SH
;

1030 
s
->
usb°s
 = 
USBSTS_HALT
;

1031 
s
->
usb°s_≥ndög
 = 0;

1032 
s
->
usb°s_‰ödex
 = 0;

1034 
s
->
a°©e
 = 
EST_INACTIVE
;

1035 
s
->
p°©e
 = 
EST_INACTIVE
;

1037 
i
 = 0; i < 
NB_PORTS
; i++) {

1038 i‡(
s
->
com∑ni⁄_p‹ts
[
i
]) {

1039 
s
->
p‹tsc
[
i
] = 
PORTSC_POWNER
 | 
PORTSC_PPOWER
;

1041 
s
->
p‹tsc
[
i
] = 
PORTSC_PPOWER
;

1043 i‡(
devs
[
i
] && devs[i]->
©èched
) {

1044 
	`usb_©èch
(&
s
->
p‹ts
[
i
]);

1045 
	`usb_devi˚_ª£t
(
devs
[
i
]);

1048 
	`ehci_queues_rù_Æl
(
s
, 0);

1049 
	`ehci_queues_rù_Æl
(
s
, 1);

1050 
	`qemu_dñ_timî
(
s
->
‰ame_timî
);

1051 
	`qemu_bh_ˇn˚l
(
s
->
async_bh
);

1052 
	}
}

1054 
uöt32_t
 
	$ehci_mem_ªadb
(*
±r
, 
èrgë_phys_addr_t
 
addr
)

1056 
EHCISèã
 *
s
 = 
±r
;

1057 
uöt32_t
 
vÆ
;

1059 
vÆ
 = 
s
->
mmio
[
addr
];

1061  
vÆ
;

1062 
	}
}

1064 
uöt32_t
 
	$ehci_mem_ªadw
(*
±r
, 
èrgë_phys_addr_t
 
addr
)

1066 
EHCISèã
 *
s
 = 
±r
;

1067 
uöt32_t
 
vÆ
;

1069 
vÆ
 = 
s
->
mmio
[
addr
] | (s->mmio[addr+1] << 8);

1071  
vÆ
;

1072 
	}
}

1074 
uöt32_t
 
	$ehci_mem_ªadl
(*
±r
, 
èrgë_phys_addr_t
 
addr
)

1076 
EHCISèã
 *
s
 = 
±r
;

1077 
uöt32_t
 
vÆ
;

1079 
vÆ
 = 
s
->
mmio
[
addr
] | (s->mmio[addr+1] << 8) |

1080 (
s
->
mmio
[
addr
+2] << 16) | (s->mmio[addr+3] << 24);

1082 
	`åa˚_usb_ehci_mmio_ªadl
(
addr
, 
	`addr2°r
◊ddr), 
vÆ
);

1083  
vÆ
;

1084 
	}
}

1086 
	$ehci_mem_wrôeb
(*
±r
, 
èrgë_phys_addr_t
 
addr
, 
uöt32_t
 
vÆ
)

1088 
	`Ârötf
(
°dîr
, "EHCI doesn't handle byte writesÅo MMIO\n");

1089 
	`exô
(1);

1090 
	}
}

1092 
	$ehci_mem_wrôew
(*
±r
, 
èrgë_phys_addr_t
 
addr
, 
uöt32_t
 
vÆ
)

1094 
	`Ârötf
(
°dîr
, "EHCI doesn't handle 16-bit writesÅo MMIO\n");

1095 
	`exô
(1);

1096 
	}
}

1098 
	$h™dÀ_p‹t_ow√r_wrôe
(
EHCISèã
 *
s
, 
p‹t
, 
uöt32_t
 
ow√r
)

1100 
USBDevi˚
 *
dev
 = 
s
->
p‹ts
[
p‹t
].dev;

1101 
uöt32_t
 *
p‹tsc
 = &
s
->p‹tsc[
p‹t
];

1102 
uöt32_t
 
‹ig
;

1104 i‡(
s
->
com∑ni⁄_p‹ts
[
p‹t
] =
NULL
)

1107 
ow√r
 = ow√∏& 
PORTSC_POWNER
;

1108 
‹ig
 = *
p‹tsc
 & 
PORTSC_POWNER
;

1110 i‡(!(
ow√r
 ^ 
‹ig
)) {

1114 i‡(
dev
 && dev->
©èched
) {

1115 
	`usb_dëach
(&
s
->
p‹ts
[
p‹t
]);

1118 *
p‹tsc
 &~
PORTSC_POWNER
;

1119 *
p‹tsc
 |
ow√r
;

1121 i‡(
dev
 && dev->
©èched
) {

1122 
	`usb_©èch
(&
s
->
p‹ts
[
p‹t
]);

1124 
	}
}

1126 
	$h™dÀ_p‹t_°©us_wrôe
(
EHCISèã
 *
s
, 
p‹t
, 
uöt32_t
 
vÆ
)

1128 
uöt32_t
 *
p‹tsc
 = &
s
->p‹tsc[
p‹t
];

1129 
USBDevi˚
 *
dev
 = 
s
->
p‹ts
[
p‹t
].dev;

1132 *
p‹tsc
 &~(
vÆ
 & 
PORTSC_RWC_MASK
);

1134 *
p‹tsc
 &
vÆ
 | ~
PORTSC_PED
;

1136 
	`h™dÀ_p‹t_ow√r_wrôe
(
s
, 
p‹t
, 
vÆ
);

1138 
vÆ
 &
PORTSC_RO_MASK
;

1140 i‡((
vÆ
 & 
PORTSC_PRESET
Ë&& !(*
p‹tsc
 & PORTSC_PRESET)) {

1141 
	`åa˚_usb_ehci_p‹t_ª£t
(
p‹t
, 1);

1144 i‡(!(
vÆ
 & 
PORTSC_PRESET
Ë&&(*
p‹tsc
 & PORTSC_PRESET)) {

1145 
	`åa˚_usb_ehci_p‹t_ª£t
(
p‹t
, 0);

1146 i‡(
dev
 && dev->
©èched
) {

1147 
	`usb_p‹t_ª£t
(&
s
->
p‹ts
[
p‹t
]);

1148 *
p‹tsc
 &~
PORTSC_CSC
;

1155 i‡(
dev
 && dev->
©èched
 && (dev->
•ìdmask
 & 
USB_SPEED_MASK_HIGH
)) {

1156 
vÆ
 |
PORTSC_PED
;

1160 *
p‹tsc
 &~
PORTSC_RO_MASK
;

1161 *
p‹tsc
 |
vÆ
;

1162 
	}
}

1164 
	$ehci_mem_wrôñ
(*
±r
, 
èrgë_phys_addr_t
 
addr
, 
uöt32_t
 
vÆ
)

1166 
EHCISèã
 *
s
 = 
±r
;

1167 
uöt32_t
 *
mmio
 = (uöt32_à*)(&
s
->mmio[
addr
]);

1168 
uöt32_t
 
ﬁd
 = *
mmio
;

1169 
i
;

1171 
	`åa˚_usb_ehci_mmio_wrôñ
(
addr
, 
	`addr2°r
◊ddr), 
vÆ
);

1174 i‡(
addr
 & 3) {

1175 
	`Ârötf
(
°dîr
, "usb-ehci: Mis-aligned writeÅoáddr 0x"

1176 
TARGET_FMT_∂x
 "\n", 
addr
);

1180 i‡(
addr
 >
PORTSC
 &&ádd∏< PORTSC + 4 * 
NB_PORTS
) {

1181 
	`h™dÀ_p‹t_°©us_wrôe
(
s
, (
addr
-
PORTSC
)/4, 
vÆ
);

1182 
	`åa˚_usb_ehci_mmio_ch™ge
(
addr
, 
	`addr2°r
◊ddr), *
mmio
, 
ﬁd
);

1186 i‡(
addr
 < 
OPREGBASE
) {

1187 
	`Ârötf
(
°dîr
, "usb-ehci: writeáttemptÅoÑead-onlyÑegister"

1188 
TARGET_FMT_∂x
 "\n", 
addr
);

1194 
addr
) {

1195 
USBCMD
:

1196 i‡(
vÆ
 & 
USBCMD_HCRESET
) {

1197 
	`ehci_ª£t
(
s
);

1198 
vÆ
 = 
s
->
usbcmd
;

1203 i‡((
vÆ
 & 
USBCMD_FLS
Ë&& !(
s
->
usbcmd
 & USBCMD_FLS)) {

1204 
	`Ârötf
(
°dîr
, "attemptÅo set frameÜist size -- value %d\n",

1205 
vÆ
 & 
USBCMD_FLS
);

1206 
vÆ
 &~
USBCMD_FLS
;

1209 i‡(
vÆ
 & 
USBCMD_IAAD
) {

1214 
s
->
async_°ïdown
 = 0;

1215 
	`qemu_bh_scheduÀ
(
s
->
async_bh
);

1218 i‡(((
USBCMD_RUNSTOP
 | 
USBCMD_PSE
 | 
USBCMD_ASE
Ë& 
vÆ
) !=

1219 ((
USBCMD_RUNSTOP
 | 
USBCMD_PSE
 | 
USBCMD_ASE
Ë& 
s
->
usbcmd
)) {

1220 i‡(
s
->
p°©e
 =
EST_INACTIVE
) {

1221 
	`SET_LAST_RUN_CLOCK
(
s
);

1223 
s
->
usbcmd
 = 
vÆ
;

1224 
	`ehci_upd©e_hÆt
(
s
);

1225 
s
->
async_°ïdown
 = 0;

1226 
	`qemu_mod_timî
(
s
->
‰ame_timî
, 
	`qemu_gë_˛ock_ns
(
vm_˛ock
));

1230 
USBSTS
:

1231 
vÆ
 &
USBSTS_RO_MASK
;

1232 
	`ehci_˛ór_usb°s
(
s
, 
vÆ
);

1233 
vÆ
 = 
s
->
usb°s
;

1234 
	`ehci_upd©e_úq
(
s
);

1237 
USBINTR
:

1238 
vÆ
 &
USBINTR_MASK
;

1241 
FRINDEX
:

1242 
vÆ
 &= 0x00003ff8;

1245 
CONFIGFLAG
:

1246 
vÆ
 &= 0x1;

1247 i‡(
vÆ
) {

1248 
i
 = 0; i < 
NB_PORTS
; i++)

1249 
	`h™dÀ_p‹t_ow√r_wrôe
(
s
, 
i
, 0);

1253 
PERIODICLISTBASE
:

1254 i‡(
	`ehci_≥riodic_íabÀd
(
s
)) {

1255 
	`Ârötf
(
°dîr
,

1261 
ASYNCLISTADDR
:

1262 i‡(
	`ehci_async_íabÀd
(
s
)) {

1263 
	`Ârötf
(
°dîr
,

1270 *
mmio
 = 
vÆ
;

1271 
	`åa˚_usb_ehci_mmio_ch™ge
(
addr
, 
	`addr2°r
◊ddr), *
mmio
, 
ﬁd
);

1272 
	}
}

1278 
ölöe
 
	$gë_dw‹ds
(
EHCISèã
 *
ehci
, 
uöt32_t
 
addr
,

1279 
uöt32_t
 *
buf
, 
num
)

1281 
i
;

1283 
i
 = 0; i < 
num
; i++, 
buf
++, 
addr
 += (*buf)) {

1284 
	`pci_dma_ªad
(&
ehci
->
dev
, 
addr
, 
buf
, (*buf));

1285 *
buf
 = 
	`À32_to_˝u
(*buf);

1289 
	}
}

1292 
ölöe
 
	$put_dw‹ds
(
EHCISèã
 *
ehci
, 
uöt32_t
 
addr
,

1293 
uöt32_t
 *
buf
, 
num
)

1295 
i
;

1297 
i
 = 0; i < 
num
; i++, 
buf
++, 
addr
 += (*buf)) {

1298 
uöt32_t
 
tmp
 = 
	`˝u_to_À32
(*
buf
);

1299 
	`pci_dma_wrôe
(&
ehci
->
dev
, 
addr
, &
tmp
, (tmp));

1303 
	}
}

1313 
	$ehci_Êush_qh
(
EHCIQueue
 *
q
)

1315 
uöt32_t
 *
qh
 = (uöt32_à*Ë&
q
->qh;

1316 
uöt32_t
 
dw‹ds
 = (
EHCIqh
) >> 2;

1317 
uöt32_t
 
addr
 = 
	`NLPTR_GET
(
q
->
qhaddr
);

1319 
	`put_dw‹ds
(
q
->
ehci
, 
addr
 + 3 * (
uöt32_t
), 
qh
 + 3, 
dw‹ds
 - 3);

1320 
	}
}

1324 
	$ehci_qh_do_ovîœy
(
EHCIQueue
 *
q
)

1326 
EHCIPackë
 *
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
);

1327 
i
;

1328 
dtoggÀ
;

1329 
pög
;

1330 
ïs
;

1331 
ªlﬂd
;

1333 
	`as£π
(
p
 !
NULL
);

1334 
	`as£π
(
p
->
qtdaddr
 =
q
->qtdaddr);

1338 
dtoggÀ
 = 
q
->
qh
.
tokí
 & 
QTD_TOKEN_DTOGGLE
;

1339 
pög
 = 
q
->
qh
.
tokí
 & 
QTD_TOKEN_PING
;

1341 
q
->
qh
.
cuºít_qtd
 = 
p
->
qtdaddr
;

1342 
q
->
qh
.
√xt_qtd
 = 
p
->
qtd
.
√xt
;

1343 
q
->
qh
.
Æäext_qtd
 = 
p
->
qtd
.
Æäext
;

1344 
q
->
qh
.
tokí
 = 
p
->
qtd
.token;

1347 
ïs
 = 
	`gë_fõld
(
q
->
qh
.
ïch¨
, 
QH_EPCHAR_EPS
);

1348 i‡(
ïs
 =
EHCI_QH_EPS_HIGH
) {

1349 
q
->
qh
.
tokí
 &~
QTD_TOKEN_PING
;

1350 
q
->
qh
.
tokí
 |
pög
;

1353 
ªlﬂd
 = 
	`gë_fõld
(
q
->
qh
.
ïch¨
, 
QH_EPCHAR_RL
);

1354 
	`£t_fõld
(&
q
->
qh
.
Æäext_qtd
, 
ªlﬂd
, 
QH_ALTNEXT_NAKCNT
);

1356 
i
 = 0; i < 5; i++) {

1357 
q
->
qh
.
buÂå
[
i
] = 
p
->
qtd
.bufptr[i];

1360 i‡(!(
q
->
qh
.
ïch¨
 & 
QH_EPCHAR_DTC
)) {

1362 
q
->
qh
.
tokí
 &~
QTD_TOKEN_DTOGGLE
;

1363 
q
->
qh
.
tokí
 |
dtoggÀ
;

1366 
q
->
qh
.
buÂå
[1] &~
BUFPTR_CPROGMASK_MASK
;

1367 
q
->
qh
.
buÂå
[2] &~
BUFPTR_FRAMETAG_MASK
;

1369 
	`ehci_Êush_qh
(
q
);

1372 
	}
}

1374 
	$ehci_öô_å™s„r
(
EHCIPackë
 *
p
)

1376 
uöt32_t
 
˝age
, 
off£t
, 
byãs
, 
∂í
;

1377 
dma_addr_t
 
∑ge
;

1379 
˝age
 = 
	`gë_fõld
(
p
->
qtd
.
tokí
, 
QTD_TOKEN_CPAGE
);

1380 
byãs
 = 
	`gë_fõld
(
p
->
qtd
.
tokí
, 
QTD_TOKEN_TBYTES
);

1381 
off£t
 = 
p
->
qtd
.
buÂå
[0] & ~
QTD_BUFPTR_MASK
;

1382 
	`pci_dma_sgli°_öô
(&
p
->
sgl
, &p->
queue
->
ehci
->
dev
, 5);

1384 
byãs
 > 0) {

1385 i‡(
˝age
 > 4) {

1386 
	`Ârötf
(
°dîr
, "˝agêouào‡øngê(%d)\n", 
˝age
);

1387  
USB_RET_PROCERR
;

1390 
∑ge
 = 
p
->
qtd
.
buÂå
[
˝age
] & 
QTD_BUFPTR_MASK
;

1391 
∑ge
 +
off£t
;

1392 
∂í
 = 
byãs
;

1393 i‡(
∂í
 > 4096 - 
off£t
) {

1394 
∂í
 = 4096 - 
off£t
;

1395 
off£t
 = 0;

1396 
˝age
++;

1399 
	`qemu_sgli°_add
(&
p
->
sgl
, 
∑ge
, 
∂í
);

1400 
byãs
 -
∂í
;

1403 
	}
}

1405 
	$ehci_föish_å™s„r
(
EHCIQueue
 *
q
, 
°©us
)

1407 
uöt32_t
 
˝age
, 
off£t
;

1409 i‡(
°©us
 > 0) {

1411 
˝age
 = 
	`gë_fõld
(
q
->
qh
.
tokí
, 
QTD_TOKEN_CPAGE
);

1412 
off£t
 = 
q
->
qh
.
buÂå
[0] & ~
QTD_BUFPTR_MASK
;

1414 
off£t
 +
°©us
;

1415 
˝age
 +
off£t
 >> 
QTD_BUFPTR_SH
;

1416 
off£t
 &~
QTD_BUFPTR_MASK
;

1418 
	`£t_fõld
(&
q
->
qh
.
tokí
, 
˝age
, 
QTD_TOKEN_CPAGE
);

1419 
q
->
qh
.
buÂå
[0] &
QTD_BUFPTR_MASK
;

1420 
q
->
qh
.
buÂå
[0] |
off£t
;

1422 
	}
}

1424 
	$ehci_async_com∂ëe_∑ckë
(
USBP‹t
 *
p‹t
, 
USBPackë
 *
∑ckë
)

1426 
EHCIPackë
 *
p
;

1427 
EHCISèã
 *
s
 = 
p‹t
->
›aque
;

1428 
uöt32_t
 
p‹tsc
 = 
s
->p‹tsc[
p‹t
->
ödex
];

1430 i‡(
p‹tsc
 & 
PORTSC_POWNER
) {

1431 
USBP‹t
 *
com∑ni⁄
 = 
s
->
com∑ni⁄_p‹ts
[
p‹t
->
ödex
];

1432 
com∑ni⁄
->
›s
->
	`com∂ëe
(com∑ni⁄, 
∑ckë
);

1436 
p
 = 
	`c⁄èöî_of
(
∑ckë
, 
EHCIPackë
,Öacket);

1437 
	`åa˚_usb_ehci_∑ckë_a˘i⁄
(
p
->
queue
,Ö, "wakeup");

1438 
	`as£π
(
p
->
async
 =
EHCI_ASYNC_INFLIGHT
);

1439 
p
->
async
 = 
EHCI_ASYNC_FINISHED
;

1440 
p
->
usb_°©us
 = 
∑ckë
->
ªsu…
;

1442 i‡(
p
->
queue
->
async
) {

1443 
	`qemu_bh_scheduÀ
(
p
->
queue
->
ehci
->
async_bh
);

1445 
	}
}

1447 
	$ehci_execuã_com∂ëe
(
EHCIQueue
 *
q
)

1449 
EHCIPackë
 *
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
);

1451 
	`as£π
(
p
 !
NULL
);

1452 
	`as£π
(
p
->
qtdaddr
 =
q
->qtdaddr);

1453 
	`as£π
(
p
->
async
 !
EHCI_ASYNC_INFLIGHT
);

1454 
p
->
async
 = 
EHCI_ASYNC_NONE
;

1456 
	`DPRINTF
("execute_complete: qhaddr 0x%x,Çext %x, qtdaddr 0x%x, status %d\n",

1457 
q
->
qhaddr
, q->
qh
.
√xt
, q->
qtdaddr
, q->
usb_°©us
);

1459 i‡(
p
->
usb_°©us
 < 0) {

1460 
p
->
usb_°©us
) {

1461 
USB_RET_IOERROR
:

1462 
USB_RET_NODEV
:

1463 
q
->
qh
.
tokí
 |(
QTD_TOKEN_HALT
 | 
QTD_TOKEN_XACTERR
);

1464 
	`£t_fõld
(&
q
->
qh
.
tokí
, 0, 
QTD_TOKEN_CERR
);

1465 
	`ehci_øi£_úq
(
q
->
ehci
, 
USBSTS_ERRINT
);

1467 
USB_RET_STALL
:

1468 
q
->
qh
.
tokí
 |
QTD_TOKEN_HALT
;

1469 
	`ehci_øi£_úq
(
q
->
ehci
, 
USBSTS_ERRINT
);

1471 
USB_RET_NAK
:

1472 
	`£t_fõld
(&
q
->
qh
.
Æäext_qtd
, 0, 
QH_ALTNEXT_NAKCNT
);

1474 
USB_RET_BABBLE
:

1475 
q
->
qh
.
tokí
 |(
QTD_TOKEN_HALT
 | 
QTD_TOKEN_BABBLE
);

1476 
	`ehci_øi£_úq
(
q
->
ehci
, 
USBSTS_ERRINT
);

1480 
	`Ârötf
(
°dîr
, "USB invÆidÑe•⁄£ %d\n", 
p
->
usb_°©us
);

1481 
	`as£π
(0);

1484 } i‡((
p
->
usb_°©us
 >Ö->
tbyãs
Ë&& (p->
pid
 =
USB_TOKEN_IN
)) {

1485 
p
->
usb_°©us
 = 
USB_RET_BABBLE
;

1486 
q
->
qh
.
tokí
 |(
QTD_TOKEN_HALT
 | 
QTD_TOKEN_BABBLE
);

1487 
	`ehci_øi£_úq
(
q
->
ehci
, 
USBSTS_ERRINT
);

1491 i‡(
p
->
tbyãs
 &&Ö->
pid
 =
USB_TOKEN_IN
) {

1492 
p
->
tbyãs
 -p->
usb_°©us
;

1494 
p
->
tbyãs
 = 0;

1497 
	`DPRINTF
("upd©ögÅbyã†tÿ%d\n", 
p
->
tbyãs
);

1498 
	`£t_fõld
(&
q
->
qh
.
tokí
, 
p
->
tbyãs
, 
QTD_TOKEN_TBYTES
);

1500 
	`ehci_föish_å™s„r
(
q
, 
p
->
usb_°©us
);

1501 
	`usb_∑ckë_unm≠
(&
p
->
∑ckë
, &p->
sgl
);

1502 
	`qemu_sgli°_de°roy
(&
p
->
sgl
);

1504 
q
->
qh
.
tokí
 ^
QTD_TOKEN_DTOGGLE
;

1505 
q
->
qh
.
tokí
 &~
QTD_TOKEN_ACTIVE
;

1507 i‡(
q
->
qh
.
tokí
 & 
QTD_TOKEN_IOC
) {

1508 
	`ehci_øi£_úq
(
q
->
ehci
, 
USBSTS_INT
);

1510 
	}
}

1514 
	$ehci_execuã
(
EHCIPackë
 *
p
, c⁄° *
a˘i⁄
)

1516 
USBEndpoöt
 *
ï
;

1517 
ªt
;

1518 
ídp
;

1520 i‡(!(
p
->
qtd
.
tokí
 & 
QTD_TOKEN_ACTIVE
)) {

1521 
	`Ârötf
(
°dîr
, "AttemptingÅoÉxecute inactive qtd\n");

1522  
USB_RET_PROCERR
;

1525 
p
->
tbyãs
 = (p->
qtd
.
tokí
 & 
QTD_TOKEN_TBYTES_MASK
Ë>> 
QTD_TOKEN_TBYTES_SH
;

1526 i‡(
p
->
tbyãs
 > 
BUFF_SIZE
) {

1527 
	`Ârötf
(
°dîr
, "Request for more bytesÅhanállowed\n");

1528  
USB_RET_PROCERR
;

1531 
p
->
pid
 = (p->
qtd
.
tokí
 & 
QTD_TOKEN_PID_MASK
Ë>> 
QTD_TOKEN_PID_SH
;

1532 
p
->
pid
) {

1534 
p
->
pid
 = 
USB_TOKEN_OUT
;

1537 
p
->
pid
 = 
USB_TOKEN_IN
;

1540 
p
->
pid
 = 
USB_TOKEN_SETUP
;

1543 
	`Ârötf
(
°dîr
, "badÅoken\n");

1547 i‡(
	`ehci_öô_å™s„r
(
p
) != 0) {

1548  
USB_RET_PROCERR
;

1551 
ídp
 = 
	`gë_fõld
(
p
->
queue
->
qh
.
ïch¨
, 
QH_EPCHAR_EP
);

1552 
ï
 = 
	`usb_ï_gë
(
p
->
queue
->
dev
,Ö->
pid
, 
ídp
);

1554 
	`usb_∑ckë_£tup
(&
p
->
∑ckë
,Ö->
pid
, 
ï
,Ö->
qtdaddr
);

1555 
	`usb_∑ckë_m≠
(&
p
->
∑ckë
, &p->
sgl
);

1557 
	`åa˚_usb_ehci_∑ckë_a˘i⁄
(
p
->
queue
,Ö, 
a˘i⁄
);

1558 
ªt
 = 
	`usb_h™dÀ_∑ckë
(
p
->
queue
->
dev
, &p->
∑ckë
);

1559 
	`DPRINTF
("submit: qh %xÇext %x qtd %xÖid %xÜen %zd "

1561 
q
->
qhaddr
, q->
qh
.
√xt
, q->
qtdaddr
, q->
pid
,

1562 
q
->
∑ckë
.
iov
.
size
, q->
tbyãs
, 
ídp
, 
ªt
);

1564 i‡(
ªt
 > 
BUFF_SIZE
) {

1565 
	`Ârötf
(
°dîr
, "ret from usb_handle_packet > BUFF_SIZE\n");

1566  
USB_RET_PROCERR
;

1569  
ªt
;

1570 
	}
}

1575 
	$ehci_¥o˚ss_ôd
(
EHCISèã
 *
ehci
,

1576 
EHCIôd
 *
ôd
,

1577 
uöt32_t
 
addr
)

1579 
USBDevi˚
 *
dev
;

1580 
USBEndpoöt
 *
ï
;

1581 
ªt
;

1582 
uöt32_t
 
i
, 
Àn
, 
pid
, 
dú
, 
devaddr
, 
ídp
;

1583 
uöt32_t
 
pg
, 
off
, 
±r1
, 
±r2
, 
max
, 
mu…
;

1585 
dú
 =(
ôd
->
buÂå
[1] & 
ITD_BUFPTR_DIRECTION
);

1586 
devaddr
 = 
	`gë_fõld
(
ôd
->
buÂå
[0], 
ITD_BUFPTR_DEVADDR
);

1587 
ídp
 = 
	`gë_fõld
(
ôd
->
buÂå
[0], 
ITD_BUFPTR_EP
);

1588 
max
 = 
	`gë_fõld
(
ôd
->
buÂå
[1], 
ITD_BUFPTR_MAXPKT
);

1589 
mu…
 = 
	`gë_fõld
(
ôd
->
buÂå
[2], 
ITD_BUFPTR_MULT
);

1591 
i
 = 0; i < 8; i++) {

1592 i‡(
ôd
->
å™ß˘
[
i
] & 
ITD_XACT_ACTIVE
) {

1593 
pg
 = 
	`gë_fõld
(
ôd
->
å™ß˘
[
i
], 
ITD_XACT_PGSEL
);

1594 
off
 = 
ôd
->
å™ß˘
[
i
] & 
ITD_XACT_OFFSET_MASK
;

1595 
±r1
 = (
ôd
->
buÂå
[
pg
] & 
ITD_BUFPTR_MASK
);

1596 
±r2
 = (
ôd
->
buÂå
[
pg
+1] & 
ITD_BUFPTR_MASK
);

1597 
Àn
 = 
	`gë_fõld
(
ôd
->
å™ß˘
[
i
], 
ITD_XACT_LENGTH
);

1599 i‡(
Àn
 > 
max
 * 
mu…
) {

1600 
Àn
 = 
max
 * 
mu…
;

1603 i‡(
Àn
 > 
BUFF_SIZE
) {

1604  
USB_RET_PROCERR
;

1607 
	`pci_dma_sgli°_öô
(&
ehci
->
isgl
, &ehci->
dev
, 2);

1608 i‡(
off
 + 
Àn
 > 4096) {

1610 
uöt32_t
 
Àn2
 = 
off
 + 
Àn
 - 4096;

1611 
uöt32_t
 
Àn1
 = 
Àn
 - 
Àn2
;

1612 
	`qemu_sgli°_add
(&
ehci
->
isgl
, 
±r1
 + 
off
, 
Àn1
);

1613 
	`qemu_sgli°_add
(&
ehci
->
isgl
, 
±r2
, 
Àn2
);

1615 
	`qemu_sgli°_add
(&
ehci
->
isgl
, 
±r1
 + 
off
, 
Àn
);

1618 
pid
 = 
dú
 ? 
USB_TOKEN_IN
 : 
USB_TOKEN_OUT
;

1620 
dev
 = 
	`ehci_föd_devi˚
(
ehci
, 
devaddr
);

1621 
ï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
ídp
);

1622 i‡(
ï
 &&Ép->
ty≥
 =
USB_ENDPOINT_XFER_ISOC
) {

1623 
	`usb_∑ckë_£tup
(&
ehci
->
ùackë
, 
pid
, 
ï
, 
addr
);

1624 
	`usb_∑ckë_m≠
(&
ehci
->
ùackë
, &ehci->
isgl
);

1625 
ªt
 = 
	`usb_h™dÀ_∑ckë
(
dev
, &
ehci
->
ùackë
);

1626 
	`as£π
(
ªt
 !
USB_RET_ASYNC
);

1627 
	`usb_∑ckë_unm≠
(&
ehci
->
ùackë
, &ehci->
isgl
);

1629 
	`DPRINTF
("ISOCH:áttemptÅoáddessÇon-isoÉndpoint\n");

1630 
ªt
 = 
USB_RET_NAK
;

1632 
	`qemu_sgli°_de°roy
(&
ehci
->
isgl
);

1634 i‡(
ªt
 < 0) {

1635 
ªt
) {

1637 
	`Ârötf
(
°dîr
, "U√x≥˘ed isÿusbÑesu…: %d\n", 
ªt
);

1639 
USB_RET_IOERROR
:

1640 
USB_RET_NODEV
:

1642 i‡(
dú
) {

1643 
ôd
->
å™ß˘
[
i
] |
ITD_XACT_XACTERR
;

1644 
	`ehci_øi£_úq
(
ehci
, 
USBSTS_ERRINT
);

1647 
USB_RET_BABBLE
:

1648 
ôd
->
å™ß˘
[
i
] |
ITD_XACT_BABBLE
;

1649 
	`ehci_øi£_úq
(
ehci
, 
USBSTS_ERRINT
);

1651 
USB_RET_NAK
:

1653 
ªt
 = 0;

1657 i‡(
ªt
 >= 0) {

1658 i‡(!
dú
) {

1660 
	`£t_fõld
(&
ôd
->
å™ß˘
[
i
], 
Àn
 - 
ªt
, 
ITD_XACT_LENGTH
);

1663 
	`£t_fõld
(&
ôd
->
å™ß˘
[
i
], 
ªt
, 
ITD_XACT_LENGTH
);

1666 i‡(
ôd
->
å™ß˘
[
i
] & 
ITD_XACT_IOC
) {

1667 
	`ehci_øi£_úq
(
ehci
, 
USBSTS_INT
);

1669 
ôd
->
å™ß˘
[
i
] &~
ITD_XACT_ACTIVE
;

1673 
	}
}

1679 
	$ehci_°©e_waôli°hód
(
EHCISèã
 *
ehci
, 
async
)

1681 
EHCIqh
 
qh
;

1682 
i
 = 0;

1683 
agaö
 = 0;

1684 
uöt32_t
 
íåy
 = 
ehci
->
asyn˛i°addr
;

1687 i‡(
async
) {

1688 
	`ehci_£t_usb°s
(
ehci
, 
USBSTS_REC
);

1691 
	`ehci_queues_rù_unu£d
(
ehci
, 
async
);

1694 
i
 = 0; i < 
MAX_QH
; i++) {

1695 
	`gë_dw‹ds
(
ehci
, 
	`NLPTR_GET
(
íåy
), (
uöt32_t
 *Ë&
qh
,

1696 (
EHCIqh
) >> 2);

1697 
	`ehci_åa˚_qh
(
NULL
, 
	`NLPTR_GET
(
íåy
), &
qh
);

1699 i‡(
qh
.
ïch¨
 & 
QH_EPCHAR_H
) {

1700 i‡(
async
) {

1701 
íåy
 |(
NLPTR_TYPE_QH
 << 1);

1704 
	`ehci_£t_„tch_addr
(
ehci
, 
async
, 
íåy
);

1705 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_FETCHENTRY
);

1706 
agaö
 = 1;

1707 
out
;

1710 
íåy
 = 
qh
.
√xt
;

1711 i‡(
íåy
 =
ehci
->
asyn˛i°addr
) {

1718 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_ACTIVE
);

1720 
out
:

1721  
agaö
;

1722 
	}
}

1728 
	$ehci_°©e_„tchíåy
(
EHCISèã
 *
ehci
, 
async
)

1730 
agaö
 = 0;

1731 
uöt32_t
 
íåy
 = 
	`ehci_gë_„tch_addr
(
ehci
, 
async
);

1733 i‡(
	`NLPTR_TBIT
(
íåy
)) {

1734 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_ACTIVE
);

1735 
out
;

1739 i‡(
async
 && (
	`NLPTR_TYPE_GET
(
íåy
Ë!
NLPTR_TYPE_QH
)) {

1740 
	`Ârötf
(
°dîr
, "non queue headÑequest inásync schedule\n");

1744 
	`NLPTR_TYPE_GET
(
íåy
)) {

1745 
NLPTR_TYPE_QH
:

1746 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_FETCHQH
);

1747 
agaö
 = 1;

1750 
NLPTR_TYPE_ITD
:

1751 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_FETCHITD
);

1752 
agaö
 = 1;

1755 
NLPTR_TYPE_STITD
:

1756 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_FETCHSITD
);

1757 
agaö
 = 1;

1762 
	`Ârötf
(
°dîr
, "FETCHENTRY:Éntryát %X is ofÅype %d "

1763 "which i†nŸ suµ‹ãd yë\n", 
íåy
, 
	`NLPTR_TYPE_GET
(entry));

1767 
out
:

1768  
agaö
;

1769 
	}
}

1771 
EHCIQueue
 *
	$ehci_°©e_„tchqh
(
EHCISèã
 *
ehci
, 
async
)

1773 
EHCIPackë
 *
p
;

1774 
uöt32_t
 
íåy
, 
devaddr
;

1775 
EHCIQueue
 *
q
;

1776 
EHCIqh
 
qh
;

1778 
íåy
 = 
	`ehci_gë_„tch_addr
(
ehci
, 
async
);

1779 
q
 = 
	`ehci_föd_queue_by_qh
(
ehci
, 
íåy
, 
async
);

1780 i‡(
NULL
 =
q
) {

1781 
q
 = 
	`ehci_Æloc_queue
(
ehci
, 
íåy
, 
async
);

1783 
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
);

1785 
q
->
£í
++;

1786 i‡(
q
->
£í
 > 1) {

1788 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_ACTIVE
);

1789 
q
 = 
NULL
;

1790 
out
;

1793 
	`gë_dw‹ds
(
ehci
, 
	`NLPTR_GET
(
q
->
qhaddr
),

1794 (
uöt32_t
 *Ë&
qh
, (
EHCIqh
) >> 2);

1795 i‡(
q
->
ªvÆid©e
 && (q->
qh
.
ïch¨
 != qh.epchar ||

1796 
q
->
qh
.
ïˇp
 != qh.epcap ||

1797 
q
->
qh
.
cuºít_qtd
 != qh.current_qtd)) {

1798 
	`ehci_‰ì_queue
(
q
);

1799 
q
 = 
	`ehci_Æloc_queue
(
ehci
, 
íåy
, 
async
);

1800 
q
->
£í
++;

1801 
p
 = 
NULL
;

1803 
q
->
qh
 = qh;

1804 
q
->
ªvÆid©e
 = 0;

1805 
	`ehci_åa˚_qh
(
q
, 
	`NLPTR_GET
(q->
qhaddr
), &q->
qh
);

1807 
devaddr
 = 
	`gë_fõld
(
q
->
qh
.
ïch¨
, 
QH_EPCHAR_DEVADDR
);

1808 i‡(
q
->
dev
 !
NULL
 && q->dev->
addr
 !
devaddr
) {

1809 i‡(!
	`QTAILQ_EMPTY
(&
q
->
∑ckës
)) {

1811 
	`ehci_ˇn˚l_queue
(
q
);

1813 
q
->
dev
 = 
NULL
;

1815 i‡(
q
->
dev
 =
NULL
) {

1816 
q
->
dev
 = 
	`ehci_föd_devi˚
(q->
ehci
, 
devaddr
);

1819 i‡(
p
 &&Ö->
async
 =
EHCI_ASYNC_FINISHED
) {

1821 
	`åa˚_usb_ehci_∑ckë_a˘i⁄
(
p
->
queue
,Ö, "complete");

1822 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_EXECUTING
);

1823 
out
;

1826 i‡(
async
 && (
q
->
qh
.
ïch¨
 & 
QH_EPCHAR_H
)) {

1829 i‡(
ehci
->
usb°s
 & 
USBSTS_REC
) {

1830 
	`ehci_˛ór_usb°s
(
ehci
, 
USBSTS_REC
);

1832 
	`DPRINTF
("FETCHQH: QH 0x%08x. H-bit set,Ñeclamation statusÑeset"

1833 " - d⁄ê¥o˚ssög\n", 
q
->
qhaddr
);

1834 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_ACTIVE
);

1835 
q
 = 
NULL
;

1836 
out
;

1840 #i‡
EHCI_DEBUG


1841 i‡(
q
->
qhaddr
 !q->
qh
.
√xt
) {

1842 
	`DPRINTF
("FETCHQH: QH 0x%08x (h %x halt %xáctive %x)Çext 0x%08x\n",

1843 
q
->
qhaddr
,

1844 
q
->
qh
.
ïch¨
 & 
QH_EPCHAR_H
,

1845 
q
->
qh
.
tokí
 & 
QTD_TOKEN_HALT
,

1846 
q
->
qh
.
tokí
 & 
QTD_TOKEN_ACTIVE
,

1847 
q
->
qh
.
√xt
);

1851 i‡(
q
->
qh
.
tokí
 & 
QTD_TOKEN_HALT
) {

1852 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_HORIZONTALQH
);

1854 } i‡((
q
->
qh
.
tokí
 & 
QTD_TOKEN_ACTIVE
) &&

1855 (
	`NLPTR_TBIT
(
q
->
qh
.
cuºít_qtd
) == 0)) {

1856 
q
->
qtdaddr
 = q->
qh
.
cuºít_qtd
;

1857 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_FETCHQTD
);

1861 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_ADVANCEQUEUE
);

1864 
out
:

1865  
q
;

1866 
	}
}

1868 
	$ehci_°©e_„tchôd
(
EHCISèã
 *
ehci
, 
async
)

1870 
uöt32_t
 
íåy
;

1871 
EHCIôd
 
ôd
;

1873 
	`as£π
(!
async
);

1874 
íåy
 = 
	`ehci_gë_„tch_addr
(
ehci
, 
async
);

1876 
	`gë_dw‹ds
(
ehci
, 
	`NLPTR_GET
(
íåy
), (
uöt32_t
 *Ë&
ôd
,

1877 (
EHCIôd
) >> 2);

1878 
	`ehci_åa˚_ôd
(
ehci
, 
íåy
, &
ôd
);

1880 i‡(
	`ehci_¥o˚ss_ôd
(
ehci
, &
ôd
, 
íåy
) != 0) {

1884 
	`put_dw‹ds
(
ehci
, 
	`NLPTR_GET
(
íåy
), (
uöt32_t
 *Ë&
ôd
,

1885 (
EHCIôd
) >> 2);

1886 
	`ehci_£t_„tch_addr
(
ehci
, 
async
, 
ôd
.
√xt
);

1887 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_FETCHENTRY
);

1890 
	}
}

1892 
	$ehci_°©e_„tchsôd
(
EHCISèã
 *
ehci
, 
async
)

1894 
uöt32_t
 
íåy
;

1895 
EHCIsôd
 
sôd
;

1897 
	`as£π
(!
async
);

1898 
íåy
 = 
	`ehci_gë_„tch_addr
(
ehci
, 
async
);

1900 
	`gë_dw‹ds
(
ehci
, 
	`NLPTR_GET
(
íåy
), (
uöt32_t
 *)&
sôd
,

1901 (
EHCIsôd
) >> 2);

1902 
	`ehci_åa˚_sôd
(
ehci
, 
íåy
, &
sôd
);

1904 i‡(!(
sôd
.
ªsu…s
 & 
SITD_RESULTS_ACTIVE
)) {

1908 
	`Ârötf
(
°dîr
, "WARNING: Skippingáctive siTD\n");

1911 
	`ehci_£t_„tch_addr
(
ehci
, 
async
, 
sôd
.
√xt
);

1912 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_FETCHENTRY
);

1914 
	}
}

1917 
	$ehci_°©e_advqueue
(
EHCIQueue
 *
q
)

1924 i‡(
I
-
bô
 
£t
) {

1925 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_HORIZONTALQH
);

1926 
out
;

1933 i‡(((
q
->
qh
.
tokí
 & 
QTD_TOKEN_TBYTES_MASK
) != 0) &&

1934 (
	`NLPTR_TBIT
(
q
->
qh
.
Æäext_qtd
) == 0)) {

1935 
q
->
qtdaddr
 = q->
qh
.
Æäext_qtd
;

1936 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_FETCHQTD
);

1941 } i‡(
	`NLPTR_TBIT
(
q
->
qh
.
√xt_qtd
) == 0) {

1942 
q
->
qtdaddr
 = q->
qh
.
√xt_qtd
;

1943 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_FETCHQTD
);

1949 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_HORIZONTALQH
);

1953 
	}
}

1956 
	$ehci_°©e_„tchqtd
(
EHCIQueue
 *
q
)

1958 
EHCIqtd
 
qtd
;

1959 
EHCIPackë
 *
p
;

1960 
agaö
 = 0;

1962 
	`gë_dw‹ds
(
q
->
ehci
, 
	`NLPTR_GET
(q->
qtdaddr
), (
uöt32_t
 *Ë&
qtd
,

1963 (
EHCIqtd
) >> 2);

1964 
	`ehci_åa˚_qtd
(
q
, 
	`NLPTR_GET
(q->
qtdaddr
), &
qtd
);

1966 
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
);

1967 i‡(
p
 !
NULL
) {

1968 i‡(
p
->
qtdaddr
 !
q
->qtdaddr ||

1969 (!
	`NLPTR_TBIT
(
p
->
qtd
.
√xt
) && (p->qtd.next != qtd.next)) ||

1970 (!
	`NLPTR_TBIT
(
p
->
qtd
.
Æäext
) && (p->qtd.altnext != qtd.altnext)) ||

1971 
p
->
qtd
.
buÂå
[0] != qtd.bufptr[0]) {

1973 
	`ehci_ˇn˚l_queue
(
q
);

1974 
p
 = 
NULL
;

1976 
p
->
qtd
 = qtd;

1977 
	`ehci_qh_do_ovîœy
(
q
);

1981 i‡(!(
qtd
.
tokí
 & 
QTD_TOKEN_ACTIVE
)) {

1982 i‡(
p
 !
NULL
) {

1984 
	`ehci_ˇn˚l_queue
(
q
);

1985 
p
 = 
NULL
;

1987 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_HORIZONTALQH
);

1988 
agaö
 = 1;

1989 } i‡(
p
 !
NULL
) {

1990 
p
->
async
) {

1991 
EHCI_ASYNC_NONE
:

1993 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_EXECUTE
);

1995 
EHCI_ASYNC_INFLIGHT
:

1997 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_HORIZONTALQH
);

1999 
EHCI_ASYNC_FINISHED
:

2001 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_EXECUTING
);

2004 
agaö
 = 1;

2006 
p
 = 
	`ehci_Æloc_∑ckë
(
q
);

2007 
p
->
qtdaddr
 = 
q
->qtdaddr;

2008 
p
->
qtd
 = qtd;

2009 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_EXECUTE
);

2010 
agaö
 = 1;

2013  
agaö
;

2014 
	}
}

2016 
	$ehci_°©e_h‹izqh
(
EHCIQueue
 *
q
)

2018 
agaö
 = 0;

2020 i‡(
	`ehci_gë_„tch_addr
(
q
->
ehci
, q->
async
Ë!q->
qh
.
√xt
) {

2021 
	`ehci_£t_„tch_addr
(
q
->
ehci
, q->
async
, q->
qh
.
√xt
);

2022 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_FETCHENTRY
);

2023 
agaö
 = 1;

2025 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_ACTIVE
);

2028  
agaö
;

2029 
	}
}

2031 
	$ehci_fûl_queue
(
EHCIPackë
 *
p
)

2033 
EHCIQueue
 *
q
 = 
p
->
queue
;

2034 
EHCIqtd
 
qtd
 = 
p
->qtd;

2035 
uöt32_t
 
qtdaddr
;

2038 i‡(
	`NLPTR_TBIT
(
qtd
.
Æäext
) == 0) {

2041 i‡(
	`NLPTR_TBIT
(
qtd
.
√xt
) != 0) {

2044 
qtdaddr
 = 
qtd
.
√xt
;

2045 
	`gë_dw‹ds
(
q
->
ehci
, 
	`NLPTR_GET
(
qtdaddr
),

2046 (
uöt32_t
 *Ë&
qtd
, (
EHCIqtd
) >> 2);

2047 
	`ehci_åa˚_qtd
(
q
, 
	`NLPTR_GET
(
qtdaddr
), &
qtd
);

2048 i‡(!(
qtd
.
tokí
 & 
QTD_TOKEN_ACTIVE
)) {

2051 
p
 = 
	`ehci_Æloc_∑ckë
(
q
);

2052 
p
->
qtdaddr
 = qtdaddr;

2053 
p
->
qtd
 = qtd;

2054 
p
->
usb_°©us
 = 
	`ehci_execuã
(p, "queue");

2055 
	`as£π
(
p
->
usb_°©us
 =
USB_RET_ASYNC
);

2056 
p
->
async
 = 
EHCI_ASYNC_INFLIGHT
;

2058 
	}
}

2060 
	$ehci_°©e_execuã
(
EHCIQueue
 *
q
)

2062 
EHCIPackë
 *
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
);

2063 
agaö
 = 0;

2065 
	`as£π
(
p
 !
NULL
);

2066 
	`as£π
(
p
->
qtdaddr
 =
q
->qtdaddr);

2068 i‡(
	`ehci_qh_do_ovîœy
(
q
) != 0) {

2076 i‡(!
q
->
async
) {

2077 
å™ß˘Cå
 = 
	`gë_fõld
(
q
->
qh
.
ïˇp
, 
QH_EPCAP_MULT
);

2078 i‡(!
å™ß˘Cå
) {

2079 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_HORIZONTALQH
);

2080 
agaö
 = 1;

2081 
out
;

2085 i‡(
q
->
async
) {

2086 
	`ehci_£t_usb°s
(
q
->
ehci
, 
USBSTS_REC
);

2089 
p
->
usb_°©us
 = 
	`ehci_execuã
(p, "process");

2090 i‡(
p
->
usb_°©us
 =
USB_RET_PROCERR
) {

2091 
agaö
 = -1;

2092 
out
;

2094 i‡(
p
->
usb_°©us
 =
USB_RET_ASYNC
) {

2095 
	`ehci_Êush_qh
(
q
);

2096 
	`åa˚_usb_ehci_∑ckë_a˘i⁄
(
p
->
queue
,Ö, "async");

2097 
p
->
async
 = 
EHCI_ASYNC_INFLIGHT
;

2098 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_HORIZONTALQH
);

2099 
agaö
 = 1;

2100 
	`ehci_fûl_queue
(
p
);

2101 
out
;

2104 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_EXECUTING
);

2105 
agaö
 = 1;

2107 
out
:

2108  
agaö
;

2109 
	}
}

2111 
	$ehci_°©e_executög
(
EHCIQueue
 *
q
)

2113 
EHCIPackë
 *
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
);

2115 
	`as£π
(
p
 !
NULL
);

2116 
	`as£π
(
p
->
qtdaddr
 =
q
->qtdaddr);

2118 
	`ehci_execuã_com∂ëe
(
q
);

2121 i‡(!
q
->
async
) {

2122 
å™ß˘Cå
 = 
	`gë_fõld
(
q
->
qh
.
ïˇp
, 
QH_EPCAP_MULT
);

2123 
å™ß˘Cå
--;

2124 
	`£t_fõld
(&
q
->
qh
.
ïˇp
, 
å™ß˘Cå
, 
QH_EPCAP_MULT
);

2130 i‡(
p
->
usb_°©us
 =
USB_RET_NAK
) {

2131 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_HORIZONTALQH
);

2133 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_WRITEBACK
);

2136 
	`ehci_Êush_qh
(
q
);

2138 
	}
}

2141 
	$ehci_°©e_wrôeback
(
EHCIQueue
 *
q
)

2143 
EHCIPackë
 *
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
);

2144 
uöt32_t
 *
qtd
, 
addr
;

2145 
agaö
 = 0;

2148 
	`as£π
(
p
 !
NULL
);

2149 
	`as£π
(
p
->
qtdaddr
 =
q
->qtdaddr);

2151 
	`ehci_åa˚_qtd
(
q
, 
	`NLPTR_GET
(
p
->
qtdaddr
), (
EHCIqtd
 *Ë&q->
qh
.
√xt_qtd
);

2152 
qtd
 = (
uöt32_t
 *Ë&
q
->
qh
.
√xt_qtd
;

2153 
addr
 = 
	`NLPTR_GET
(
p
->
qtdaddr
);

2154 
	`put_dw‹ds
(
q
->
ehci
, 
addr
 + 2 * (
uöt32_t
), 
qtd
 + 2, 2);

2155 
	`ehci_‰ì_∑ckë
(
p
);

2165 i‡(
q
->
qh
.
tokí
 & 
QTD_TOKEN_HALT
) {

2176 (
p
 = 
	`QTAILQ_FIRST
(&
q
->
∑ckës
)Ë!
NULL
) {

2177 
	`ehci_‰ì_∑ckë
(
p
);

2179 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_HORIZONTALQH
);

2180 
agaö
 = 1;

2182 
	`ehci_£t_°©e
(
q
->
ehci
, q->
async
, 
EST_ADVANCEQUEUE
);

2183 
agaö
 = 1;

2185  
agaö
;

2186 
	}
}

2192 
	$ehci_adv™˚_°©e
(
EHCISèã
 *
ehci
, 
async
)

2194 
EHCIQueue
 *
q
 = 
NULL
;

2195 
agaö
;

2198 
	`ehci_gë_°©e
(
ehci
, 
async
)) {

2199 
EST_WAITLISTHEAD
:

2200 
agaö
 = 
	`ehci_°©e_waôli°hód
(
ehci
, 
async
);

2203 
EST_FETCHENTRY
:

2204 
agaö
 = 
	`ehci_°©e_„tchíåy
(
ehci
, 
async
);

2207 
EST_FETCHQH
:

2208 
q
 = 
	`ehci_°©e_„tchqh
(
ehci
, 
async
);

2209 i‡(
q
 !
NULL
) {

2210 
	`as£π
(
q
->
async
 ==ásync);

2211 
agaö
 = 1;

2213 
agaö
 = 0;

2217 
EST_FETCHITD
:

2218 
agaö
 = 
	`ehci_°©e_„tchôd
(
ehci
, 
async
);

2221 
EST_FETCHSITD
:

2222 
agaö
 = 
	`ehci_°©e_„tchsôd
(
ehci
, 
async
);

2225 
EST_ADVANCEQUEUE
:

2226 
agaö
 = 
	`ehci_°©e_advqueue
(
q
);

2229 
EST_FETCHQTD
:

2230 
agaö
 = 
	`ehci_°©e_„tchqtd
(
q
);

2233 
EST_HORIZONTALQH
:

2234 
agaö
 = 
	`ehci_°©e_h‹izqh
(
q
);

2237 
EST_EXECUTE
:

2238 
agaö
 = 
	`ehci_°©e_execuã
(
q
);

2239 i‡(
async
) {

2240 
ehci
->
async_°ïdown
 = 0;

2244 
EST_EXECUTING
:

2245 
	`as£π
(
q
 !
NULL
);

2246 i‡(
async
) {

2247 
ehci
->
async_°ïdown
 = 0;

2249 
agaö
 = 
	`ehci_°©e_executög
(
q
);

2252 
EST_WRITEBACK
:

2253 
	`as£π
(
q
 !
NULL
);

2254 
agaö
 = 
	`ehci_°©e_wrôeback
(
q
);

2258 
	`Ârötf
(
°dîr
, "Bad state!\n");

2259 
agaö
 = -1;

2260 
	`as£π
(0);

2264 i‡(
agaö
 < 0) {

2265 
	`Ârötf
(
°dîr
, "processingÉrror -ÑesettingÉhci HC\n");

2266 
	`ehci_ª£t
(
ehci
);

2267 
agaö
 = 0;

2270 
agaö
);

2271 
	}
}

2273 
	$ehci_adv™˚_async_°©e
(
EHCISèã
 *
ehci
)

2275 c⁄° 
async
 = 1;

2277 
	`ehci_gë_°©e
(
ehci
, 
async
)) {

2278 
EST_INACTIVE
:

2279 i‡(!
	`ehci_async_íabÀd
(
ehci
)) {

2282 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_ACTIVE
);

2285 
EST_ACTIVE
:

2286 i‡(!
	`ehci_async_íabÀd
(
ehci
)) {

2287 
	`ehci_queues_rù_Æl
(
ehci
, 
async
);

2288 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_INACTIVE
);

2294 i‡(
ehci
->
usb°s
 & 
USBSTS_IAA
) {

2295 
	`DPRINTF
("IAA status bit still set.\n");

2300 i‡(
ehci
->
asyn˛i°addr
 == 0) {

2304 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_WAITLISTHEAD
);

2305 
	`ehci_adv™˚_°©e
(
ehci
, 
async
);

2311 i‡(
ehci
->
usbcmd
 & 
USBCMD_IAAD
) {

2313 
	`ehci_queues_èg_unu£d_async
(
ehci
);

2314 
	`DPRINTF
("ASYNC: doorbellÑequestácknowledged\n");

2315 
ehci
->
usbcmd
 &~
USBCMD_IAAD
;

2316 
	`ehci_øi£_úq
(
ehci
, 
USBSTS_IAA
);

2322 
	`Ârötf
(
°dîr
, "ehci: Badásynchronous state %d. "

2323 "Re£âögÅÿa˘ive\n", 
ehci
->
a°©e
);

2324 
	`as£π
(0);

2326 
	}
}

2328 
	$ehci_adv™˚_≥riodic_°©e
(
EHCISèã
 *
ehci
)

2330 
uöt32_t
 
íåy
;

2331 
uöt32_t
 
li°
;

2332 c⁄° 
async
 = 0;

2336 
	`ehci_gë_°©e
(
ehci
, 
async
)) {

2337 
EST_INACTIVE
:

2338 i‡(!(
ehci
->
‰ödex
 & 7Ë&& 
	`ehci_≥riodic_íabÀd
(ehci)) {

2339 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_ACTIVE
);

2344 
EST_ACTIVE
:

2345 i‡(!(
ehci
->
‰ödex
 & 7Ë&& !
	`ehci_≥riodic_íabÀd
(ehci)) {

2346 
	`ehci_queues_rù_Æl
(
ehci
, 
async
);

2347 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_INACTIVE
);

2351 
li°
 = 
ehci
->
≥riodi˛i°ba£
 & 0xfffff000;

2353 i‡(
li°
 == 0) {

2356 
li°
 |((
ehci
->
‰ödex
 & 0x1ff8) >> 1);

2358 
	`pci_dma_ªad
(&
ehci
->
dev
, 
li°
, &
íåy
, Éntry);

2359 
íåy
 = 
	`À32_to_˝u
(entry);

2361 
	`DPRINTF
("PERIODIC stateádv fr=%d. [%08X] -> %08X\n",

2362 
ehci
->
‰ödex
 / 8, 
li°
, 
íåy
);

2363 
	`ehci_£t_„tch_addr
(
ehci
, 
async
,
íåy
);

2364 
	`ehci_£t_°©e
(
ehci
, 
async
, 
EST_FETCHENTRY
);

2365 
	`ehci_adv™˚_°©e
(
ehci
, 
async
);

2366 
	`ehci_queues_rù_unu£d
(
ehci
, 
async
);

2371 
	`Ârötf
(
°dîr
, "ehci: BadÖeriodic state %d. "

2372 "Re£âögÅÿa˘ive\n", 
ehci
->
p°©e
);

2373 
	`as£π
(0);

2375 
	}
}

2377 
	$ehci_upd©e_‰ödex
(
EHCISèã
 *
ehci
, 
‰ames
)

2379 
i
;

2381 i‡(!
	`ehci_íabÀd
(
ehci
)) {

2385 
i
 = 0; i < 
‰ames
; i++) {

2386 
ehci
->
‰ödex
 += 8;

2388 i‡(
ehci
->
‰ödex
 == 0x00002000) {

2389 
	`ehci_øi£_úq
(
ehci
, 
USBSTS_FLR
);

2392 i‡(
ehci
->
‰ödex
 == 0x00004000) {

2393 
	`ehci_øi£_úq
(
ehci
, 
USBSTS_FLR
);

2394 
ehci
->
‰ödex
 = 0;

2395 i‡(
ehci
->
usb°s_‰ödex
 > 0x00004000) {

2396 
ehci
->
usb°s_‰ödex
 -= 0x00004000;

2398 
ehci
->
usb°s_‰ödex
 = 0;

2402 
	}
}

2404 
	$ehci_‰ame_timî
(*
›aque
)

2406 
EHCISèã
 *
ehci
 = 
›aque
;

2407 
√ed_timî
 = 0;

2408 
öt64_t
 
expúe_time
, 
t_now
;

2409 
uöt64_t
 
ns_ñ≠£d
;

2410 
‰ames
, 
skù≥d_‰ames
;

2411 
i
;

2413 
t_now
 = 
	`qemu_gë_˛ock_ns
(
vm_˛ock
);

2414 
ns_ñ≠£d
 = 
t_now
 - 
ehci
->
œ°_run_ns
;

2415 
‰ames
 = 
ns_ñ≠£d
 / 
FRAME_TIMER_NS
;

2417 i‡(
	`ehci_≥riodic_íabÀd
(
ehci
Ë||Éhci->
p°©e
 !
EST_INACTIVE
) {

2418 
√ed_timî
++;

2419 
ehci
->
async_°ïdown
 = 0;

2421 i‡(
‰ames
 > 
ehci
->
max‰ames
) {

2422 
skù≥d_‰ames
 = 
‰ames
 - 
ehci
->
max‰ames
;

2423 
	`ehci_upd©e_‰ödex
(
ehci
, 
skù≥d_‰ames
);

2424 
ehci
->
œ°_run_ns
 +
FRAME_TIMER_NS
 * 
skù≥d_‰ames
;

2425 
‰ames
 -
skù≥d_‰ames
;

2426 
	`DPRINTF
("WARNING - EHCI skù≥d %d fømes\n", 
skù≥d_‰ames
);

2429 
i
 = 0; i < 
‰ames
; i++) {

2430 
	`ehci_upd©e_‰ödex
(
ehci
, 1);

2431 
	`ehci_adv™˚_≥riodic_°©e
(
ehci
);

2432 
ehci
->
œ°_run_ns
 +
FRAME_TIMER_NS
;

2435 i‡(
ehci
->
async_°ïdown
 <Éhci->
max‰ames
 / 2) {

2436 
ehci
->
async_°ïdown
++;

2438 
	`ehci_upd©e_‰ödex
(
ehci
, 
‰ames
);

2439 
ehci
->
œ°_run_ns
 +
FRAME_TIMER_NS
 * 
‰ames
;

2445 i‡(
	`ehci_async_íabÀd
(
ehci
Ë||Éhci->
a°©e
 !
EST_INACTIVE
) {

2446 
√ed_timî
++;

2447 
	`ehci_adv™˚_async_°©e
(
ehci
);

2450 
	`ehci_commô_úq
(
ehci
);

2451 i‡(
ehci
->
usb°s_≥ndög
) {

2452 
√ed_timî
++;

2453 
ehci
->
async_°ïdown
 = 0;

2456 i‡(
√ed_timî
) {

2457 
expúe_time
 = 
t_now
 + (
	`gë_ticks_≥r_£c
()

2458 * (
ehci
->
async_°ïdown
+1Ë/ 
FRAME_TIMER_FREQ
);

2459 
	`qemu_mod_timî
(
ehci
->
‰ame_timî
, 
expúe_time
);

2461 
	}
}

2463 
	$ehci_async_bh
(*
›aque
)

2465 
EHCISèã
 *
ehci
 = 
›aque
;

2466 
	`ehci_adv™˚_async_°©e
(
ehci
);

2467 
	}
}

2469 c⁄° 
Mem‹yRegi⁄Ops
 
	gehci_mem_›s
 = {

2470 .
ﬁd_mmio
 = {

2471 .
ªad
 = { 
ehci_mem_ªadb
, 
ehci_mem_ªadw
, 
ehci_mem_ªadl
 },

2472 .
	gwrôe
 = { 
ehci_mem_wrôeb
, 
ehci_mem_wrôew
, 
ehci_mem_wrôñ
 },

2474 .
	gídü¬ess
 = 
DEVICE_LITTLE_ENDIAN
,

2477 
usb_ehci_öô‚
(
PCIDevi˚
 *
dev
);

2479 
USBP‹tOps
 
	gehci_p‹t_›s
 = {

2480 .
©èch
 = 
ehci_©èch
,

2481 .
	gdëach
 = 
ehci_dëach
,

2482 .
	gchûd_dëach
 = 
ehci_chûd_dëach
,

2483 .
	gwakeup
 = 
ehci_wakeup
,

2484 .
	gcom∂ëe
 = 
ehci_async_com∂ëe_∑ckë
,

2487 
USBBusOps
 
	gehci_bus_›s
 = {

2488 .
ªgi°î_com∑ni⁄
 = 
ehci_ªgi°î_com∑ni⁄
,

2491 
	$usb_ehci_po°_lﬂd
(*
›aque
, 
vîsi⁄_id
)

2493 
EHCISèã
 *
s
 = 
›aque
;

2494 
i
;

2496 
i
 = 0; i < 
NB_PORTS
; i++) {

2497 
USBP‹t
 *
com∑ni⁄
 = 
s
->
com∑ni⁄_p‹ts
[
i
];

2498 i‡(
com∑ni⁄
 =
NULL
) {

2501 i‡(
s
->
p‹tsc
[
i
] & 
PORTSC_POWNER
) {

2502 
com∑ni⁄
->
dev
 = 
s
->
p‹ts
[
i
].dev;

2504 
com∑ni⁄
->
dev
 = 
NULL
;

2509 
	}
}

2511 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_ehci
 = {

2512 .
«me
 = "ehci",

2513 .
	gvîsi⁄_id
 = 2,

2514 .
	gmöimum_vîsi⁄_id
 = 1,

2515 .
	gpo°_lﬂd
 = 
usb_ehci_po°_lﬂd
,

2516 .
	gfõlds
 = (
VMSèãFõld
[]) {

2517 
VMSTATE_PCI_DEVICE
(
dev
, 
EHCISèã
),

2519 
VMSTATE_UINT32
(
usbcmd
, 
EHCISèã
),

2520 
VMSTATE_UINT32
(
usb°s
, 
EHCISèã
),

2521 
VMSTATE_UINT32_V
(
usb°s_≥ndög
, 
EHCISèã
, 2),

2522 
VMSTATE_UINT32_V
(
usb°s_‰ödex
, 
EHCISèã
, 2),

2523 
VMSTATE_UINT32
(
usböå
, 
EHCISèã
),

2524 
VMSTATE_UINT32
(
‰ödex
, 
EHCISèã
),

2525 
VMSTATE_UINT32
(
˘æds£gmít
, 
EHCISèã
),

2526 
VMSTATE_UINT32
(
≥riodi˛i°ba£
, 
EHCISèã
),

2527 
VMSTATE_UINT32
(
asyn˛i°addr
, 
EHCISèã
),

2528 
VMSTATE_UINT32
(
c⁄figÊag
, 
EHCISèã
),

2529 
VMSTATE_UINT32
(
p‹tsc
[0], 
EHCISèã
),

2530 
VMSTATE_UINT32
(
p‹tsc
[1], 
EHCISèã
),

2531 
VMSTATE_UINT32
(
p‹tsc
[2], 
EHCISèã
),

2532 
VMSTATE_UINT32
(
p‹tsc
[3], 
EHCISèã
),

2533 
VMSTATE_UINT32
(
p‹tsc
[4], 
EHCISèã
),

2534 
VMSTATE_UINT32
(
p‹tsc
[5], 
EHCISèã
),

2536 
VMSTATE_TIMER
(
‰ame_timî
, 
EHCISèã
),

2537 
VMSTATE_UINT64
(
œ°_run_ns
, 
EHCISèã
),

2538 
VMSTATE_UINT32
(
async_°ïdown
, 
EHCISèã
),

2540 
VMSTATE_UINT32
(
a°©e
, 
EHCISèã
),

2541 
VMSTATE_UINT32
(
p°©e
, 
EHCISèã
),

2542 
VMSTATE_UINT32
(
a_„tch_addr
, 
EHCISèã
),

2543 
VMSTATE_UINT32
(
p_„tch_addr
, 
EHCISèã
),

2544 
VMSTATE_END_OF_LIST
()

2548 
Pr›îty
 
	gehci_¥›îtõs
[] = {

2549 
DEFINE_PROP_UINT32
("max‰ames", 
EHCISèã
, 
max‰ames
, 128),

2550 
DEFINE_PROP_END_OF_LIST
(),

2553 
	$ehci_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

2555 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

2556 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

2558 
k
->
öô
 = 
usb_ehci_öô‚
;

2559 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_INTEL
;

2560 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_INTEL_82801D
;

2561 
k
->
ªvisi⁄
 = 0x10;

2562 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

2563 
dc
->
vmsd
 = &
vm°©e_ehci
;

2564 
dc
->
¥›s
 = 
ehci_¥›îtõs
;

2565 
	}
}

2567 
Ty≥Info
 
	gehci_öfo
 = {

2568 .
«me
 = "usb-ehci",

2569 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

2570 .
	gö°™˚_size
 = (
EHCISèã
),

2571 .
	g˛ass_öô
 = 
ehci_˛ass_öô
,

2574 
	$ich9_ehci_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

2576 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

2577 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

2579 
k
->
öô
 = 
usb_ehci_öô‚
;

2580 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_INTEL
;

2581 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_INTEL_82801I_EHCI1
;

2582 
k
->
ªvisi⁄
 = 0x03;

2583 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

2584 
dc
->
vmsd
 = &
vm°©e_ehci
;

2585 
dc
->
¥›s
 = 
ehci_¥›îtõs
;

2586 
	}
}

2588 
Ty≥Info
 
	gich9_ehci_öfo
 = {

2589 .
«me
 = "ich9-usb-ehci1",

2590 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

2591 .
	gö°™˚_size
 = (
EHCISèã
),

2592 .
	g˛ass_öô
 = 
ich9_ehci_˛ass_öô
,

2595 
	$usb_ehci_öô‚
(
PCIDevi˚
 *
dev
)

2597 
EHCISèã
 *
s
 = 
	`DO_UPCAST
(EHCISèã, 
dev
, dev);

2598 
uöt8_t
 *
pci_c⁄f
 = 
s
->
dev
.
c⁄fig
;

2599 
i
;

2601 
	`pci_£t_byã
(&
pci_c⁄f
[
PCI_CLASS_PROG
], 0x20);

2604 
	`pci_£t_byã
(&
pci_c⁄f
[
PCI_CAPABILITY_LIST
], 0x00);

2607 
	`pci_£t_byã
(&
pci_c⁄f
[
PCI_INTERRUPT_PIN
], 4);

2608 
	`pci_£t_byã
(&
pci_c⁄f
[
PCI_MIN_GNT
], 0);

2609 
	`pci_£t_byã
(&
pci_c⁄f
[
PCI_MAX_LAT
], 0);

2613 
	`pci_£t_byã
(&
pci_c⁄f
[
USB_SBRN
], 
USB_RELEASE_2
);

2614 
	`pci_£t_byã
(&
pci_c⁄f
[0x61], 0x20);

2615 
	`pci_£t_w‹d
(&
pci_c⁄f
[0x62], 0x00);

2617 
pci_c⁄f
[0x64] = 0x00;

2618 
pci_c⁄f
[0x65] = 0x00;

2619 
pci_c⁄f
[0x66] = 0x00;

2620 
pci_c⁄f
[0x67] = 0x00;

2621 
pci_c⁄f
[0x68] = 0x01;

2622 
pci_c⁄f
[0x69] = 0x00;

2623 
pci_c⁄f
[0x6a] = 0x00;

2624 
pci_c⁄f
[0x6b] = 0x00;

2625 
pci_c⁄f
[0x6c] = 0x00;

2626 
pci_c⁄f
[0x6d] = 0x00;

2627 
pci_c⁄f
[0x6e] = 0x00;

2628 
pci_c⁄f
[0x6f] = 0xc0;

2631 
s
->
mmio
[0x00] = (
uöt8_t
Ë
OPREGBASE
;

2632 
s
->
mmio
[0x01] = 0x00;

2633 
s
->
mmio
[0x02] = 0x00;

2634 
s
->
mmio
[0x03] = 0x01;

2635 
s
->
mmio
[0x04] = 
NB_PORTS
;

2636 
s
->
mmio
[0x05] = 0x00;

2637 
s
->
mmio
[0x06] = 0x00;

2638 
s
->
mmio
[0x07] = 0x00;

2639 
s
->
mmio
[0x08] = 0x80;

2640 
s
->
mmio
[0x09] = 0x68;

2641 
s
->
mmio
[0x0a] = 0x00;

2642 
s
->
mmio
[0x0b] = 0x00;

2644 
s
->
úq
 = s->
dev
.irq[3];

2646 
	`usb_bus_√w
(&
s
->
bus
, &
ehci_bus_›s
, &s->
dev
.
qdev
);

2647 
i
 = 0; i < 
NB_PORTS
; i++) {

2648 
	`usb_ªgi°î_p‹t
(&
s
->
bus
, &s->
p‹ts
[
i
], s, i, &
ehci_p‹t_›s
,

2649 
USB_SPEED_MASK_HIGH
);

2650 
s
->
p‹ts
[
i
].
dev
 = 0;

2653 
s
->
‰ame_timî
 = 
	`qemu_√w_timî_ns
(
vm_˛ock
, 
ehci_‰ame_timî
, s);

2654 
s
->
async_bh
 = 
	`qemu_bh_√w
(
ehci_async_bh
, s);

2655 
	`QTAILQ_INIT
(&
s
->
aqueues
);

2656 
	`QTAILQ_INIT
(&
s
->
pqueues
);

2657 
	`usb_∑ckë_öô
(&
s
->
ùackë
);

2659 
	`qemu_ªgi°î_ª£t
(
ehci_ª£t
, 
s
);

2661 
	`mem‹y_ªgi⁄_öô_io
(&
s
->
mem
, &
ehci_mem_›s
, s, "ehci", 
MMIO_SIZE
);

2662 
	`pci_ªgi°î_b¨
(&
s
->
dev
, 0, 
PCI_BASE_ADDRESS_SPACE_MEMORY
, &s->
mem
);

2665 
	}
}

2667 
	$ehci_ªgi°î_ty≥s
()

2669 
	`ty≥_ªgi°î_°©ic
(&
ehci_öfo
);

2670 
	`ty≥_ªgi°î_°©ic
(&
ich9_ehci_öfo
);

2671 
	}
}

2673 
ty≥_öô
(
ehci_ªgi°î_ty≥s
)

	@hcd-musb.c

23 
	~"qemu-comm⁄.h
"

24 
	~"qemu-timî.h
"

25 
	~"hw/usb.h
"

26 
	~"hw/úq.h
"

27 
	~"hw/hw.h
"

30 
	#MUSB_HDRC_FADDR
 0x00

	)

31 
	#MUSB_HDRC_POWER
 0x01

	)

33 
	#MUSB_HDRC_INTRTX
 0x02

	)

34 
	#MUSB_HDRC_INTRRX
 0x04

	)

35 
	#MUSB_HDRC_INTRTXE
 0x06

	)

36 
	#MUSB_HDRC_INTRRXE
 0x08

	)

37 
	#MUSB_HDRC_INTRUSB
 0x0®

	)

38 
	#MUSB_HDRC_INTRUSBE
 0x0b

	)

39 
	#MUSB_HDRC_FRAME
 0x0¯

	)

40 
	#MUSB_HDRC_INDEX
 0x0ê

	)

41 
	#MUSB_HDRC_TESTMODE
 0x0‡

	)

44 
	#MUSB_HDRC_EP_IDX
 0x10

	)

47 
	#MUSB_HDRC_FIFO
 0x20

	)

50 
	#MUSB_HDRC_DEVCTL
 0x60

	)

53 
	#MUSB_HDRC_TXFIFOSZ
 0x62

	)

54 
	#MUSB_HDRC_RXFIFOSZ
 0x63

	)

55 
	#MUSB_HDRC_TXFIFOADDR
 0x64

	)

56 
	#MUSB_HDRC_RXFIFOADDR
 0x66

	)

59 
	#MUSB_HDRC_VCTRL
 0x68

	)

60 
	#MUSB_HDRC_HWVERS
 0x6¯

	)

64 
	#MUSB_HDRC_ULPI_VBUSCTL
 0x70

	)

65 
	#MUSB_HDRC_ULPI_REGDATA
 0x74

	)

66 
	#MUSB_HDRC_ULPI_REGADDR
 0x75

	)

67 
	#MUSB_HDRC_ULPI_REGCTL
 0x76

	)

70 
	#MUSB_HDRC_ENDCOUNT
 0x78

	)

71 
	#MUSB_HDRC_DMARAMCFG
 0x79

	)

72 
	#MUSB_HDRC_PHYWAIT
 0x7®

	)

73 
	#MUSB_HDRC_PHYVPLEN
 0x7b

	)

74 
	#MUSB_HDRC_HS_EOF1
 0x7¯

	)

75 
	#MUSB_HDRC_FS_EOF1
 0x7d

	)

76 
	#MUSB_HDRC_LS_EOF1
 0x7ê

	)

79 
	#MUSB_HDRC_BUSCTL
 0x80

	)

82 
	#MUSB_HDRC_EP
 0x100

	)

85 
	#MUSB_HDRC_TXMAXP
 0x00

	)

86 
	#MUSB_HDRC_TXCSR
 0x02

	)

87 
	#MUSB_HDRC_CSR0
 
MUSB_HDRC_TXCSR


	)

88 
	#MUSB_HDRC_RXMAXP
 0x04

	)

89 
	#MUSB_HDRC_RXCSR
 0x06

	)

90 
	#MUSB_HDRC_RXCOUNT
 0x08

	)

91 
	#MUSB_HDRC_COUNT0
 
MUSB_HDRC_RXCOUNT


	)

92 
	#MUSB_HDRC_TXTYPE
 0x0®

	)

93 
	#MUSB_HDRC_TYPE0
 
MUSB_HDRC_TXTYPE


	)

94 
	#MUSB_HDRC_TXINTERVAL
 0x0b

	)

95 
	#MUSB_HDRC_NAKLIMIT0
 
MUSB_HDRC_TXINTERVAL


	)

96 
	#MUSB_HDRC_RXTYPE
 0x0¯

	)

97 
	#MUSB_HDRC_RXINTERVAL
 0x0d

	)

98 
	#MUSB_HDRC_FIFOSIZE
 0x0‡

	)

99 
	#MUSB_HDRC_CONFIGDATA
 
MGC_O_HDRC_FIFOSIZE


	)

102 
	#MUSB_HDRC_TXFUNCADDR
 0x00

	)

103 
	#MUSB_HDRC_TXHUBADDR
 0x02

	)

104 
	#MUSB_HDRC_TXHUBPORT
 0x03

	)

106 
	#MUSB_HDRC_RXFUNCADDR
 0x04

	)

107 
	#MUSB_HDRC_RXHUBADDR
 0x06

	)

108 
	#MUSB_HDRC_RXHUBPORT
 0x07

	)

115 
	#MGC_M_POWER_ISOUPDATE
 0x80

	)

116 
	#MGC_M_POWER_SOFTCONN
 0x40

	)

117 
	#MGC_M_POWER_HSENAB
 0x20

	)

118 
	#MGC_M_POWER_HSMODE
 0x10

	)

119 
	#MGC_M_POWER_RESET
 0x08

	)

120 
	#MGC_M_POWER_RESUME
 0x04

	)

121 
	#MGC_M_POWER_SUSPENDM
 0x02

	)

122 
	#MGC_M_POWER_ENSUSPEND
 0x01

	)

125 
	#MGC_M_INTR_SUSPEND
 0x01

	)

126 
	#MGC_M_INTR_RESUME
 0x02

	)

127 
	#MGC_M_INTR_RESET
 0x04

	)

128 
	#MGC_M_INTR_BABBLE
 0x04

	)

129 
	#MGC_M_INTR_SOF
 0x08

	)

130 
	#MGC_M_INTR_CONNECT
 0x10

	)

131 
	#MGC_M_INTR_DISCONNECT
 0x20

	)

132 
	#MGC_M_INTR_SESSREQ
 0x40

	)

133 
	#MGC_M_INTR_VBUSERROR
 0x80

	)

134 
	#MGC_M_INTR_EP0
 0x01

	)

137 
	#MGC_M_DEVCTL_BDEVICE
 0x80

	)

138 
	#MGC_M_DEVCTL_FSDEV
 0x40

	)

139 
	#MGC_M_DEVCTL_LSDEV
 0x20

	)

140 
	#MGC_M_DEVCTL_VBUS
 0x18

	)

141 
	#MGC_S_DEVCTL_VBUS
 3

	)

142 
	#MGC_M_DEVCTL_HM
 0x04

	)

143 
	#MGC_M_DEVCTL_HR
 0x02

	)

144 
	#MGC_M_DEVCTL_SESSION
 0x01

	)

147 
	#MGC_M_TEST_FORCE_HOST
 0x80

	)

148 
	#MGC_M_TEST_FIFO_ACCESS
 0x40

	)

149 
	#MGC_M_TEST_FORCE_FS
 0x20

	)

150 
	#MGC_M_TEST_FORCE_HS
 0x10

	)

151 
	#MGC_M_TEST_PACKET
 0x08

	)

152 
	#MGC_M_TEST_K
 0x04

	)

153 
	#MGC_M_TEST_J
 0x02

	)

154 
	#MGC_M_TEST_SE0_NAK
 0x01

	)

157 
	#MGC_M_CSR0_FLUSHFIFO
 0x0100

	)

158 
	#MGC_M_CSR0_TXPKTRDY
 0x0002

	)

159 
	#MGC_M_CSR0_RXPKTRDY
 0x0001

	)

162 
	#MGC_M_CSR0_P_SVDSETUPEND
 0x0080

	)

163 
	#MGC_M_CSR0_P_SVDRXPKTRDY
 0x0040

	)

164 
	#MGC_M_CSR0_P_SENDSTALL
 0x0020

	)

165 
	#MGC_M_CSR0_P_SETUPEND
 0x0010

	)

166 
	#MGC_M_CSR0_P_DATAEND
 0x0008

	)

167 
	#MGC_M_CSR0_P_SENTSTALL
 0x0004

	)

170 
	#MGC_M_CSR0_H_NO_PING
 0x0800

	)

171 
	#MGC_M_CSR0_H_WR_DATATOGGLE
 0x0400

	)

172 
	#MGC_M_CSR0_H_DATATOGGLE
 0x0200

	)

173 
	#MGC_M_CSR0_H_NAKTIMEOUT
 0x0080

	)

174 
	#MGC_M_CSR0_H_STATUSPKT
 0x0040

	)

175 
	#MGC_M_CSR0_H_REQPKT
 0x0020

	)

176 
	#MGC_M_CSR0_H_ERROR
 0x0010

	)

177 
	#MGC_M_CSR0_H_SETUPPKT
 0x0008

	)

178 
	#MGC_M_CSR0_H_RXSTALL
 0x0004

	)

181 
	#MGC_M_CONFIGDATA_MPRXE
 0x80

	)

182 
	#MGC_M_CONFIGDATA_MPTXE
 0x40

	)

183 
	#MGC_M_CONFIGDATA_BIGENDIAN
 0x20

	)

184 
	#MGC_M_CONFIGDATA_HBRXE
 0x10

	)

185 
	#MGC_M_CONFIGDATA_HBTXE
 0x08

	)

186 
	#MGC_M_CONFIGDATA_DYNFIFO
 0x04

	)

187 
	#MGC_M_CONFIGDATA_SOFTCONE
 0x02

	)

188 
	#MGC_M_CONFIGDATA_UTMIDW
 0x01

	)

191 
	#MGC_M_TXCSR_AUTOSET
 0x8000

	)

192 
	#MGC_M_TXCSR_ISO
 0x4000

	)

193 
	#MGC_M_TXCSR_MODE
 0x2000

	)

194 
	#MGC_M_TXCSR_DMAENAB
 0x1000

	)

195 
	#MGC_M_TXCSR_FRCDATATOG
 0x0800

	)

196 
	#MGC_M_TXCSR_DMAMODE
 0x0400

	)

197 
	#MGC_M_TXCSR_CLRDATATOG
 0x0040

	)

198 
	#MGC_M_TXCSR_FLUSHFIFO
 0x0008

	)

199 
	#MGC_M_TXCSR_FIFONOTEMPTY
 0x0002

	)

200 
	#MGC_M_TXCSR_TXPKTRDY
 0x0001

	)

203 
	#MGC_M_TXCSR_P_INCOMPTX
 0x0080

	)

204 
	#MGC_M_TXCSR_P_SENTSTALL
 0x0020

	)

205 
	#MGC_M_TXCSR_P_SENDSTALL
 0x0010

	)

206 
	#MGC_M_TXCSR_P_UNDERRUN
 0x0004

	)

209 
	#MGC_M_TXCSR_H_WR_DATATOGGLE
 0x0200

	)

210 
	#MGC_M_TXCSR_H_DATATOGGLE
 0x0100

	)

211 
	#MGC_M_TXCSR_H_NAKTIMEOUT
 0x0080

	)

212 
	#MGC_M_TXCSR_H_RXSTALL
 0x0020

	)

213 
	#MGC_M_TXCSR_H_ERROR
 0x0004

	)

216 
	#MGC_M_RXCSR_AUTOCLEAR
 0x8000

	)

217 
	#MGC_M_RXCSR_DMAENAB
 0x2000

	)

218 
	#MGC_M_RXCSR_DISNYET
 0x1000

	)

219 
	#MGC_M_RXCSR_DMAMODE
 0x0800

	)

220 
	#MGC_M_RXCSR_INCOMPRX
 0x0100

	)

221 
	#MGC_M_RXCSR_CLRDATATOG
 0x0080

	)

222 
	#MGC_M_RXCSR_FLUSHFIFO
 0x0010

	)

223 
	#MGC_M_RXCSR_DATAERROR
 0x0008

	)

224 
	#MGC_M_RXCSR_FIFOFULL
 0x0002

	)

225 
	#MGC_M_RXCSR_RXPKTRDY
 0x0001

	)

228 
	#MGC_M_RXCSR_P_ISO
 0x4000

	)

229 
	#MGC_M_RXCSR_P_SENTSTALL
 0x0040

	)

230 
	#MGC_M_RXCSR_P_SENDSTALL
 0x0020

	)

231 
	#MGC_M_RXCSR_P_OVERRUN
 0x0004

	)

234 
	#MGC_M_RXCSR_H_AUTOREQ
 0x4000

	)

235 
	#MGC_M_RXCSR_H_WR_DATATOGGLE
 0x0400

	)

236 
	#MGC_M_RXCSR_H_DATATOGGLE
 0x0200

	)

237 
	#MGC_M_RXCSR_H_RXSTALL
 0x0040

	)

238 
	#MGC_M_RXCSR_H_REQPKT
 0x0020

	)

239 
	#MGC_M_RXCSR_H_ERROR
 0x0004

	)

242 
	#MGC_M_HUBADDR_MULTI_TT
 0x80

	)

245 
	#MGC_M_ULPI_VBCTL_USEEXTVBUSIND
 0x02

	)

246 
	#MGC_M_ULPI_VBCTL_USEEXTVBUS
 0x01

	)

247 
	#MGC_M_ULPI_REGCTL_INT_ENABLE
 0x08

	)

248 
	#MGC_M_ULPI_REGCTL_READNOTWRITE
 0x04

	)

249 
	#MGC_M_ULPI_REGCTL_COMPLETE
 0x02

	)

250 
	#MGC_M_ULPI_REGCTL_REG
 0x01

	)

254 #ifde‡
MUSB_DEBUG


255 
	#TRACE
(
fmt
,...Ë
	`Ârötf
(
°dîr
, "%s@%d: " fmà"\n", 
__FUNCTION__
, \

256 
__LINE__
, ##
__VA_ARGS__
)

	)

258 
	#TRACE
(...)

	)

262 
musb_©èch
(
USBP‹t
 *
p‹t
);

263 
musb_dëach
(
USBP‹t
 *
p‹t
);

264 
musb_chûd_dëach
(
USBP‹t
 *
p‹t
, 
USBDevi˚
 *
chûd
);

265 
musb_scheduÀ_cb
(
USBP‹t
 *
p‹t
, 
USBPackë
 *
p
);

266 
musb_async_ˇn˚l_devi˚
(
MUSBSèã
 *
s
, 
USBDevi˚
 *
dev
);

268 
USBP‹tOps
 
	gmusb_p‹t_›s
 = {

269 .
©èch
 = 
musb_©èch
,

270 .
	gdëach
 = 
musb_dëach
,

271 .
	gchûd_dëach
 = 
musb_chûd_dëach
,

272 .
	gcom∂ëe
 = 
musb_scheduÀ_cb
,

275 
USBBusOps
 
	gmusb_bus_›s
 = {

278 
MUSBPackë
 
	tMUSBPackë
;

279 
MUSBEndPoöt
 
	tMUSBEndPoöt
;

281 
	sMUSBPackë
 {

282 
USBPackë
 
	mp
;

283 
MUSBEndPoöt
 *
	mï
;

284 
	mdú
;

287 
	sMUSBEndPoöt
 {

288 
uöt16_t
 
	mÁddr
[2];

289 
uöt8_t
 
	mhaddr
[2];

290 
uöt8_t
 
	mhp‹t
[2];

291 
uöt16_t
 
	mc§
[2];

292 
uöt16_t
 
	mmaxp
[2];

293 
uöt16_t
 
	mrxcou¡
;

294 
uöt8_t
 
	mty≥
[2];

295 
uöt8_t
 
	möãrvÆ
[2];

296 
uöt8_t
 
	mc⁄fig
;

297 
uöt8_t
 
	mfifosize
;

298 
	mtimeout
[2];

300 
uöt8_t
 *
	mbuf
[2];

301 
	mfifﬁí
[2];

302 
	mfifo°¨t
[2];

303 
	mfifﬂddr
[2];

304 
MUSBPackë
 
	m∑ckey
[2];

305 
	m°©us
[2];

306 
	mext_size
[2];

309 
	mïnum
;

310 
	möãºu±
[2];

311 
MUSBSèã
 *
	mmusb
;

312 
USBCÆlback
 *
	mdñayed_cb
[2];

313 
QEMUTimî
 *
	mötv_timî
[2];

316 
	sMUSBSèã
 {

317 
qemu_úq
 
	múqs
[
musb_úq_max
];

318 
USBBus
 
	mbus
;

319 
USBP‹t
 
	mp‹t
;

321 
	midx
;

322 
uöt8_t
 
	mdev˘l
;

323 
uöt8_t
 
	mpowî
;

324 
uöt8_t
 
	mÁddr
;

326 
uöt8_t
 
	möå
;

327 
uöt8_t
 
	mmask
;

328 
uöt16_t
 
	mtx_öå
;

329 
uöt16_t
 
	mtx_mask
;

330 
uöt16_t
 
	mrx_öå
;

331 
uöt16_t
 
	mrx_mask
;

333 
	m£tup_Àn
;

334 
	m£ssi⁄
;

336 
uöt8_t
 
	mbuf
[0x8000];

340 
MUSBEndPoöt
 
	mï
[16];

343 
	$musb_ª£t
(
MUSBSèã
 *
s
)

345 
i
;

347 
s
->
Áddr
 = 0x00;

348 
s
->
dev˘l
 = 0;

349 
s
->
powî
 = 
MGC_M_POWER_HSENAB
;

350 
s
->
tx_öå
 = 0x0000;

351 
s
->
rx_öå
 = 0x0000;

352 
s
->
tx_mask
 = 0xffff;

353 
s
->
rx_mask
 = 0xffff;

354 
s
->
öå
 = 0x00;

355 
s
->
mask
 = 0x06;

356 
s
->
idx
 = 0;

358 
s
->
£tup_Àn
 = 0;

359 
s
->
£ssi⁄
 = 0;

360 
	`mem£t
(
s
->
buf
, 0, (s->buf));

363 
s
->
ï
[0].
c⁄fig
 = 
MGC_M_CONFIGDATA_SOFTCONE
 | 
MGC_M_CONFIGDATA_DYNFIFO
;

364 
i
 = 0; i < 16; i ++) {

365 
s
->
ï
[
i
].
fifosize
 = 64;

366 
s
->
ï
[
i
].
maxp
[0] = 0x40;

367 
s
->
ï
[
i
].
maxp
[1] = 0x40;

368 
s
->
ï
[
i
].
musb
 = s;

369 
s
->
ï
[
i
].
ïnum
 = i;

370 
	`usb_∑ckë_öô
(&
s
->
ï
[
i
].
∑ckey
[0].
p
);

371 
	`usb_∑ckë_öô
(&
s
->
ï
[
i
].
∑ckey
[1].
p
);

373 
	}
}

375 
MUSBSèã
 *
	$musb_öô
(
Devi˚Sèã
 *
∑ª¡_devi˚
, 
gpio_ba£
)

377 
MUSBSèã
 *
s
 = 
	`g_mÆloc0
((*s));

378 
i
;

380 
i
 = 0; i < 
musb_úq_max
; i++) {

381 
s
->
úqs
[
i
] = 
	`qdev_gë_gpio_ö
(
∑ª¡_devi˚
, 
gpio_ba£
 + i);

384 
	`musb_ª£t
(
s
);

386 
	`usb_bus_√w
(&
s
->
bus
, &
musb_bus_›s
, 
∑ª¡_devi˚
);

387 
	`usb_ªgi°î_p‹t
(&
s
->
bus
, &s->
p‹t
, s, 0, &
musb_p‹t_›s
,

388 
USB_SPEED_MASK_LOW
 | 
USB_SPEED_MASK_FULL
);

390  
s
;

391 
	}
}

393 
	$musb_vbus_£t
(
MUSBSèã
 *
s
, 
Àvñ
)

395 i‡(
Àvñ
)

396 
s
->
dev˘l
 |3 << 
MGC_S_DEVCTL_VBUS
;

398 
s
->
dev˘l
 &~
MGC_M_DEVCTL_VBUS
;

400 
	`qemu_£t_úq
(
s
->
úqs
[
musb_£t_vbus
], 
Àvñ
);

401 
	}
}

403 
	$musb_öå_£t
(
MUSBSèã
 *
s
, 
löe
, 
Àvñ
)

405 i‡(!
Àvñ
) {

406 
s
->
öå
 &~(1 << 
löe
);

407 
	`qemu_úq_lowî
(
s
->
úqs
[
löe
]);

408 } i‡(
s
->
mask
 & (1 << 
löe
)) {

409 
s
->
öå
 |1 << 
löe
;

410 
	`qemu_úq_øi£
(
s
->
úqs
[
löe
]);

412 
	}
}

414 
	$musb_tx_öå_£t
(
MUSBSèã
 *
s
, 
löe
, 
Àvñ
)

416 i‡(!
Àvñ
) {

417 
s
->
tx_öå
 &~(1 << 
löe
);

418 i‡(!
s
->
tx_öå
)

419 
	`qemu_úq_lowî
(
s
->
úqs
[
musb_úq_tx
]);

420 } i‡(
s
->
tx_mask
 & (1 << 
löe
)) {

421 
s
->
tx_öå
 |1 << 
löe
;

422 
	`qemu_úq_øi£
(
s
->
úqs
[
musb_úq_tx
]);

424 
	}
}

426 
	$musb_rx_öå_£t
(
MUSBSèã
 *
s
, 
löe
, 
Àvñ
)

428 i‡(
löe
) {

429 i‡(!
Àvñ
) {

430 
s
->
rx_öå
 &~(1 << 
löe
);

431 i‡(!
s
->
rx_öå
)

432 
	`qemu_úq_lowî
(
s
->
úqs
[
musb_úq_rx
]);

433 } i‡(
s
->
rx_mask
 & (1 << 
löe
)) {

434 
s
->
rx_öå
 |1 << 
löe
;

435 
	`qemu_úq_øi£
(
s
->
úqs
[
musb_úq_rx
]);

438 
	`musb_tx_öå_£t
(
s
, 
löe
, 
Àvñ
);

439 
	}
}

441 
uöt32_t
 
	$musb_c‹e_öå_gë
(
MUSBSèã
 *
s
)

443  (
s
->
rx_öå
 << 15Ë| s->
tx_öå
;

444 
	}
}

446 
	$musb_c‹e_öå_˛ór
(
MUSBSèã
 *
s
, 
uöt32_t
 
mask
)

448 i‡(
s
->
rx_öå
) {

449 
s
->
rx_öå
 &
mask
 >> 15;

450 i‡(!
s
->
rx_öå
)

451 
	`qemu_úq_lowî
(
s
->
úqs
[
musb_úq_rx
]);

454 i‡(
s
->
tx_öå
) {

455 
s
->
tx_öå
 &
mask
 & 0xffff;

456 i‡(!
s
->
tx_öå
)

457 
	`qemu_úq_lowî
(
s
->
úqs
[
musb_úq_tx
]);

459 
	}
}

461 
	$musb_£t_size
(
MUSBSèã
 *
s
, 
ïnum
, 
size
, 
is_tx
)

463 
s
->
ï
[
ïnum
].
ext_size
[!
is_tx
] = 
size
;

464 
s
->
ï
[
ïnum
].
fifo°¨t
[0] = 0;

465 
s
->
ï
[
ïnum
].
fifo°¨t
[1] = 0;

466 
s
->
ï
[
ïnum
].
fifﬁí
[0] = 0;

467 
s
->
ï
[
ïnum
].
fifﬁí
[1] = 0;

468 
	}
}

470 
	$musb_£ssi⁄_upd©e
(
MUSBSèã
 *
s
, 
¥ev_dev
, 
¥ev_£ss
)

472 
dëe˘_¥ev
 = 
¥ev_dev
 && 
¥ev_£ss
;

473 
dëe˘
 = !!
s
->
p‹t
.
dev
 && s->
£ssi⁄
;

475 i‡(
dëe˘
 && !
dëe˘_¥ev
) {

479 
	`musb_öå_£t
(
s
, 
musb_úq_c⁄√˘
, 1);

481 i‡(
s
->
p‹t
.
dev
->
•ìd
 =
USB_SPEED_LOW
) {

482 
s
->
dev˘l
 &~
MGC_M_DEVCTL_FSDEV
;

483 
s
->
dev˘l
 |
MGC_M_DEVCTL_LSDEV
;

485 
s
->
dev˘l
 |
MGC_M_DEVCTL_FSDEV
;

486 
s
->
dev˘l
 &~
MGC_M_DEVCTL_LSDEV
;

490 
s
->
dev˘l
 &~
MGC_M_DEVCTL_BDEVICE
;

493 
s
->
dev˘l
 |
MGC_M_DEVCTL_HM
;

495 
	`musb_vbus_£t
(
s
, 1);

497 } i‡(!
dëe˘
 && 
dëe˘_¥ev
) {

499 
	`musb_vbus_£t
(
s
, 0);

502 
	}
}

505 
	$musb_©èch
(
USBP‹t
 *
p‹t
)

507 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
p‹t
->
›aque
;

509 
	`musb_öå_£t
(
s
, 
musb_úq_vbus_ªque°
, 1);

510 
	`musb_£ssi⁄_upd©e
(
s
, 0, s->
£ssi⁄
);

511 
	}
}

513 
	$musb_dëach
(
USBP‹t
 *
p‹t
)

515 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
p‹t
->
›aque
;

517 
	`musb_async_ˇn˚l_devi˚
(
s
, 
p‹t
->
dev
);

519 
	`musb_öå_£t
(
s
, 
musb_úq_disc⁄√˘
, 1);

520 
	`musb_£ssi⁄_upd©e
(
s
, 1, s->
£ssi⁄
);

521 
	}
}

523 
	$musb_chûd_dëach
(
USBP‹t
 *
p‹t
, 
USBDevi˚
 *
chûd
)

525 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
p‹t
->
›aque
;

527 
	`musb_async_ˇn˚l_devi˚
(
s
, 
chûd
);

528 
	}
}

530 
	$musb_cb_tick0
(*
›aque
)

532 
MUSBEndPoöt
 *
ï
 = (MUSBEndPoöà*Ë
›aque
;

534 
ï
->
dñayed_cb
[0](&ï->
∑ckey
[0].
p
, 
›aque
);

535 
	}
}

537 
	$musb_cb_tick1
(*
›aque
)

539 
MUSBEndPoöt
 *
ï
 = (MUSBEndPoöà*Ë
›aque
;

541 
ï
->
dñayed_cb
[1](&ï->
∑ckey
[1].
p
, 
›aque
);

542 
	}
}

544 
	#musb_cb_tick
 (
dú
 ? 
musb_cb_tick1
 : 
musb_cb_tick0
)

	)

546 
	$musb_scheduÀ_cb
(
USBP‹t
 *
p‹t
, 
USBPackë
 *
∑ckey
)

548 
MUSBPackë
 *
p
 = 
	`c⁄èöî_of
(
∑ckey
, MUSBPacket,Ö);

549 
MUSBEndPoöt
 *
ï
 = 
p
->ep;

550 
dú
 = 
p
->dir;

551 
timeout
 = 0;

553 i‡(
ï
->
°©us
[
dú
] =
USB_RET_NAK
)

554 
timeout
 = 
ï
->timeout[
dú
];

555 i‡(
ï
->
öãºu±
[
dú
])

556 
timeout
 = 8;

558  
	`musb_cb_tick
(
ï
);

560 i‡(!
ï
->
ötv_timî
[
dú
])

561 
ï
->
ötv_timî
[
dú
] = 
	`qemu_√w_timî_ns
(
vm_˛ock
, 
musb_cb_tick
,Ép);

563 
	`qemu_mod_timî
(
ï
->
ötv_timî
[
dú
], 
	`qemu_gë_˛ock_ns
(
vm_˛ock
) +

564 
	`muldiv64
(
timeout
, 
	`gë_ticks_≥r_£c
(), 8000));

565 
	}
}

567 
	$musb_timeout
(
ây≥
, 
•ìd
, 
vÆ
)

570  
vÆ
 << 3;

573 
ây≥
) {

574 
USB_ENDPOINT_XFER_CONTROL
:

575 i‡(
vÆ
 < 2)

577 i‡(
•ìd
 =
USB_SPEED_HIGH
)

578  1 << (
vÆ
 - 1);

580  8 << (
vÆ
 - 1);

582 
USB_ENDPOINT_XFER_INT
:

583 i‡(
•ìd
 =
USB_SPEED_HIGH
)

584 i‡(
vÆ
 < 2)

587  1 << (
vÆ
 - 1);

589  
vÆ
 << 3;

591 
USB_ENDPOINT_XFER_BULK
:

592 
USB_ENDPOINT_XFER_ISOC
:

593 i‡(
vÆ
 < 2)

595 i‡(
•ìd
 =
USB_SPEED_HIGH
)

596  1 << (
vÆ
 - 1);

598  8 << (
vÆ
 - 1);

602 
	`hw_îr‹
("bad interval\n");

603 
	}
}

605 
	$musb_∑ckë
(
MUSBSèã
 *
s
, 
MUSBEndPoöt
 *
ï
,

606 
ïnum
, 
pid
, 
Àn
, 
USBCÆlback
 
cb
, 
dú
)

608 
USBDevi˚
 *
dev
;

609 
USBEndpoöt
 *
uï
;

610 
ªt
;

611 
idx
 = 
ïnum
 && 
dú
;

612 
ây≥
;

619 
ây≥
 = 
ïnum
 ? (
ï
->
ty≥
[
idx
] >> 4) & 3 : 0;

621 
ï
->
timeout
[
dú
] = 
	`musb_timeout
(
ây≥
,

622 
ï
->
ty≥
[
idx
] >> 6,Ép->
öãrvÆ
[idx]);

623 
ï
->
öãºu±
[
dú
] = 
ây≥
 =
USB_ENDPOINT_XFER_INT
;

624 
ï
->
dñayed_cb
[
dú
] = 
cb
;

627 
dev
 = 
	`usb_föd_devi˚
(&
s
->
p‹t
, 
ï
->
Áddr
[
idx
]);

628 
uï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
ï
->
ty≥
[
idx
] & 0xf);

629 
	`usb_∑ckë_£tup
(&
ï
->
∑ckey
[
dú
].
p
, 
pid
, 
uï
,

630 (
dev
->
addr
 << 16Ë| (
uï
->
ƒ
 << 8Ë| 
pid
);

631 
	`usb_∑ckë_addbuf
(&
ï
->
∑ckey
[
dú
].
p
,Ép->
buf
[
idx
], 
Àn
);

632 
ï
->
∑ckey
[
dú
].ep =Ép;

633 
ï
->
∑ckey
[
dú
].dir = dir;

635 
ªt
 = 
	`usb_h™dÀ_∑ckë
(
dev
, &
ï
->
∑ckey
[
dú
].
p
);

637 i‡(
ªt
 =
USB_RET_ASYNC
) {

638 
ï
->
°©us
[
dú
] = 
Àn
;

642 
ï
->
°©us
[
dú
] = 
ªt
;

643 
	`musb_scheduÀ_cb
(&
s
->
p‹t
, &
ï
->
∑ckey
[
dú
].
p
);

644 
	}
}

646 
	$musb_tx_∑ckë_com∂ëe
(
USBPackë
 *
∑ckey
, *
›aque
)

650 
MUSBEndPoöt
 *
ï
 = (MUSBEndPoöà*Ë
›aque
;

651 
ïnum
 = 
ï
->epnum;

652 
MUSBSèã
 *
s
 = 
ï
->
musb
;

654 
ï
->
fifo°¨t
[0] = 0;

655 
ï
->
fifﬁí
[0] = 0;

656 #ifde‡
CLEAR_NAK


657 i‡(
ï
->
°©us
[0] !
USB_RET_NAK
) {

659 i‡(
ïnum
)

660 
ï
->
c§
[0] &~(
MGC_M_TXCSR_FIFONOTEMPTY
 | 
MGC_M_TXCSR_TXPKTRDY
);

662 
ï
->
c§
[0] &~
MGC_M_CSR0_TXPKTRDY
;

663 #ifde‡
CLEAR_NAK


668 i‡(
ïnum
)

669 
ï
->
c§
[0] &~(
MGC_M_TXCSR_H_ERROR
 | 
MGC_M_TXCSR_H_RXSTALL
 |

670 
MGC_M_TXCSR_H_NAKTIMEOUT
);

672 
ï
->
c§
[0] &~(
MGC_M_CSR0_H_ERROR
 | 
MGC_M_CSR0_H_RXSTALL
 |

673 
MGC_M_CSR0_H_NAKTIMEOUT
 | 
MGC_M_CSR0_H_NO_PING
);

675 i‡(
ï
->
°©us
[0] =
USB_RET_STALL
) {

677 
ï
->
°©us
[0] = 0;

679 i‡(
ïnum
)

680 
ï
->
c§
[0] |
MGC_M_TXCSR_H_RXSTALL
;

682 
ï
->
c§
[0] |
MGC_M_CSR0_H_RXSTALL
;

685 i‡(
ï
->
°©us
[0] =
USB_RET_NAK
) {

686 
ï
->
°©us
[0] = 0;

690 i‡(
ï
->
öãºu±
[0]) {

694 i‡(
ïnum
)

695 
ï
->
c§
[0] |
MGC_M_TXCSR_H_NAKTIMEOUT
;

697 
ï
->
c§
[0] |
MGC_M_CSR0_H_NAKTIMEOUT
;

700 i‡(
ï
->
°©us
[0] < 0) {

701 i‡(
ï
->
°©us
[0] =
USB_RET_BABBLE
)

702 
	`musb_öå_£t
(
s
, 
musb_úq_r°_babbÀ
, 1);

706 i‡(
ïnum
)

707 
ï
->
c§
[0] |
MGC_M_TXCSR_H_ERROR
;

709 
ï
->
c§
[0] |
MGC_M_CSR0_H_ERROR
;

711 
	`musb_tx_öå_£t
(
s
, 
ïnum
, 1);

716 #ifde‡
SETUPLEN_HACK


717 i‡(!
ïnum
 && 
ï
->
∑ckey
[0].
pid
 =
USB_TOKEN_SETUP
)

718 
s
->
£tup_Àn
 = 
ï
->
∑ckey
[0].
d©a
[6];

723 
	`musb_tx_öå_£t
(
s
, 
ïnum
, 1);

724 
	}
}

726 
	$musb_rx_∑ckë_com∂ëe
(
USBPackë
 *
∑ckey
, *
›aque
)

730 
MUSBEndPoöt
 *
ï
 = (MUSBEndPoöà*Ë
›aque
;

731 
ïnum
 = 
ï
->epnum;

732 
MUSBSèã
 *
s
 = 
ï
->
musb
;

734 
ï
->
fifo°¨t
[1] = 0;

735 
ï
->
fifﬁí
[1] = 0;

737 #ifde‡
CLEAR_NAK


738 i‡(
ï
->
°©us
[1] !
USB_RET_NAK
) {

740 
ï
->
c§
[1] &~
MGC_M_RXCSR_H_REQPKT
;

741 i‡(!
ïnum
)

742 
ï
->
c§
[0] &~
MGC_M_CSR0_H_REQPKT
;

743 #ifde‡
CLEAR_NAK


748 
ï
->
c§
[1] &~(
MGC_M_RXCSR_H_ERROR
 | 
MGC_M_RXCSR_H_RXSTALL
 |

749 
MGC_M_RXCSR_DATAERROR
);

750 i‡(!
ïnum
)

751 
ï
->
c§
[0] &~(
MGC_M_CSR0_H_ERROR
 | 
MGC_M_CSR0_H_RXSTALL
 |

752 
MGC_M_CSR0_H_NAKTIMEOUT
 | 
MGC_M_CSR0_H_NO_PING
);

754 i‡(
ï
->
°©us
[1] =
USB_RET_STALL
) {

755 
ï
->
°©us
[1] = 0;

756 
∑ckey
->
ªsu…
 = 0;

758 
ï
->
c§
[1] |
MGC_M_RXCSR_H_RXSTALL
;

759 i‡(!
ïnum
)

760 
ï
->
c§
[0] |
MGC_M_CSR0_H_RXSTALL
;

763 i‡(
ï
->
°©us
[1] =
USB_RET_NAK
) {

764 
ï
->
°©us
[1] = 0;

768 i‡(
ï
->
öãºu±
[1])

769  
	`musb_∑ckë
(
s
, 
ï
, 
ïnum
, 
USB_TOKEN_IN
,

770 
∑ckey
->
iov
.
size
, 
musb_rx_∑ckë_com∂ëe
, 1);

772 
ï
->
c§
[1] |
MGC_M_RXCSR_DATAERROR
;

773 i‡(!
ïnum
)

774 
ï
->
c§
[0] |
MGC_M_CSR0_H_NAKTIMEOUT
;

777 i‡(
ï
->
°©us
[1] < 0) {

778 i‡(
ï
->
°©us
[1] =
USB_RET_BABBLE
) {

779 
	`musb_öå_£t
(
s
, 
musb_úq_r°_babbÀ
, 1);

785 
ï
->
c§
[1] |
MGC_M_RXCSR_H_ERROR
;

786 i‡(!
ïnum
)

787 
ï
->
c§
[0] |
MGC_M_CSR0_H_ERROR
;

789 
	`musb_rx_öå_£t
(
s
, 
ïnum
, 1);

795 
∑ckey
->
ªsu…
 = 
ï
->
°©us
[1];

797 i‡(!(
ï
->
c§
[1] & (
MGC_M_RXCSR_H_RXSTALL
 | 
MGC_M_RXCSR_DATAERROR
))) {

798 
ï
->
c§
[1] |
MGC_M_RXCSR_FIFOFULL
 | 
MGC_M_RXCSR_RXPKTRDY
;

799 i‡(!
ïnum
)

800 
ï
->
c§
[0] |
MGC_M_CSR0_RXPKTRDY
;

802 
ï
->
rxcou¡
 = 
∑ckey
->
ªsu…
;

807 
	`musb_rx_öå_£t
(
s
, 
ïnum
, 1);

808 
	}
}

810 
	$musb_async_ˇn˚l_devi˚
(
MUSBSèã
 *
s
, 
USBDevi˚
 *
dev
)

812 
ï
, 
dú
;

814 
ï
 = 0;Ép < 16;Ép++) {

815 
dú
 = 0; dir < 2; dir++) {

816 i‡(!
	`usb_∑ckë_is_öÊight
(&
s
->
ï
[ï].
∑ckey
[
dú
].
p
) ||

817 
s
->
ï
[ï].
∑ckey
[
dú
].
p
.ï->
dev
 != dev) {

820 
	`usb_ˇn˚l_∑ckë
(&
s
->
ï
[ï].
∑ckey
[
dú
].
p
);

824 
	}
}

826 
	$musb_tx_rdy
(
MUSBSèã
 *
s
, 
ïnum
)

828 
MUSBEndPoöt
 *
ï
 = 
s
->ï + 
ïnum
;

829 
pid
;

830 
tŸÆ
, 
vÆid
 = 0;

831 
	`TRACE
("°¨à%d,Üí %d", 
ï
->
fifo°¨t
[0],Ép->
fifﬁí
[0] );

832 
ï
->
fifo°¨t
[0] +ï->
fifﬁí
[0];

833 
ï
->
fifﬁí
[0] = 0;

837 
tŸÆ
 = 
ï
->
maxp
[0] & 0x3ff;

839 i‡(
ï
->
ext_size
[0]) {

840 
tŸÆ
 = 
ï
->
ext_size
[0];

841 
ï
->
ext_size
[0] = 0;

842 
vÆid
 = 1;

846 i‡(
ïnum
 && (
ï
->
fifo°¨t
[0]Ë< 
tŸÆ
)

849 i‡(!
vÆid
)

850 
tŸÆ
 = 
ï
->
fifo°¨t
[0];

852 
pid
 = 
USB_TOKEN_OUT
;

853 i‡(!
ïnum
 && (
ï
->
c§
[0] & 
MGC_M_CSR0_H_SETUPPKT
)) {

854 
pid
 = 
USB_TOKEN_SETUP
;

855 i‡(
tŸÆ
 != 8) {

856 
	`TRACE
("ûÀgÆ SETUPPKTÜígth o‡%òbyãs", 
tŸÆ
);

862  
	`musb_∑ckë
(
s
, 
ï
, 
ïnum
, 
pid
,

863 
tŸÆ
, 
musb_tx_∑ckë_com∂ëe
, 0);

864 
	}
}

866 
	$musb_rx_ªq
(
MUSBSèã
 *
s
, 
ïnum
)

868 
MUSBEndPoöt
 *
ï
 = 
s
->ï + 
ïnum
;

869 
tŸÆ
;

873 i‡(
ï
->
∑ckey
[1].
p
.
pid
 =
USB_TOKEN_IN
 &&Ép->
°©us
[1] >= 0 &&

874 (
ï
->
fifo°¨t
[1]Ë+Ép->
rxcou¡
 <

875 
ï
->
∑ckey
[1].
p
.
iov
.
size
) {

876 
	`TRACE
("0x%08x, %d", 
ï
->
fifo°¨t
[1],Ép->
rxcou¡
 );

877 
ï
->
fifo°¨t
[1] +ï->
rxcou¡
;

878 
ï
->
fifﬁí
[1] = 0;

880 
ï
->
rxcou¡
 = 
	`MIN
”p->
∑ckey
[0].
p
.
iov
.
size
 - (ï->
fifo°¨t
[1]),

881 
ï
->
maxp
[1]);

883 
ï
->
c§
[1] &~
MGC_M_RXCSR_H_REQPKT
;

884 i‡(!
ïnum
)

885 
ï
->
c§
[0] &~
MGC_M_CSR0_H_REQPKT
;

888 
ï
->
c§
[1] &~(
MGC_M_RXCSR_H_ERROR
 | 
MGC_M_RXCSR_H_RXSTALL
 |

889 
MGC_M_RXCSR_DATAERROR
);

890 i‡(!
ïnum
)

891 
ï
->
c§
[0] &~(
MGC_M_CSR0_H_ERROR
 | 
MGC_M_CSR0_H_RXSTALL
 |

892 
MGC_M_CSR0_H_NAKTIMEOUT
 | 
MGC_M_CSR0_H_NO_PING
);

894 
ï
->
c§
[1] |
MGC_M_RXCSR_FIFOFULL
 | 
MGC_M_RXCSR_RXPKTRDY
;

895 i‡(!
ïnum
)

896 
ï
->
c§
[0] |
MGC_M_CSR0_RXPKTRDY
;

897 
	`musb_rx_öå_£t
(
s
, 
ïnum
, 1);

913 
tŸÆ
 = 
	`MIN
(
ï
->
maxp
[1] & 0x3ff, (
s
->
buf
));

915 #ifde‡
SETUPLEN_HACK


917 i‡(!
ïnum
) {

918 i‡(
ï
->
∑ckey
[0].
p
.
devaddr
 == 2) {

919 
tŸÆ
 = 
	`MIN
(
s
->
£tup_Àn
, 8);

921 
tŸÆ
 = 
	`MIN
(
s
->
£tup_Àn
, 64);

923 
s
->
£tup_Àn
 -
tŸÆ
;

927  
	`musb_∑ckë
(
s
, 
ï
, 
ïnum
, 
USB_TOKEN_IN
,

928 
tŸÆ
, 
musb_rx_∑ckë_com∂ëe
, 1);

929 
	}
}

931 
uöt8_t
 
	$musb_ªad_fifo
(
MUSBEndPoöt
 *
ï
)

933 
uöt8_t
 
vÆue
;

934 i‡(
ï
->
fifﬁí
[1] >= 64) {

936 
	`TRACE
("EP%d FIFO i†nowÉm±y, st›Ñódög", 
ï
->
ïnum
);

942 
ï
->
c§
[1] &~
MGC_M_RXCSR_FIFOFULL
;

943 
vÆue
=
ï
->
buf
[1][ï->
fifo°¨t
[1] +Ép->
fifﬁí
[1] ++];

944 
	`TRACE
("EP%d 0x%02x, %d", 
ï
->
ïnum
, 
vÆue
,Ép->
fifﬁí
[1] );

945  
vÆue
;

946 
	}
}

948 
	$musb_wrôe_fifo
(
MUSBEndPoöt
 *
ï
, 
uöt8_t
 
vÆue
)

950 
	`TRACE
("EP%d = %02x", 
ï
->
ïnum
, 
vÆue
);

951 i‡(
ï
->
fifﬁí
[0] >= 64) {

953 
	`TRACE
("EP%d FIFOÉx˚eded 64 byãs, st› fìdög d©a", 
ï
->
ïnum
);

957 
ï
->
buf
[0][ï->
fifo°¨t
[0] +Ép->
fifﬁí
[0] ++] = 
vÆue
;

958 
ï
->
c§
[0] |
MGC_M_TXCSR_FIFONOTEMPTY
;

959 
	}
}

961 
	$musb_ï_‰ame_ˇn˚l
(
MUSBEndPoöt
 *
ï
, 
dú
)

963 i‡(
ï
->
ötv_timî
[
dú
])

964 
	`qemu_dñ_timî
(
ï
->
ötv_timî
[
dú
]);

965 
	}
}

968 
uöt8_t
 
	$musb_bus˘l_ªadb
(*
›aque
, 
ï
, 
addr
)

970 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

972 
addr
) {

974 
MUSB_HDRC_TXHUBADDR
:

975  
s
->
ï
[ï].
haddr
[0];

976 
MUSB_HDRC_TXHUBPORT
:

977  
s
->
ï
[ï].
hp‹t
[0];

978 
MUSB_HDRC_RXHUBADDR
:

979  
s
->
ï
[ï].
haddr
[1];

980 
MUSB_HDRC_RXHUBPORT
:

981  
s
->
ï
[ï].
hp‹t
[1];

984 
	`TRACE
("unknow¿ªgi°î 0x%02x", 
addr
);

987 
	}
}

989 
	$musb_bus˘l_wrôeb
(*
›aque
, 
ï
, 
addr
, 
uöt8_t
 
vÆue
)

991 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

993 
addr
) {

994 
MUSB_HDRC_TXFUNCADDR
:

995 
s
->
ï
[ï].
Áddr
[0] = 
vÆue
;

997 
MUSB_HDRC_RXFUNCADDR
:

998 
s
->
ï
[ï].
Áddr
[1] = 
vÆue
;

1000 
MUSB_HDRC_TXHUBADDR
:

1001 
s
->
ï
[ï].
haddr
[0] = 
vÆue
;

1003 
MUSB_HDRC_TXHUBPORT
:

1004 
s
->
ï
[ï].
hp‹t
[0] = 
vÆue
;

1006 
MUSB_HDRC_RXHUBADDR
:

1007 
s
->
ï
[ï].
haddr
[1] = 
vÆue
;

1009 
MUSB_HDRC_RXHUBPORT
:

1010 
s
->
ï
[ï].
hp‹t
[1] = 
vÆue
;

1014 
	`TRACE
("unknow¿ªgi°î 0x%02x", 
addr
);

1017 
	}
}

1019 
uöt16_t
 
	$musb_bus˘l_ªadh
(*
›aque
, 
ï
, 
addr
)

1021 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1023 
addr
) {

1024 
MUSB_HDRC_TXFUNCADDR
:

1025  
s
->
ï
[ï].
Áddr
[0];

1026 
MUSB_HDRC_RXFUNCADDR
:

1027  
s
->
ï
[ï].
Áddr
[1];

1030  
	`musb_bus˘l_ªadb
(
s
, 
ï
, 
addr
) |

1031 (
	`musb_bus˘l_ªadb
(
s
, 
ï
, 
addr
 | 1) << 8);

1033 
	}
}

1035 
	$musb_bus˘l_wrôeh
(*
›aque
, 
ï
, 
addr
, 
uöt16_t
 
vÆue
)

1037 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1039 
addr
) {

1040 
MUSB_HDRC_TXFUNCADDR
:

1041 
s
->
ï
[ï].
Áddr
[0] = 
vÆue
;

1043 
MUSB_HDRC_RXFUNCADDR
:

1044 
s
->
ï
[ï].
Áddr
[1] = 
vÆue
;

1048 
	`musb_bus˘l_wrôeb
(
s
, 
ï
, 
addr
, 
vÆue
 & 0xff);

1049 
	`musb_bus˘l_wrôeb
(
s
, 
ï
, 
addr
 | 1, 
vÆue
 >> 8);

1051 
	}
}

1054 
uöt8_t
 
	$musb_ï_ªadb
(*
›aque
, 
ï
, 
addr
)

1056 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1058 
addr
) {

1059 
MUSB_HDRC_TXTYPE
:

1060  
s
->
ï
[ï].
ty≥
[0];

1061 
MUSB_HDRC_TXINTERVAL
:

1062  
s
->
ï
[ï].
öãrvÆ
[0];

1063 
MUSB_HDRC_RXTYPE
:

1064  
s
->
ï
[ï].
ty≥
[1];

1065 
MUSB_HDRC_RXINTERVAL
:

1066  
s
->
ï
[ï].
öãrvÆ
[1];

1067 (
MUSB_HDRC_FIFOSIZE
 & ~1):

1069 
MUSB_HDRC_FIFOSIZE
:

1070  
ï
 ? 
s
->ï[ï].
fifosize
 : s->ï[ï].
c⁄fig
;

1071 
MUSB_HDRC_RXCOUNT
:

1072  
s
->
ï
[ï].
rxcou¡
;

1075 
	`TRACE
("unknow¿ªgi°î 0x%02x", 
addr
);

1078 
	}
}

1080 
	$musb_ï_wrôeb
(*
›aque
, 
ï
, 
addr
, 
uöt8_t
 
vÆue
)

1082 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1084 
addr
) {

1085 
MUSB_HDRC_TXTYPE
:

1086 
s
->
ï
[ï].
ty≥
[0] = 
vÆue
;

1088 
MUSB_HDRC_TXINTERVAL
:

1089 
s
->
ï
[ï].
öãrvÆ
[0] = 
vÆue
;

1090 
	`musb_ï_‰ame_ˇn˚l
(&
s
->
ï
[ep], 0);

1092 
MUSB_HDRC_RXTYPE
:

1093 
s
->
ï
[ï].
ty≥
[1] = 
vÆue
;

1095 
MUSB_HDRC_RXINTERVAL
:

1096 
s
->
ï
[ï].
öãrvÆ
[1] = 
vÆue
;

1097 
	`musb_ï_‰ame_ˇn˚l
(&
s
->
ï
[ep], 1);

1099 (
MUSB_HDRC_FIFOSIZE
 & ~1):

1101 
MUSB_HDRC_FIFOSIZE
:

1102 
	`TRACE
("somebody mes£†wôh fifosizê“ow %òbyãs)", 
vÆue
);

1103 
s
->
ï
[ï].
fifosize
 = 
vÆue
;

1106 
	`TRACE
("unknow¿ªgi°î 0x%02x", 
addr
);

1109 
	}
}

1111 
uöt16_t
 
	$musb_ï_ªadh
(*
›aque
, 
ï
, 
addr
)

1113 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1114 
uöt16_t
 
ªt
;

1116 
addr
) {

1117 
MUSB_HDRC_TXMAXP
:

1118  
s
->
ï
[ï].
maxp
[0];

1119 
MUSB_HDRC_TXCSR
:

1120  
s
->
ï
[ï].
c§
[0];

1121 
MUSB_HDRC_RXMAXP
:

1122  
s
->
ï
[ï].
maxp
[1];

1123 
MUSB_HDRC_RXCSR
:

1124 
ªt
 = 
s
->
ï
[ï].
c§
[1];

1128 i‡(
s
->
ï
[ï].
c§
[1] & 
MGC_M_RXCSR_AUTOCLEAR
)

1129 
s
->
ï
[ï].
c§
[1] &~
MGC_M_RXCSR_RXPKTRDY
;

1131  
ªt
;

1132 
MUSB_HDRC_RXCOUNT
:

1133  
s
->
ï
[ï].
rxcou¡
;

1136  
	`musb_ï_ªadb
(
s
, 
ï
, 
addr
) |

1137 (
	`musb_ï_ªadb
(
s
, 
ï
, 
addr
 | 1) << 8);

1139 
	}
}

1141 
	$musb_ï_wrôeh
(*
›aque
, 
ï
, 
addr
, 
uöt16_t
 
vÆue
)

1143 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1145 
addr
) {

1146 
MUSB_HDRC_TXMAXP
:

1147 
s
->
ï
[ï].
maxp
[0] = 
vÆue
;

1149 
MUSB_HDRC_TXCSR
:

1150 i‡(
ï
) {

1151 
s
->
ï
[ï].
c§
[0] &
vÆue
 & 0xa6;

1152 
s
->
ï
[ï].
c§
[0] |
vÆue
 & 0xff59;

1154 
s
->
ï
[ï].
c§
[0] &
vÆue
 & 0x85;

1155 
s
->
ï
[ï].
c§
[0] |
vÆue
 & 0xf7a;

1158 
	`musb_ï_‰ame_ˇn˚l
(&
s
->
ï
[ep], 0);

1160 i‡((
ï
 && (
vÆue
 & 
MGC_M_TXCSR_FLUSHFIFO
)) ||

1161 (!
ï
 && (
vÆue
 & 
MGC_M_CSR0_FLUSHFIFO
))) {

1162 
s
->
ï
[ï].
fifﬁí
[0] = 0;

1163 
s
->
ï
[ï].
fifo°¨t
[0] = 0;

1164 i‡(
ï
)

1165 
s
->
ï
[ï].
c§
[0] &=

1166 ~(
MGC_M_TXCSR_FIFONOTEMPTY
 | 
MGC_M_TXCSR_TXPKTRDY
);

1168 
s
->
ï
[ï].
c§
[0] &=

1169 ~(
MGC_M_CSR0_TXPKTRDY
 | 
MGC_M_CSR0_RXPKTRDY
);

1172 (
ï
 &&

1173 #ifde‡
CLEAR_NAK


1174 (
vÆue
 & 
MGC_M_TXCSR_TXPKTRDY
) &&

1175 !(
vÆue
 & 
MGC_M_TXCSR_H_NAKTIMEOUT
)) ||

1177 (
vÆue
 & 
MGC_M_TXCSR_TXPKTRDY
)) ||

1179 (!
ï
 &&

1180 #ifde‡
CLEAR_NAK


1181 (
vÆue
 & 
MGC_M_CSR0_TXPKTRDY
) &&

1182 !(
vÆue
 & 
MGC_M_CSR0_H_NAKTIMEOUT
)))

1184 (
vÆue
 & 
MGC_M_CSR0_TXPKTRDY
)))

1186 
	`musb_tx_rdy
(
s
, 
ï
);

1187 i‡(!
ï
 &&

1188 (
vÆue
 & 
MGC_M_CSR0_H_REQPKT
) &&

1189 #ifde‡
CLEAR_NAK


1190 !(
vÆue
 & (
MGC_M_CSR0_H_NAKTIMEOUT
 |

1191 
MGC_M_CSR0_RXPKTRDY
)))

1193 !(
vÆue
 & 
MGC_M_CSR0_RXPKTRDY
))

1195 
	`musb_rx_ªq
(
s
, 
ï
);

1198 
MUSB_HDRC_RXMAXP
:

1199 
s
->
ï
[ï].
maxp
[1] = 
vÆue
;

1201 
MUSB_HDRC_RXCSR
:

1204 (
vÆue
 & 
MGC_M_RXCSR_H_AUTOREQ
) &&

1205 !(
vÆue
 & 
MGC_M_RXCSR_RXPKTRDY
) &&

1206 (
s
->
ï
[ï].
c§
[1] & 
MGC_M_RXCSR_RXPKTRDY
))

1207 
vÆue
 |
MGC_M_RXCSR_H_REQPKT
;

1209 
s
->
ï
[ï].
c§
[1] &0x102 | (
vÆue
 & 0x4d);

1210 
s
->
ï
[ï].
c§
[1] |
vÆue
 & 0xfeb0;

1212 
	`musb_ï_‰ame_ˇn˚l
(&
s
->
ï
[ep], 1);

1214 i‡(
vÆue
 & 
MGC_M_RXCSR_FLUSHFIFO
) {

1215 
s
->
ï
[ï].
fifﬁí
[1] = 0;

1216 
s
->
ï
[ï].
fifo°¨t
[1] = 0;

1217 
s
->
ï
[ï].
c§
[1] &~(
MGC_M_RXCSR_FIFOFULL
 | 
MGC_M_RXCSR_RXPKTRDY
);

1221 #ifde‡
CLEAR_NAK


1222 i‡((
vÆue
 & 
MGC_M_RXCSR_H_REQPKT
Ë&& !(vÆuê& 
MGC_M_RXCSR_DATAERROR
))

1224 i‡(
vÆue
 & 
MGC_M_RXCSR_H_REQPKT
)

1226 
	`musb_rx_ªq
(
s
, 
ï
);

1228 
MUSB_HDRC_RXCOUNT
:

1229 
s
->
ï
[ï].
rxcou¡
 = 
vÆue
;

1233 
	`musb_ï_wrôeb
(
s
, 
ï
, 
addr
, 
vÆue
 & 0xff);

1234 
	`musb_ï_wrôeb
(
s
, 
ï
, 
addr
 | 1, 
vÆue
 >> 8);

1236 
	}
}

1239 
uöt32_t
 
	$musb_ªadb
(*
›aque
, 
èrgë_phys_addr_t
 
addr
)

1241 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1242 
ï
, 
i
;

1243 
uöt8_t
 
ªt
;

1245 
addr
) {

1246 
MUSB_HDRC_FADDR
:

1247  
s
->
Áddr
;

1248 
MUSB_HDRC_POWER
:

1249  
s
->
powî
;

1250 
MUSB_HDRC_INTRUSB
:

1251 
ªt
 = 
s
->
öå
;

1252 
i
 = 0; i < (
ªt
) * 8; i ++)

1253 i‡(
ªt
 & (1 << 
i
))

1254 
	`musb_öå_£t
(
s
, 
i
, 0);

1255  
ªt
;

1256 
MUSB_HDRC_INTRUSBE
:

1257  
s
->
mask
;

1258 
MUSB_HDRC_INDEX
:

1259  
s
->
idx
;

1260 
MUSB_HDRC_TESTMODE
:

1263 
MUSB_HDRC_EP_IDX
 ... (MUSB_HDRC_EP_IDX + 0xf):

1264  
	`musb_ï_ªadb
(
s
, s->
idx
, 
addr
 & 0xf);

1266 
MUSB_HDRC_DEVCTL
:

1267  
s
->
dev˘l
;

1269 
MUSB_HDRC_TXFIFOSZ
:

1270 
MUSB_HDRC_RXFIFOSZ
:

1271 
MUSB_HDRC_VCTRL
:

1275 
MUSB_HDRC_HWVERS
:

1278 (
MUSB_HDRC_VCTRL
 | 1):

1279 (
MUSB_HDRC_HWVERS
 | 1):

1280 (
MUSB_HDRC_DEVCTL
 | 1):

1283 
MUSB_HDRC_BUSCTL
 ... (MUSB_HDRC_BUSCTL + 0x7f):

1284 
ï
 = (
addr
 >> 3) & 0xf;

1285  
	`musb_bus˘l_ªadb
(
s
, 
ï
, 
addr
 & 0x7);

1287 
MUSB_HDRC_EP
 ... (MUSB_HDRC_EP + 0xff):

1288 
ï
 = (
addr
 >> 4) & 0xf;

1289  
	`musb_ï_ªadb
(
s
, 
ï
, 
addr
 & 0xf);

1291 
MUSB_HDRC_FIFO
 ... (MUSB_HDRC_FIFO + 0x3f):

1292 
ï
 = ((
addr
 - 
MUSB_HDRC_FIFO
) >> 2) & 0xf;

1293  
	`musb_ªad_fifo
(
s
->
ï
 +Ép);

1296 
	`TRACE
("unknow¿ªgi°î 0x%02x", (Ë
addr
);

1299 
	}
}

1301 
	$musb_wrôeb
(*
›aque
, 
èrgë_phys_addr_t
 
addr
, 
uöt32_t
 
vÆue
)

1303 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1304 
ï
;

1306 
addr
) {

1307 
MUSB_HDRC_FADDR
:

1308 
s
->
Áddr
 = 
vÆue
 & 0x7f;

1310 
MUSB_HDRC_POWER
:

1311 
s
->
powî
 = (
vÆue
 & 0xef) | (s->power & 0x10);

1313 i‡((
vÆue
 & 
MGC_M_POWER_RESET
Ë&& 
s
->
p‹t
.
dev
) {

1314 
	`usb_devi˚_ª£t
(
s
->
p‹t
.
dev
);

1316 i‡((
vÆue
 & 
MGC_M_POWER_HSENAB
) &&

1317 
s
->
p‹t
.
dev
->
•ìd
 =
USB_SPEED_HIGH
)

1318 
s
->
powî
 |
MGC_M_POWER_HSMODE
;

1321 i‡(
vÆue
 & 
MGC_M_POWER_SUSPENDM
) {

1326 i‡(
vÆue
 & 
MGC_M_POWER_RESUME
) {

1331 
MUSB_HDRC_INTRUSB
:

1333 
MUSB_HDRC_INTRUSBE
:

1334 
s
->
mask
 = 
vÆue
 & 0xff;

1336 
MUSB_HDRC_INDEX
:

1337 
s
->
idx
 = 
vÆue
 & 0xf;

1339 
MUSB_HDRC_TESTMODE
:

1342 
MUSB_HDRC_EP_IDX
 ... (MUSB_HDRC_EP_IDX + 0xf):

1343 
	`musb_ï_wrôeb
(
s
, s->
idx
, 
addr
 & 0xf, 
vÆue
);

1346 
MUSB_HDRC_DEVCTL
:

1347 
s
->
£ssi⁄
 = !!(
vÆue
 & 
MGC_M_DEVCTL_SESSION
);

1348 
	`musb_£ssi⁄_upd©e
(
s
,

1349 !!
s
->
p‹t
.
dev
,

1350 !!(
s
->
dev˘l
 & 
MGC_M_DEVCTL_SESSION
));

1353 
s
->
dev˘l
 &~
MGC_M_DEVCTL_SESSION
;

1354 
s
->
dev˘l
 |
vÆue
 & 
MGC_M_DEVCTL_SESSION
;

1357 
MUSB_HDRC_TXFIFOSZ
:

1358 
MUSB_HDRC_RXFIFOSZ
:

1359 
MUSB_HDRC_VCTRL
:

1363 (
MUSB_HDRC_VCTRL
 | 1):

1364 (
MUSB_HDRC_DEVCTL
 | 1):

1367 
MUSB_HDRC_BUSCTL
 ... (MUSB_HDRC_BUSCTL + 0x7f):

1368 
ï
 = (
addr
 >> 3) & 0xf;

1369 
	`musb_bus˘l_wrôeb
(
s
, 
ï
, 
addr
 & 0x7, 
vÆue
);

1372 
MUSB_HDRC_EP
 ... (MUSB_HDRC_EP + 0xff):

1373 
ï
 = (
addr
 >> 4) & 0xf;

1374 
	`musb_ï_wrôeb
(
s
, 
ï
, 
addr
 & 0xf, 
vÆue
);

1377 
MUSB_HDRC_FIFO
 ... (MUSB_HDRC_FIFO + 0x3f):

1378 
ï
 = ((
addr
 - 
MUSB_HDRC_FIFO
) >> 2) & 0xf;

1379 
	`musb_wrôe_fifo
(
s
->
ï
 +Ép, 
vÆue
 & 0xff);

1383 
	`TRACE
("unknow¿ªgi°î 0x%02x", (Ë
addr
);

1386 
	}
}

1388 
uöt32_t
 
	$musb_ªadh
(*
›aque
, 
èrgë_phys_addr_t
 
addr
)

1390 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1391 
ï
, 
i
;

1392 
uöt16_t
 
ªt
;

1394 
addr
) {

1395 
MUSB_HDRC_INTRTX
:

1396 
ªt
 = 
s
->
tx_öå
;

1398 
i
 = 0; i < (
ªt
) * 8; i ++)

1399 i‡(
ªt
 & (1 << 
i
))

1400 
	`musb_tx_öå_£t
(
s
, 
i
, 0);

1401  
ªt
;

1402 
MUSB_HDRC_INTRRX
:

1403 
ªt
 = 
s
->
rx_öå
;

1405 
i
 = 0; i < (
ªt
) * 8; i ++)

1406 i‡(
ªt
 & (1 << 
i
))

1407 
	`musb_rx_öå_£t
(
s
, 
i
, 0);

1408  
ªt
;

1409 
MUSB_HDRC_INTRTXE
:

1410  
s
->
tx_mask
;

1411 
MUSB_HDRC_INTRRXE
:

1412  
s
->
rx_mask
;

1414 
MUSB_HDRC_FRAME
:

1417 
MUSB_HDRC_TXFIFOADDR
:

1418  
s
->
ï
[s->
idx
].
fifﬂddr
[0];

1419 
MUSB_HDRC_RXFIFOADDR
:

1420  
s
->
ï
[s->
idx
].
fifﬂddr
[1];

1422 
MUSB_HDRC_EP_IDX
 ... (MUSB_HDRC_EP_IDX + 0xf):

1423  
	`musb_ï_ªadh
(
s
, s->
idx
, 
addr
 & 0xf);

1425 
MUSB_HDRC_BUSCTL
 ... (MUSB_HDRC_BUSCTL + 0x7f):

1426 
ï
 = (
addr
 >> 3) & 0xf;

1427  
	`musb_bus˘l_ªadh
(
s
, 
ï
, 
addr
 & 0x7);

1429 
MUSB_HDRC_EP
 ... (MUSB_HDRC_EP + 0xff):

1430 
ï
 = (
addr
 >> 4) & 0xf;

1431  
	`musb_ï_ªadh
(
s
, 
ï
, 
addr
 & 0xf);

1433 
MUSB_HDRC_FIFO
 ... (MUSB_HDRC_FIFO + 0x3f):

1434 
ï
 = ((
addr
 - 
MUSB_HDRC_FIFO
) >> 2) & 0xf;

1435  (
	`musb_ªad_fifo
(
s
->
ï
 +Ép) | musb_read_fifo(s->ep +Ép) << 8);

1438  
	`musb_ªadb
(
s
, 
addr
) | (musb_readb(s,áddr | 1) << 8);

1440 
	}
}

1442 
	$musb_wrôeh
(*
›aque
, 
èrgë_phys_addr_t
 
addr
, 
uöt32_t
 
vÆue
)

1444 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1445 
ï
;

1447 
addr
) {

1448 
MUSB_HDRC_INTRTXE
:

1449 
s
->
tx_mask
 = 
vÆue
;

1454 
MUSB_HDRC_INTRRXE
:

1455 
s
->
rx_mask
 = 
vÆue
;

1458 
MUSB_HDRC_FRAME
:

1461 
MUSB_HDRC_TXFIFOADDR
:

1462 
s
->
ï
[s->
idx
].
fifﬂddr
[0] = 
vÆue
;

1463 
s
->
ï
[s->
idx
].
buf
[0] =

1464 
s
->
buf
 + ((
vÆue
 << 3) & 0x7ff );

1466 
MUSB_HDRC_RXFIFOADDR
:

1467 
s
->
ï
[s->
idx
].
fifﬂddr
[1] = 
vÆue
;

1468 
s
->
ï
[s->
idx
].
buf
[1] =

1469 
s
->
buf
 + ((
vÆue
 << 3) & 0x7ff);

1472 
MUSB_HDRC_EP_IDX
 ... (MUSB_HDRC_EP_IDX + 0xf):

1473 
	`musb_ï_wrôeh
(
s
, s->
idx
, 
addr
 & 0xf, 
vÆue
);

1476 
MUSB_HDRC_BUSCTL
 ... (MUSB_HDRC_BUSCTL + 0x7f):

1477 
ï
 = (
addr
 >> 3) & 0xf;

1478 
	`musb_bus˘l_wrôeh
(
s
, 
ï
, 
addr
 & 0x7, 
vÆue
);

1481 
MUSB_HDRC_EP
 ... (MUSB_HDRC_EP + 0xff):

1482 
ï
 = (
addr
 >> 4) & 0xf;

1483 
	`musb_ï_wrôeh
(
s
, 
ï
, 
addr
 & 0xf, 
vÆue
);

1486 
MUSB_HDRC_FIFO
 ... (MUSB_HDRC_FIFO + 0x3f):

1487 
ï
 = ((
addr
 - 
MUSB_HDRC_FIFO
) >> 2) & 0xf;

1488 
	`musb_wrôe_fifo
(
s
->
ï
 +Ép, 
vÆue
 & 0xff);

1489 
	`musb_wrôe_fifo
(
s
->
ï
 +Ép, (
vÆue
 >> 8) & 0xff);

1493 
	`musb_wrôeb
(
s
, 
addr
, 
vÆue
 & 0xff);

1494 
	`musb_wrôeb
(
s
, 
addr
 | 1, 
vÆue
 >> 8);

1496 
	}
}

1498 
uöt32_t
 
	$musb_ªadw
(*
›aque
, 
èrgë_phys_addr_t
 
addr
)

1500 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1501 
ï
;

1503 
addr
) {

1504 
MUSB_HDRC_FIFO
 ... (MUSB_HDRC_FIFO + 0x3f):

1505 
ï
 = ((
addr
 - 
MUSB_HDRC_FIFO
) >> 2) & 0xf;

1506  ( 
	`musb_ªad_fifo
(
s
->
ï
 +Ép) |

1507 
	`musb_ªad_fifo
(
s
->
ï
 +Ép) << 8 |

1508 
	`musb_ªad_fifo
(
s
->
ï
 +Ép) << 16 |

1509 
	`musb_ªad_fifo
(
s
->
ï
 +Ép) << 24 );

1511 
	`TRACE
("unknow¿ªgi°î 0x%02x", (Ë
addr
);

1514 
	}
}

1516 
	$musb_wrôew
(*
›aque
, 
èrgë_phys_addr_t
 
addr
, 
uöt32_t
 
vÆue
)

1518 
MUSBSèã
 *
s
 = (MUSBSèã *Ë
›aque
;

1519 
ï
;

1521 
addr
) {

1522 
MUSB_HDRC_FIFO
 ... (MUSB_HDRC_FIFO + 0x3f):

1523 
ï
 = ((
addr
 - 
MUSB_HDRC_FIFO
) >> 2) & 0xf;

1524 
	`musb_wrôe_fifo
(
s
->
ï
 +Ép, 
vÆue
 & 0xff);

1525 
	`musb_wrôe_fifo
(
s
->
ï
 +Ép, (
vÆue
 >> 8 ) & 0xff);

1526 
	`musb_wrôe_fifo
(
s
->
ï
 +Ép, (
vÆue
 >> 16) & 0xff);

1527 
	`musb_wrôe_fifo
(
s
->
ï
 +Ép, (
vÆue
 >> 24) & 0xff);

1530 
	`TRACE
("unknow¿ªgi°î 0x%02x", (Ë
addr
);

1533 
	}
}

1535 
CPURódMem‹yFunc
 * c⁄° 
	gmusb_ªad
[] = {

1536 
musb_ªadb
,

1537 
musb_ªadh
,

1538 
musb_ªadw
,

1541 
CPUWrôeMem‹yFunc
 * c⁄° 
	gmusb_wrôe
[] = {

1542 
musb_wrôeb
,

1543 
musb_wrôeh
,

1544 
musb_wrôew
,

	@hcd-ohci.c

29 
	~"hw/hw.h
"

30 
	~"qemu-timî.h
"

31 
	~"hw/usb.h
"

32 
	~"hw/pci.h
"

33 
	~"hw/sysbus.h
"

34 
	~"hw/qdev-dma.h
"

43 #ifde‡
DEBUG_OHCI


44 
	#DPRINTF
 
¥ötf


	)

46 
	#DPRINTF
(...)

	)

51 
	#OHCI_MAX_PORTS
 15

	)

53 
öt64_t
 
	gusb_‰ame_time
;

54 
öt64_t
 
	gusb_bô_time
;

56 
	sOHCIP‹t
 {

57 
USBP‹t
 
	mp‹t
;

58 
uöt32_t
 
	m˘æ
;

59 } 
	tOHCIP‹t
;

62 
USBBus
 
	mbus
;

63 
qemu_úq
 
	múq
;

64 
Mem‹yRegi⁄
 
	mmem
;

65 
DMAC⁄ãxt
 *
	mdma
;

66 
	mnum_p‹ts
;

67 c⁄° *
	m«me
;

69 
QEMUTimî
 *
	meof_timî
;

70 
öt64_t
 
	msof_time
;

74 
uöt32_t
 
	m˘l
, 
	m°©us
;

75 
uöt32_t
 
	möå_°©us
;

76 
uöt32_t
 
	möå
;

79 
uöt32_t
 
	mhcˇ
;

80 
uöt32_t
 
	m˘æ_hód
, 
	m˘æ_cur
;

81 
uöt32_t
 
	mbulk_hód
, 
	mbulk_cur
;

82 
uöt32_t
 
	m≥r_cur
;

83 
uöt32_t
 
	md⁄e
;

84 
	md⁄e_cou¡
;

87 
uöt32_t
 
	mfsmps
:15;

88 
uöt32_t
 
	mfô
:1;

89 
uöt32_t
 
	mfi
:14;

90 
uöt32_t
 
	m‰t
:1;

91 
uöt16_t
 
	m‰ame_numbî
;

92 
uöt16_t
 
	m∑ddög
;

93 
uöt32_t
 
	mp°¨t
;

94 
uöt32_t
 
	ml°
;

97 
uöt32_t
 
	mrhdesc_a
, 
	mrhdesc_b
;

98 
uöt32_t
 
	mrh°©us
;

99 
OHCIP‹t
 
	mrhp‹t
[
OHCI_MAX_PORTS
];

102 
uöt32_t
 
	mh°©us
;

103 
uöt32_t
 
	mhmask
;

104 
uöt32_t
 
	mhª£t
;

105 
uöt32_t
 
	mhã°
;

108 
dma_addr_t
 
	mloˇlmem_ba£
;

111 
uöt32_t
 
	mﬁd_˘l
;

112 
USBPackë
 
	musb_∑ckë
;

113 
uöt8_t
 
	musb_buf
[8192];

114 
uöt32_t
 
	masync_td
;

115 
	masync_com∂ëe
;

117 } 
	tOHCISèã
;

120 
	sohci_hcˇ
 {

121 
uöt32_t
 
	möå
[32];

122 
uöt16_t
 
	m‰ame
, 
	m∑d
;

123 
uöt32_t
 
	md⁄e
;

125 
	#HCCA_WRITEBACK_OFFSET
 
	`off£tof
(
ohci_hcˇ
, 
‰ame
)

	)

126 
	#HCCA_WRITEBACK_SIZE
 8

	)

128 
	#ED_WBACK_OFFSET
 
	`off£tof
(
ohci_ed
, 
hód
)

	)

129 
	#ED_WBACK_SIZE
 4

	)

131 
ohci_bus_°›
(
OHCISèã
 *
ohci
);

132 
ohci_async_ˇn˚l_devi˚
(
OHCISèã
 *
ohci
, 
USBDevi˚
 *
dev
);

135 
	#OHCI_ED_FA_SHIFT
 0

	)

136 
	#OHCI_ED_FA_MASK
 (0x7f<<
OHCI_ED_FA_SHIFT
)

	)

137 
	#OHCI_ED_EN_SHIFT
 7

	)

138 
	#OHCI_ED_EN_MASK
 (0xf<<
OHCI_ED_EN_SHIFT
)

	)

139 
	#OHCI_ED_D_SHIFT
 11

	)

140 
	#OHCI_ED_D_MASK
 (3<<
OHCI_ED_D_SHIFT
)

	)

141 
	#OHCI_ED_S
 (1<<13)

	)

142 
	#OHCI_ED_K
 (1<<14)

	)

143 
	#OHCI_ED_F
 (1<<15)

	)

144 
	#OHCI_ED_MPS_SHIFT
 16

	)

145 
	#OHCI_ED_MPS_MASK
 (0x7ff<<
OHCI_ED_MPS_SHIFT
)

	)

148 
	#OHCI_ED_H
 1

	)

149 
	#OHCI_ED_C
 2

	)

152 
	#OHCI_TD_R
 (1<<18)

	)

153 
	#OHCI_TD_DP_SHIFT
 19

	)

154 
	#OHCI_TD_DP_MASK
 (3<<
OHCI_TD_DP_SHIFT
)

	)

155 
	#OHCI_TD_DI_SHIFT
 21

	)

156 
	#OHCI_TD_DI_MASK
 (7<<
OHCI_TD_DI_SHIFT
)

	)

157 
	#OHCI_TD_T0
 (1<<24)

	)

158 
	#OHCI_TD_T1
 (1<<25)

	)

159 
	#OHCI_TD_EC_SHIFT
 26

	)

160 
	#OHCI_TD_EC_MASK
 (3<<
OHCI_TD_EC_SHIFT
)

	)

161 
	#OHCI_TD_CC_SHIFT
 28

	)

162 
	#OHCI_TD_CC_MASK
 (0xf<<
OHCI_TD_CC_SHIFT
)

	)

166 
	#OHCI_TD_SF_SHIFT
 0

	)

167 
	#OHCI_TD_SF_MASK
 (0xffff<<
OHCI_TD_SF_SHIFT
)

	)

168 
	#OHCI_TD_FC_SHIFT
 24

	)

169 
	#OHCI_TD_FC_MASK
 (7<<
OHCI_TD_FC_SHIFT
)

	)

172 
	#OHCI_TD_PSW_CC_SHIFT
 12

	)

173 
	#OHCI_TD_PSW_CC_MASK
 (0xf<<
OHCI_TD_PSW_CC_SHIFT
)

	)

174 
	#OHCI_TD_PSW_SIZE_SHIFT
 0

	)

175 
	#OHCI_TD_PSW_SIZE_MASK
 (0xfff<<
OHCI_TD_PSW_SIZE_SHIFT
)

	)

177 
	#OHCI_PAGE_MASK
 0xfffff000

	)

178 
	#OHCI_OFFSET_MASK
 0xfff

	)

180 
	#OHCI_DPTR_MASK
 0xfffffff0

	)

182 
	#OHCI_BM
(
vÆ
, 
fõld
) \

183 (((
vÆ
Ë& 
OHCI_
##
fõld
##
_MASK
Ë>> OHCI_##fõld##
_SHIFT
)

	)

185 
	#OHCI_SET_BM
(
vÆ
, 
fõld
, 
√wvÆ
) do { \

186 
vÆ
 &~
OHCI_
##
fõld
##
_MASK
; \

187 
vÆ
 |((
√wvÆ
Ë<< 
OHCI_
##
fõld
##
_SHIFT
Ë& OHCI_##fõld##
_MASK
; \

188 } 0)

	)

191 
	sohci_ed
 {

192 
uöt32_t
 
	mÊags
;

193 
uöt32_t
 
	mèû
;

194 
uöt32_t
 
	mhód
;

195 
uöt32_t
 
	m√xt
;

199 
	sohci_td
 {

200 
uöt32_t
 
	mÊags
;

201 
uöt32_t
 
	mcbp
;

202 
uöt32_t
 
	m√xt
;

203 
uöt32_t
 
	mbe
;

207 
	sohci_iso_td
 {

208 
uöt32_t
 
	mÊags
;

209 
uöt32_t
 
	mbp
;

210 
uöt32_t
 
	m√xt
;

211 
uöt32_t
 
	mbe
;

212 
uöt16_t
 
	moff£t
[8];

215 
	#USB_HZ
 12000000

	)

218 
	#OHCI_CTL_CBSR
 ((1<<0)|(1<<1))

	)

219 
	#OHCI_CTL_PLE
 (1<<2)

	)

220 
	#OHCI_CTL_IE
 (1<<3)

	)

221 
	#OHCI_CTL_CLE
 (1<<4)

	)

222 
	#OHCI_CTL_BLE
 (1<<5)

	)

223 
	#OHCI_CTL_HCFS
 ((1<<6)|(1<<7))

	)

224 
	#OHCI_USB_RESET
 0x00

	)

225 
	#OHCI_USB_RESUME
 0x40

	)

226 
	#OHCI_USB_OPERATIONAL
 0x80

	)

227 
	#OHCI_USB_SUSPEND
 0xc0

	)

228 
	#OHCI_CTL_IR
 (1<<8)

	)

229 
	#OHCI_CTL_RWC
 (1<<9)

	)

230 
	#OHCI_CTL_RWE
 (1<<10)

	)

232 
	#OHCI_STATUS_HCR
 (1<<0)

	)

233 
	#OHCI_STATUS_CLF
 (1<<1)

	)

234 
	#OHCI_STATUS_BLF
 (1<<2)

	)

235 
	#OHCI_STATUS_OCR
 (1<<3)

	)

236 
	#OHCI_STATUS_SOC
 ((1<<6)|(1<<7))

	)

238 
	#OHCI_INTR_SO
 (1<<0Ë

	)

239 
	#OHCI_INTR_WD
 (1<<1Ë

	)

240 
	#OHCI_INTR_SF
 (1<<2Ë

	)

241 
	#OHCI_INTR_RD
 (1<<3Ë

	)

242 
	#OHCI_INTR_UE
 (1<<4Ë

	)

243 
	#OHCI_INTR_FNO
 (1<<5Ë

	)

244 
	#OHCI_INTR_RHSC
 (1<<6Ë

	)

245 
	#OHCI_INTR_OC
 (1<<30Ë

	)

246 
	#OHCI_INTR_MIE
 (1<<31Ë

	)

248 
	#OHCI_HCCA_SIZE
 0x100

	)

249 
	#OHCI_HCCA_MASK
 0xffffff00

	)

251 
	#OHCI_EDPTR_MASK
 0xfffffff0

	)

253 
	#OHCI_FMI_FI
 0x00003fff

	)

254 
	#OHCI_FMI_FSMPS
 0xffff0000

	)

255 
	#OHCI_FMI_FIT
 0x80000000

	)

257 
	#OHCI_FR_RT
 (1<<31)

	)

259 
	#OHCI_LS_THRESH
 0x628

	)

261 
	#OHCI_RHA_RW_MASK
 0x00000000

	)

262 
	#OHCI_RHA_PSM
 (1<<8)

	)

263 
	#OHCI_RHA_NPS
 (1<<9)

	)

264 
	#OHCI_RHA_DT
 (1<<10)

	)

265 
	#OHCI_RHA_OCPM
 (1<<11)

	)

266 
	#OHCI_RHA_NOCP
 (1<<12)

	)

267 
	#OHCI_RHA_POTPGT_MASK
 0xff000000

	)

269 
	#OHCI_RHS_LPS
 (1<<0)

	)

270 
	#OHCI_RHS_OCI
 (1<<1)

	)

271 
	#OHCI_RHS_DRWE
 (1<<15)

	)

272 
	#OHCI_RHS_LPSC
 (1<<16)

	)

273 
	#OHCI_RHS_OCIC
 (1<<17)

	)

274 
	#OHCI_RHS_CRWE
 (1<<31)

	)

276 
	#OHCI_PORT_CCS
 (1<<0)

	)

277 
	#OHCI_PORT_PES
 (1<<1)

	)

278 
	#OHCI_PORT_PSS
 (1<<2)

	)

279 
	#OHCI_PORT_POCI
 (1<<3)

	)

280 
	#OHCI_PORT_PRS
 (1<<4)

	)

281 
	#OHCI_PORT_PPS
 (1<<8)

	)

282 
	#OHCI_PORT_LSDA
 (1<<9)

	)

283 
	#OHCI_PORT_CSC
 (1<<16)

	)

284 
	#OHCI_PORT_PESC
 (1<<17)

	)

285 
	#OHCI_PORT_PSSC
 (1<<18)

	)

286 
	#OHCI_PORT_OCIC
 (1<<19)

	)

287 
	#OHCI_PORT_PRSC
 (1<<20)

	)

288 
	#OHCI_PORT_WTC
 (
OHCI_PORT_CSC
|
OHCI_PORT_PESC
|
OHCI_PORT_PSSC
 \

289 |
OHCI_PORT_OCIC
|
OHCI_PORT_PRSC
)

	)

291 
	#OHCI_TD_DIR_SETUP
 0x0

	)

292 
	#OHCI_TD_DIR_OUT
 0x1

	)

293 
	#OHCI_TD_DIR_IN
 0x2

	)

294 
	#OHCI_TD_DIR_RESERVED
 0x3

	)

296 
	#OHCI_CC_NOERROR
 0x0

	)

297 
	#OHCI_CC_CRC
 0x1

	)

298 
	#OHCI_CC_BITSTUFFING
 0x2

	)

299 
	#OHCI_CC_DATATOGGLEMISMATCH
 0x3

	)

300 
	#OHCI_CC_STALL
 0x4

	)

301 
	#OHCI_CC_DEVICENOTRESPONDING
 0x5

	)

302 
	#OHCI_CC_PIDCHECKFAILURE
 0x6

	)

303 
	#OHCI_CC_UNDEXPETEDPID
 0x7

	)

304 
	#OHCI_CC_DATAOVERRUN
 0x8

	)

305 
	#OHCI_CC_DATAUNDERRUN
 0x9

	)

306 
	#OHCI_CC_BUFFEROVERRUN
 0xc

	)

307 
	#OHCI_CC_BUFFERUNDERRUN
 0xd

	)

309 
	#OHCI_HRESET_FSBIR
 (1 << 0)

	)

312 
ölöe
 
	$ohci_öå_upd©e
(
OHCISèã
 *
ohci
)

314 
Àvñ
 = 0;

316 i‡((
ohci
->
öå
 & 
OHCI_INTR_MIE
) &&

317 (
ohci
->
öå_°©us
 & ohci->
öå
))

318 
Àvñ
 = 1;

320 
	`qemu_£t_úq
(
ohci
->
úq
, 
Àvñ
);

321 
	}
}

324 
ölöe
 
	$ohci_£t_öãºu±
(
OHCISèã
 *
ohci
, 
uöt32_t
 
öå
)

326 
ohci
->
öå_°©us
 |
öå
;

327 
	`ohci_öå_upd©e
(
ohci
);

328 
	}
}

331 
	$ohci_©èch
(
USBP‹t
 *
p‹t1
)

333 
OHCISèã
 *
s
 = 
p‹t1
->
›aque
;

334 
OHCIP‹t
 *
p‹t
 = &
s
->
rhp‹t
[
p‹t1
->
ödex
];

335 
uöt32_t
 
ﬁd_°©e
 = 
p‹t
->
˘æ
;

338 
p‹t
->
˘æ
 |
OHCI_PORT_CCS
 | 
OHCI_PORT_CSC
;

341 i‡(
p‹t
->p‹t.
dev
->
•ìd
 =
USB_SPEED_LOW
) {

342 
p‹t
->
˘æ
 |
OHCI_PORT_LSDA
;

344 
p‹t
->
˘æ
 &~
OHCI_PORT_LSDA
;

348 i‡((
s
->
˘l
 & 
OHCI_CTL_HCFS
Ë=
OHCI_USB_SUSPEND
) {

349 
	`ohci_£t_öãºu±
(
s
, 
OHCI_INTR_RD
);

352 
	`DPRINTF
("usb-ohci: AâachedÖ‹à%d\n", 
p‹t1
->
ödex
);

354 i‡(
ﬁd_°©e
 !
p‹t
->
˘æ
) {

355 
	`ohci_£t_öãºu±
(
s
, 
OHCI_INTR_RHSC
);

357 
	}
}

359 
	$ohci_dëach
(
USBP‹t
 *
p‹t1
)

361 
OHCISèã
 *
s
 = 
p‹t1
->
›aque
;

362 
OHCIP‹t
 *
p‹t
 = &
s
->
rhp‹t
[
p‹t1
->
ödex
];

363 
uöt32_t
 
ﬁd_°©e
 = 
p‹t
->
˘æ
;

365 
	`ohci_async_ˇn˚l_devi˚
(
s
, 
p‹t1
->
dev
);

368 i‡(
p‹t
->
˘æ
 & 
OHCI_PORT_CCS
) {

369 
p‹t
->
˘æ
 &~
OHCI_PORT_CCS
;

370 
p‹t
->
˘æ
 |
OHCI_PORT_CSC
;

373 i‡(
p‹t
->
˘æ
 & 
OHCI_PORT_PES
) {

374 
p‹t
->
˘æ
 &~
OHCI_PORT_PES
;

375 
p‹t
->
˘æ
 |
OHCI_PORT_PESC
;

377 
	`DPRINTF
("usb-ohci: DëachedÖ‹à%d\n", 
p‹t1
->
ödex
);

379 i‡(
ﬁd_°©e
 !
p‹t
->
˘æ
) {

380 
	`ohci_£t_öãºu±
(
s
, 
OHCI_INTR_RHSC
);

382 
	}
}

384 
	$ohci_wakeup
(
USBP‹t
 *
p‹t1
)

386 
OHCISèã
 *
s
 = 
p‹t1
->
›aque
;

387 
OHCIP‹t
 *
p‹t
 = &
s
->
rhp‹t
[
p‹t1
->
ödex
];

388 
uöt32_t
 
öå
 = 0;

389 i‡(
p‹t
->
˘æ
 & 
OHCI_PORT_PSS
) {

390 
	`DPRINTF
("usb-ohci:Ö‹à%d: wakeup\n", 
p‹t1
->
ödex
);

391 
p‹t
->
˘æ
 |
OHCI_PORT_PSSC
;

392 
p‹t
->
˘æ
 &~
OHCI_PORT_PSS
;

393 
öå
 = 
OHCI_INTR_RHSC
;

396 i‡((
s
->
˘l
 & 
OHCI_CTL_HCFS
Ë=
OHCI_USB_SUSPEND
) {

397 
	`DPRINTF
("usb-ohci:Ñemote-wakeup: SUSPEND->RESUME\n");

399 
s
->
˘l
 &~
OHCI_CTL_HCFS
;

400 
s
->
˘l
 |
OHCI_USB_RESUME
;

404 
öå
 = 
OHCI_INTR_RD
;

406 
	`ohci_£t_öãºu±
(
s
, 
öå
);

407 
	}
}

409 
	$ohci_chûd_dëach
(
USBP‹t
 *
p‹t1
, 
USBDevi˚
 *
chûd
)

411 
OHCISèã
 *
s
 = 
p‹t1
->
›aque
;

413 
	`ohci_async_ˇn˚l_devi˚
(
s
, 
chûd
);

414 
	}
}

416 
USBDevi˚
 *
	$ohci_föd_devi˚
(
OHCISèã
 *
ohci
, 
uöt8_t
 
addr
)

418 
USBDevi˚
 *
dev
;

419 
i
;

421 
i
 = 0; i < 
ohci
->
num_p‹ts
; i++) {

422 i‡((
ohci
->
rhp‹t
[
i
].
˘æ
 & 
OHCI_PORT_PES
) == 0) {

425 
dev
 = 
	`usb_föd_devi˚
(&
ohci
->
rhp‹t
[
i
].
p‹t
, 
addr
);

426 i‡(
dev
 !
NULL
) {

427  
dev
;

430  
NULL
;

431 
	}
}

434 
	$ohci_ª£t
(*
›aque
)

436 
OHCISèã
 *
ohci
 = 
›aque
;

437 
OHCIP‹t
 *
p‹t
;

438 
i
;

440 
	`ohci_bus_°›
(
ohci
);

441 
ohci
->
˘l
 = 0;

442 
ohci
->
ﬁd_˘l
 = 0;

443 
ohci
->
°©us
 = 0;

444 
ohci
->
öå_°©us
 = 0;

445 
ohci
->
öå
 = 
OHCI_INTR_MIE
;

447 
ohci
->
hcˇ
 = 0;

448 
ohci
->
˘æ_hód
 = ohci->
˘æ_cur
 = 0;

449 
ohci
->
bulk_hód
 = ohci->
bulk_cur
 = 0;

450 
ohci
->
≥r_cur
 = 0;

451 
ohci
->
d⁄e
 = 0;

452 
ohci
->
d⁄e_cou¡
 = 7;

457 
ohci
->
fsmps
 = 0x2778;

458 
ohci
->
fi
 = 0x2edf;

459 
ohci
->
fô
 = 0;

460 
ohci
->
‰t
 = 0;

461 
ohci
->
‰ame_numbî
 = 0;

462 
ohci
->
p°¨t
 = 0;

463 
ohci
->
l°
 = 
OHCI_LS_THRESH
;

465 
ohci
->
rhdesc_a
 = 
OHCI_RHA_NPS
 | ohci->
num_p‹ts
;

466 
ohci
->
rhdesc_b
 = 0x0;

467 
ohci
->
rh°©us
 = 0;

469 
i
 = 0; i < 
ohci
->
num_p‹ts
; i++)

471 
p‹t
 = &
ohci
->
rhp‹t
[
i
];

472 
p‹t
->
˘æ
 = 0;

473 i‡(
p‹t
->p‹t.
dev
 &&Ö‹t->p‹t.dev->
©èched
) {

474 
	`usb_p‹t_ª£t
(&
p‹t
->port);

477 i‡(
ohci
->
async_td
) {

478 
	`usb_ˇn˚l_∑ckë
(&
ohci
->
usb_∑ckë
);

479 
ohci
->
async_td
 = 0;

481 
	`DPRINTF
("usb-ohci: Re£à%s\n", 
ohci
->
«me
);

482 
	}
}

485 
ölöe
 
	$gë_dw‹ds
(
OHCISèã
 *
ohci
,

486 
dma_addr_t
 
addr
, 
uöt32_t
 *
buf
, 
num
)

488 
i
;

490 
addr
 +
ohci
->
loˇlmem_ba£
;

492 
i
 = 0; i < 
num
; i++, 
buf
++, 
addr
 += (*buf)) {

493 
	`dma_mem‹y_ªad
(
ohci
->
dma
, 
addr
, 
buf
, (*buf));

494 *
buf
 = 
	`À32_to_˝u
(*buf);

498 
	}
}

501 
ölöe
 
	$put_dw‹ds
(
OHCISèã
 *
ohci
,

502 
dma_addr_t
 
addr
, 
uöt32_t
 *
buf
, 
num
)

504 
i
;

506 
addr
 +
ohci
->
loˇlmem_ba£
;

508 
i
 = 0; i < 
num
; i++, 
buf
++, 
addr
 += (*buf)) {

509 
uöt32_t
 
tmp
 = 
	`˝u_to_À32
(*
buf
);

510 
	`dma_mem‹y_wrôe
(
ohci
->
dma
, 
addr
, &
tmp
, (tmp));

514 
	}
}

517 
ölöe
 
	$gë_w‹ds
(
OHCISèã
 *
ohci
,

518 
dma_addr_t
 
addr
, 
uöt16_t
 *
buf
, 
num
)

520 
i
;

522 
addr
 +
ohci
->
loˇlmem_ba£
;

524 
i
 = 0; i < 
num
; i++, 
buf
++, 
addr
 += (*buf)) {

525 
	`dma_mem‹y_ªad
(
ohci
->
dma
, 
addr
, 
buf
, (*buf));

526 *
buf
 = 
	`À16_to_˝u
(*buf);

530 
	}
}

533 
ölöe
 
	$put_w‹ds
(
OHCISèã
 *
ohci
,

534 
dma_addr_t
 
addr
, 
uöt16_t
 *
buf
, 
num
)

536 
i
;

538 
addr
 +
ohci
->
loˇlmem_ba£
;

540 
i
 = 0; i < 
num
; i++, 
buf
++, 
addr
 += (*buf)) {

541 
uöt16_t
 
tmp
 = 
	`˝u_to_À16
(*
buf
);

542 
	`dma_mem‹y_wrôe
(
ohci
->
dma
, 
addr
, &
tmp
, (tmp));

546 
	}
}

548 
ölöe
 
	$ohci_ªad_ed
(
OHCISèã
 *
ohci
,

549 
dma_addr_t
 
addr
, 
ohci_ed
 *
ed
)

551  
	`gë_dw‹ds
(
ohci
, 
addr
, (
uöt32_t
 *)
ed
, (*ed) >> 2);

552 
	}
}

554 
ölöe
 
	$ohci_ªad_td
(
OHCISèã
 *
ohci
,

555 
dma_addr_t
 
addr
, 
ohci_td
 *
td
)

557  
	`gë_dw‹ds
(
ohci
, 
addr
, (
uöt32_t
 *)
td
, (*td) >> 2);

558 
	}
}

560 
ölöe
 
	$ohci_ªad_iso_td
(
OHCISèã
 *
ohci
,

561 
dma_addr_t
 
addr
, 
ohci_iso_td
 *
td
)

563  (
	`gë_dw‹ds
(
ohci
, 
addr
, (
uöt32_t
 *)
td
, 4) &&

564 
	`gë_w‹ds
(
ohci
, 
addr
 + 16, 
td
->
off£t
, 8));

565 
	}
}

567 
ölöe
 
	$ohci_ªad_hcˇ
(
OHCISèã
 *
ohci
,

568 
dma_addr_t
 
addr
, 
ohci_hcˇ
 *
hcˇ
)

570 
	`dma_mem‹y_ªad
(
ohci
->
dma
, 
addr
 + ohci->
loˇlmem_ba£
, 
hcˇ
, (*hcca));

572 
	}
}

574 
ölöe
 
	$ohci_put_ed
(
OHCISèã
 *
ohci
,

575 
dma_addr_t
 
addr
, 
ohci_ed
 *
ed
)

581  
	`put_dw‹ds
(
ohci
, 
addr
 + 
ED_WBACK_OFFSET
,

582 (
uöt32_t
 *)((*)
ed
 + 
ED_WBACK_OFFSET
),

583 
ED_WBACK_SIZE
 >> 2);

584 
	}
}

586 
ölöe
 
	$ohci_put_td
(
OHCISèã
 *
ohci
,

587 
dma_addr_t
 
addr
, 
ohci_td
 *
td
)

589  
	`put_dw‹ds
(
ohci
, 
addr
, (
uöt32_t
 *)
td
, (*td) >> 2);

590 
	}
}

592 
ölöe
 
	$ohci_put_iso_td
(
OHCISèã
 *
ohci
,

593 
dma_addr_t
 
addr
, 
ohci_iso_td
 *
td
)

595  (
	`put_dw‹ds
(
ohci
, 
addr
, (
uöt32_t
 *)
td
, 4) &&

596 
	`put_w‹ds
(
ohci
, 
addr
 + 16, 
td
->
off£t
, 8));

597 
	}
}

599 
ölöe
 
	$ohci_put_hcˇ
(
OHCISèã
 *
ohci
,

600 
dma_addr_t
 
addr
, 
ohci_hcˇ
 *
hcˇ
)

602 
	`dma_mem‹y_wrôe
(
ohci
->
dma
,

603 
addr
 + 
ohci
->
loˇlmem_ba£
 + 
HCCA_WRITEBACK_OFFSET
,

604 (*)
hcˇ
 + 
HCCA_WRITEBACK_OFFSET
,

605 
HCCA_WRITEBACK_SIZE
);

607 
	}
}

610 
	$ohci_c›y_td
(
OHCISèã
 *
ohci
, 
ohci_td
 *
td
,

611 
uöt8_t
 *
buf
, 
Àn
, 
DMADúe˘i⁄
 
dú
)

613 
dma_addr_t
 
±r
, 
n
;

615 
±r
 = 
td
->
cbp
;

616 
n
 = 0x1000 - (
±r
 & 0xfff);

617 i‡(
n
 > 
Àn
)

618 
n
 = 
Àn
;

619 
	`dma_mem‹y_rw
(
ohci
->
dma
, 
±r
 + ohci->
loˇlmem_ba£
, 
buf
, 
n
, 
dú
);

620 i‡(
n
 =
Àn
)

622 
±r
 = 
td
->
be
 & ~0xfffu;

623 
buf
 +
n
;

624 
	`dma_mem‹y_rw
(
ohci
->
dma
, 
±r
 + ohci->
loˇlmem_ba£
, 
buf
, 
Àn
 - 
n
, 
dú
);

625 
	}
}

628 
	$ohci_c›y_iso_td
(
OHCISèã
 *
ohci
,

629 
uöt32_t
 
°¨t_addr
, uöt32_à
íd_addr
,

630 
uöt8_t
 *
buf
, 
Àn
, 
DMADúe˘i⁄
 
dú
)

632 
dma_addr_t
 
±r
, 
n
;

634 
±r
 = 
°¨t_addr
;

635 
n
 = 0x1000 - (
±r
 & 0xfff);

636 i‡(
n
 > 
Àn
)

637 
n
 = 
Àn
;

638 
	`dma_mem‹y_rw
(
ohci
->
dma
, 
±r
 + ohci->
loˇlmem_ba£
, 
buf
, 
n
, 
dú
);

639 i‡(
n
 =
Àn
)

641 
±r
 = 
íd_addr
 & ~0xfffu;

642 
buf
 +
n
;

643 
	`dma_mem‹y_rw
(
ohci
->
dma
, 
±r
 + ohci->
loˇlmem_ba£
, 
buf
, 
Àn
 - 
n
, 
dú
);

644 
	}
}

646 
ohci_¥o˚ss_li°s
(
OHCISèã
 *
ohci
, 
com∂ëi⁄
);

648 
	$ohci_async_com∂ëe_∑ckë
(
USBP‹t
 *
p‹t
, 
USBPackë
 *
∑ckë
)

650 
OHCISèã
 *
ohci
 = 
	`c⁄èöî_of
(
∑ckë
, OHCISèã, 
usb_∑ckë
);

651 #ifde‡
DEBUG_PACKET


652 
	`DPRINTF
("AsyncÖacket complete\n");

654 
ohci
->
async_com∂ëe
 = 1;

655 
	`ohci_¥o˚ss_li°s
(
ohci
, 1);

656 
	}
}

658 
	#USUB
(
a
, 
b
Ë((
öt16_t
)((
uöt16_t
)◊Ë- (uöt16_t)(b)))

	)

660 
	$ohci_£rvi˚_iso_td
(
OHCISèã
 *
ohci
, 
ohci_ed
 *
ed
,

661 
com∂ëi⁄
)

663 
dú
;

664 
size_t
 
Àn
 = 0;

665 #ifde‡
DEBUG_ISOCH


666 c⁄° *
°r
 = 
NULL
;

668 
pid
;

669 
ªt
;

670 
i
;

671 
USBDevi˚
 *
dev
;

672 
USBEndpoöt
 *
ï
;

673 
ohci_iso_td
 
iso_td
;

674 
uöt32_t
 
addr
;

675 
uöt16_t
 
°¨tög_‰ame
;

676 
öt16_t
 
ªœtive_‰ame_numbî
;

677 
‰ame_cou¡
;

678 
uöt32_t
 
°¨t_off£t
, 
√xt_off£t
, 
íd_off£t
 = 0;

679 
uöt32_t
 
°¨t_addr
, 
íd_addr
;

681 
addr
 = 
ed
->
hód
 & 
OHCI_DPTR_MASK
;

683 i‡(!
	`ohci_ªad_iso_td
(
ohci
, 
addr
, &
iso_td
)) {

684 
	`¥ötf
("usb-ohci: ISO_TDÑódÉº‹áà%x\n", 
addr
);

688 
°¨tög_‰ame
 = 
	`OHCI_BM
(
iso_td
.
Êags
, 
TD_SF
);

689 
‰ame_cou¡
 = 
	`OHCI_BM
(
iso_td
.
Êags
, 
TD_FC
);

690 
ªœtive_‰ame_numbî
 = 
	`USUB
(
ohci
->
‰ame_numbî
, 
°¨tög_‰ame
);

692 #ifde‡
DEBUG_ISOCH


693 
	`¥ötf
("--- ISO_TD ED head 0x%.8xÅailp 0x%.8x\n"

700 
ed
->
hód
 & 
OHCI_DPTR_MASK
,Éd->
èû
 & OHCI_DPTR_MASK,

701 
iso_td
.
Êags
, iso_td.
bp
, iso_td.
√xt
, iso_td.
be
,

702 
iso_td
.
off£t
[0], iso_td.offset[1], iso_td.offset[2], iso_td.offset[3],

703 
iso_td
.
off£t
[4], iso_td.offset[5], iso_td.offset[6], iso_td.offset[7],

704 
ohci
->
‰ame_numbî
, 
°¨tög_‰ame
,

705 
‰ame_cou¡
, 
ªœtive_‰ame_numbî
,

706 
	`OHCI_BM
(
iso_td
.
Êags
, 
TD_DI
), OHCI_BM(iso_td.Êags, 
TD_CC
));

709 i‡(
ªœtive_‰ame_numbî
 < 0) {

710 
	`DPRINTF
("usb-ohci: ISO_TD R=%d < 0\n", 
ªœtive_‰ame_numbî
);

712 } i‡(
ªœtive_‰ame_numbî
 > 
‰ame_cou¡
) {

715 
	`DPRINTF
("usb-ohci: ISO_TD R=%d > FC=%d\n", 
ªœtive_‰ame_numbî
,

716 
‰ame_cou¡
);

717 
	`OHCI_SET_BM
(
iso_td
.
Êags
, 
TD_CC
, 
OHCI_CC_DATAOVERRUN
);

718 
ed
->
hód
 &~
OHCI_DPTR_MASK
;

719 
ed
->
hód
 |(
iso_td
.
√xt
 & 
OHCI_DPTR_MASK
);

720 
iso_td
.
√xt
 = 
ohci
->
d⁄e
;

721 
ohci
->
d⁄e
 = 
addr
;

722 
i
 = 
	`OHCI_BM
(
iso_td
.
Êags
, 
TD_DI
);

723 i‡(
i
 < 
ohci
->
d⁄e_cou¡
)

724 
ohci
->
d⁄e_cou¡
 = 
i
;

725 
	`ohci_put_iso_td
(
ohci
, 
addr
, &
iso_td
);

729 
dú
 = 
	`OHCI_BM
(
ed
->
Êags
, 
ED_D
);

730 
dú
) {

731 
OHCI_TD_DIR_IN
:

732 #ifde‡
DEBUG_ISOCH


733 
°r
 = "in";

735 
pid
 = 
USB_TOKEN_IN
;

737 
OHCI_TD_DIR_OUT
:

738 #ifde‡
DEBUG_ISOCH


739 
°r
 = "out";

741 
pid
 = 
USB_TOKEN_OUT
;

743 
OHCI_TD_DIR_SETUP
:

744 #ifde‡
DEBUG_ISOCH


745 
°r
 = "setup";

747 
pid
 = 
USB_TOKEN_SETUP
;

750 
	`¥ötf
("usb-ohci: Bad dúe˘i⁄ %d\n", 
dú
);

754 i‡(!
iso_td
.
bp
 || !iso_td.
be
) {

755 
	`¥ötf
("usb-ohci: ISO_TD b∞0x%.8x bê0x%.8x\n", 
iso_td
.
bp
, iso_td.
be
);

759 
°¨t_off£t
 = 
iso_td
.
off£t
[
ªœtive_‰ame_numbî
];

760 
√xt_off£t
 = 
iso_td
.
off£t
[
ªœtive_‰ame_numbî
 + 1];

762 i‡(!(
	`OHCI_BM
(
°¨t_off£t
, 
TD_PSW_CC
) & 0xe) ||

763 ((
ªœtive_‰ame_numbî
 < 
‰ame_cou¡
) &&

764 !(
	`OHCI_BM
(
√xt_off£t
, 
TD_PSW_CC
) & 0xe))) {

765 
	`¥ötf
("usb-ohci: ISO_TD cc !=Çotáccessed 0x%.8x 0x%.8x\n",

766 
°¨t_off£t
, 
√xt_off£t
);

770 i‡((
ªœtive_‰ame_numbî
 < 
‰ame_cou¡
Ë&& (
°¨t_off£t
 > 
√xt_off£t
)) {

771 
	`¥ötf
("usb-ohci: ISO_TD start_offset=0x%.8x >Çext_offset=0x%.8x\n",

772 
°¨t_off£t
, 
√xt_off£t
);

776 i‡((
°¨t_off£t
 & 0x1000) == 0) {

777 
°¨t_addr
 = (
iso_td
.
bp
 & 
OHCI_PAGE_MASK
) |

778 (
°¨t_off£t
 & 
OHCI_OFFSET_MASK
);

780 
°¨t_addr
 = (
iso_td
.
be
 & 
OHCI_PAGE_MASK
) |

781 (
°¨t_off£t
 & 
OHCI_OFFSET_MASK
);

784 i‡(
ªœtive_‰ame_numbî
 < 
‰ame_cou¡
) {

785 
íd_off£t
 = 
√xt_off£t
 - 1;

786 i‡((
íd_off£t
 & 0x1000) == 0) {

787 
íd_addr
 = (
iso_td
.
bp
 & 
OHCI_PAGE_MASK
) |

788 (
íd_off£t
 & 
OHCI_OFFSET_MASK
);

790 
íd_addr
 = (
iso_td
.
be
 & 
OHCI_PAGE_MASK
) |

791 (
íd_off£t
 & 
OHCI_OFFSET_MASK
);

795 
íd_addr
 = 
iso_td
.
be
;

798 i‡((
°¨t_addr
 & 
OHCI_PAGE_MASK
Ë!(
íd_addr
 & OHCI_PAGE_MASK)) {

799 
Àn
 = (
íd_addr
 & 
OHCI_OFFSET_MASK
) + 0x1001

800 - (
°¨t_addr
 & 
OHCI_OFFSET_MASK
);

802 
Àn
 = 
íd_addr
 - 
°¨t_addr
 + 1;

805 i‡(
Àn
 && 
dú
 !
OHCI_TD_DIR_IN
) {

806 
	`ohci_c›y_iso_td
(
ohci
, 
°¨t_addr
, 
íd_addr
, ohci->
usb_buf
, 
Àn
,

807 
DMA_DIRECTION_TO_DEVICE
);

810 i‡(
com∂ëi⁄
) {

811 
ªt
 = 
ohci
->
usb_∑ckë
.
ªsu…
;

813 
dev
 = 
	`ohci_föd_devi˚
(
ohci
, 
	`OHCI_BM
(
ed
->
Êags
, 
ED_FA
));

814 
ï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
	`OHCI_BM
(
ed
->
Êags
, 
ED_EN
));

815 
	`usb_∑ckë_£tup
(&
ohci
->
usb_∑ckë
, 
pid
, 
ï
, 
addr
);

816 
	`usb_∑ckë_addbuf
(&
ohci
->
usb_∑ckë
, ohci->
usb_buf
, 
Àn
);

817 
ªt
 = 
	`usb_h™dÀ_∑ckë
(
dev
, &
ohci
->
usb_∑ckë
);

818 i‡(
ªt
 =
USB_RET_ASYNC
) {

823 #ifde‡
DEBUG_ISOCH


824 
	`¥ötf
("so 0x%.8xÉo 0x%.8x\nsa 0x%.8xÉa 0x%.8x\ndir %sÜen %zuÑet %d\n",

825 
°¨t_off£t
, 
íd_off£t
, 
°¨t_addr
, 
íd_addr
, 
°r
, 
Àn
, 
ªt
);

829 i‡(
dú
 =
OHCI_TD_DIR_IN
 && 
ªt
 >0 &&Ñë <
Àn
) {

831 
	`ohci_c›y_iso_td
(
ohci
, 
°¨t_addr
, 
íd_addr
, ohci->
usb_buf
, 
ªt
,

832 
DMA_DIRECTION_FROM_DEVICE
);

833 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_CC
,

834 
OHCI_CC_NOERROR
);

835 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_SIZE
, 
ªt
);

836 } i‡(
dú
 =
OHCI_TD_DIR_OUT
 && 
ªt
 =
Àn
) {

838 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_CC
,

839 
OHCI_CC_NOERROR
);

840 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_SIZE
, 0);

842 i‡(
ªt
 > (
ssize_t
Ë
Àn
) {

843 
	`¥ötf
("usb-ohci: D©aOvîru¿%d > %zu\n", 
ªt
, 
Àn
);

844 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_CC
,

845 
OHCI_CC_DATAOVERRUN
);

846 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_SIZE
,

847 
Àn
);

848 } i‡(
ªt
 >= 0) {

849 
	`¥ötf
("usb-ohci: D©aUndîru¿%d\n", 
ªt
);

850 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_CC
,

851 
OHCI_CC_DATAUNDERRUN
);

853 
ªt
) {

854 
USB_RET_IOERROR
:

855 
USB_RET_NODEV
:

856 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_CC
,

857 
OHCI_CC_DEVICENOTRESPONDING
);

858 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_SIZE
,

861 
USB_RET_NAK
:

862 
USB_RET_STALL
:

863 
	`¥ötf
("usb-ohci: gŸ NAK/STALL %d\n", 
ªt
);

864 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_CC
,

865 
OHCI_CC_STALL
);

866 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_SIZE
,

870 
	`¥ötf
("usb-ohci: Bad devi˚Ñe•⁄£ %d\n", 
ªt
);

871 
	`OHCI_SET_BM
(
iso_td
.
off£t
[
ªœtive_‰ame_numbî
], 
TD_PSW_CC
,

872 
OHCI_CC_UNDEXPETEDPID
);

878 i‡(
ªœtive_‰ame_numbî
 =
‰ame_cou¡
) {

880 
	`OHCI_SET_BM
(
iso_td
.
Êags
, 
TD_CC
, 
OHCI_CC_NOERROR
);

881 
ed
->
hód
 &~
OHCI_DPTR_MASK
;

882 
ed
->
hód
 |(
iso_td
.
√xt
 & 
OHCI_DPTR_MASK
);

883 
iso_td
.
√xt
 = 
ohci
->
d⁄e
;

884 
ohci
->
d⁄e
 = 
addr
;

885 
i
 = 
	`OHCI_BM
(
iso_td
.
Êags
, 
TD_DI
);

886 i‡(
i
 < 
ohci
->
d⁄e_cou¡
)

887 
ohci
->
d⁄e_cou¡
 = 
i
;

889 
	`ohci_put_iso_td
(
ohci
, 
addr
, &
iso_td
);

891 
	}
}

896 
	$ohci_£rvi˚_td
(
OHCISèã
 *
ohci
, 
ohci_ed
 *
ed
)

898 
dú
;

899 
size_t
 
Àn
 = 0, 
pkéí
 = 0;

900 #ifde‡
DEBUG_PACKET


901 c⁄° *
°r
 = 
NULL
;

903 
pid
;

904 
ªt
;

905 
i
;

906 
USBDevi˚
 *
dev
;

907 
USBEndpoöt
 *
ï
;

908 
ohci_td
 
td
;

909 
uöt32_t
 
addr
;

910 
Êag_r
;

911 
com∂ëi⁄
;

913 
addr
 = 
ed
->
hód
 & 
OHCI_DPTR_MASK
;

915 
com∂ëi⁄
 = (
addr
 =
ohci
->
async_td
);

916 i‡(
com∂ëi⁄
 && !
ohci
->
async_com∂ëe
) {

917 #ifde‡
DEBUG_PACKET


918 
	`DPRINTF
("Skippingásync TD\n");

922 i‡(!
	`ohci_ªad_td
(
ohci
, 
addr
, &
td
)) {

923 
	`Ârötf
(
°dîr
, "usb-ohci: TDÑódÉº‹áà%x\n", 
addr
);

927 
dú
 = 
	`OHCI_BM
(
ed
->
Êags
, 
ED_D
);

928 
dú
) {

929 
OHCI_TD_DIR_OUT
:

930 
OHCI_TD_DIR_IN
:

934 
dú
 = 
	`OHCI_BM
(
td
.
Êags
, 
TD_DP
);

938 
dú
) {

939 
OHCI_TD_DIR_IN
:

940 #ifde‡
DEBUG_PACKET


941 
°r
 = "in";

943 
pid
 = 
USB_TOKEN_IN
;

945 
OHCI_TD_DIR_OUT
:

946 #ifde‡
DEBUG_PACKET


947 
°r
 = "out";

949 
pid
 = 
USB_TOKEN_OUT
;

951 
OHCI_TD_DIR_SETUP
:

952 #ifde‡
DEBUG_PACKET


953 
°r
 = "setup";

955 
pid
 = 
USB_TOKEN_SETUP
;

958 
	`Ârötf
(
°dîr
, "usb-ohci: Bad direction\n");

961 i‡(
td
.
cbp
 &&Åd.
be
) {

962 i‡((
td
.
cbp
 & 0xfffff000Ë!—d.
be
 & 0xfffff000)) {

963 
Àn
 = (
td
.
be
 & 0xfffË+ 0x1001 - (td.
cbp
 & 0xfff);

965 
Àn
 = (
td
.
be
 -Åd.
cbp
) + 1;

968 
pkéí
 = 
Àn
;

969 i‡(
Àn
 && 
dú
 !
OHCI_TD_DIR_IN
) {

971 
pkéí
 = (
ed
->
Êags
 & 
OHCI_ED_MPS_MASK
Ë>> 
OHCI_ED_MPS_SHIFT
;

972 i‡(
pkéí
 > 
Àn
) {

973 
pkéí
 = 
Àn
;

975 i‡(!
com∂ëi⁄
) {

976 
	`ohci_c›y_td
(
ohci
, &
td
, ohci->
usb_buf
, 
pkéí
,

977 
DMA_DIRECTION_TO_DEVICE
);

982 
Êag_r
 = (
td
.
Êags
 & 
OHCI_TD_R
) != 0;

983 #ifde‡
DEBUG_PACKET


984 
	`DPRINTF
(" TD @ 0x%.8x %" 
PRId64
 " of %" PRId64

986 
addr
, (
öt64_t
)
pkéí
, (öt64_t)
Àn
, 
°r
, 
Êag_r
, 
td
.
cbp
,Åd.
be
);

988 i‡(
pkéí
 > 0 && 
dú
 !
OHCI_TD_DIR_IN
) {

989 
	`DPRINTF
(" data:");

990 
i
 = 0; i < 
pkéí
; i++) {

991 
	`¥ötf
(" %.2x", 
ohci
->
usb_buf
[
i
]);

993 
	`DPRINTF
("\n");

996 i‡(
com∂ëi⁄
) {

997 
ªt
 = 
ohci
->
usb_∑ckë
.
ªsu…
;

998 
ohci
->
async_td
 = 0;

999 
ohci
->
async_com∂ëe
 = 0;

1001 i‡(
ohci
->
async_td
) {

1007 #ifde‡
DEBUG_PACKET


1008 
	`DPRINTF
("Too manyÖendingÖackets\n");

1012 
dev
 = 
	`ohci_föd_devi˚
(
ohci
, 
	`OHCI_BM
(
ed
->
Êags
, 
ED_FA
));

1013 
ï
 = 
	`usb_ï_gë
(
dev
, 
pid
, 
	`OHCI_BM
(
ed
->
Êags
, 
ED_EN
));

1014 
	`usb_∑ckë_£tup
(&
ohci
->
usb_∑ckë
, 
pid
, 
ï
, 
addr
);

1015 
	`usb_∑ckë_addbuf
(&
ohci
->
usb_∑ckë
, ohci->
usb_buf
, 
pkéí
);

1016 
ªt
 = 
	`usb_h™dÀ_∑ckë
(
dev
, &
ohci
->
usb_∑ckë
);

1017 #ifde‡
DEBUG_PACKET


1018 
	`DPRINTF
("ªt=%d\n", 
ªt
);

1020 i‡(
ªt
 =
USB_RET_ASYNC
) {

1021 
ohci
->
async_td
 = 
addr
;

1025 i‡(
ªt
 >= 0) {

1026 i‡(
dú
 =
OHCI_TD_DIR_IN
) {

1027 
	`ohci_c›y_td
(
ohci
, &
td
, ohci->
usb_buf
, 
ªt
,

1028 
DMA_DIRECTION_FROM_DEVICE
);

1029 #ifde‡
DEBUG_PACKET


1030 
	`DPRINTF
(" data:");

1031 
i
 = 0; i < 
ªt
; i++)

1032 
	`¥ötf
(" %.2x", 
ohci
->
usb_buf
[
i
]);

1033 
	`DPRINTF
("\n");

1036 
ªt
 = 
pkéí
;

1041 i‡(
ªt
 =
pkéí
 || (
dú
 =
OHCI_TD_DIR_IN
 &&Ñë >0 && 
Êag_r
)) {

1043 i‡(
ªt
 =
Àn
) {

1044 
td
.
cbp
 = 0;

1046 i‡((
td
.
cbp
 & 0xfffË+ 
ªt
 > 0xfff) {

1047 
td
.
cbp
 = (td.
be
 & ~0xfffË+ (—d.cb∞+ 
ªt
) & 0xfff);

1049 
td
.
cbp
 +
ªt
;

1052 
td
.
Êags
 |
OHCI_TD_T1
;

1053 
td
.
Êags
 ^
OHCI_TD_T0
;

1054 
	`OHCI_SET_BM
(
td
.
Êags
, 
TD_CC
, 
OHCI_CC_NOERROR
);

1055 
	`OHCI_SET_BM
(
td
.
Êags
, 
TD_EC
, 0);

1057 i‡((
dú
 !
OHCI_TD_DIR_IN
Ë&& (
ªt
 !
Àn
)) {

1059 
exô_no_ªtúe
;

1063 
ed
->
hód
 &~
OHCI_ED_C
;

1064 i‡(
td
.
Êags
 & 
OHCI_TD_T0
)

1065 
ed
->
hód
 |
OHCI_ED_C
;

1067 i‡(
ªt
 >= 0) {

1068 
	`DPRINTF
("usb-ohci: Underrun\n");

1069 
	`OHCI_SET_BM
(
td
.
Êags
, 
TD_CC
, 
OHCI_CC_DATAUNDERRUN
);

1071 
ªt
) {

1072 
USB_RET_IOERROR
:

1073 
USB_RET_NODEV
:

1074 
	`OHCI_SET_BM
(
td
.
Êags
, 
TD_CC
, 
OHCI_CC_DEVICENOTRESPONDING
);

1075 
USB_RET_NAK
:

1076 
	`DPRINTF
("usb-ohci: got NAK\n");

1078 
USB_RET_STALL
:

1079 
	`DPRINTF
("usb-ohci: got STALL\n");

1080 
	`OHCI_SET_BM
(
td
.
Êags
, 
TD_CC
, 
OHCI_CC_STALL
);

1082 
USB_RET_BABBLE
:

1083 
	`DPRINTF
("usb-ohci: got BABBLE\n");

1084 
	`OHCI_SET_BM
(
td
.
Êags
, 
TD_CC
, 
OHCI_CC_DATAOVERRUN
);

1087 
	`Ârötf
(
°dîr
, "usb-ohci: Bad devi˚Ñe•⁄£ %d\n", 
ªt
);

1088 
	`OHCI_SET_BM
(
td
.
Êags
, 
TD_CC
, 
OHCI_CC_UNDEXPETEDPID
);

1089 
	`OHCI_SET_BM
(
td
.
Êags
, 
TD_EC
, 3);

1093 
ed
->
hód
 |
OHCI_ED_H
;

1097 
ed
->
hód
 &~
OHCI_DPTR_MASK
;

1098 
ed
->
hód
 |
td
.
√xt
 & 
OHCI_DPTR_MASK
;

1099 
td
.
√xt
 = 
ohci
->
d⁄e
;

1100 
ohci
->
d⁄e
 = 
addr
;

1101 
i
 = 
	`OHCI_BM
(
td
.
Êags
, 
TD_DI
);

1102 i‡(
i
 < 
ohci
->
d⁄e_cou¡
)

1103 
ohci
->
d⁄e_cou¡
 = 
i
;

1104 
exô_no_ªtúe
:

1105 
	`ohci_put_td
(
ohci
, 
addr
, &
td
);

1106  
	`OHCI_BM
(
td
.
Êags
, 
TD_CC
Ë!
OHCI_CC_NOERROR
;

1107 
	}
}

1110 
	$ohci_£rvi˚_ed_li°
(
OHCISèã
 *
ohci
, 
uöt32_t
 
hód
, 
com∂ëi⁄
)

1112 
ohci_ed
 
ed
;

1113 
uöt32_t
 
√xt_ed
;

1114 
uöt32_t
 
cur
;

1115 
a˘ive
;

1117 
a˘ive
 = 0;

1119 i‡(
hód
 == 0)

1122 
cur
 = 
hód
; cur; cu∏
√xt_ed
) {

1123 i‡(!
	`ohci_ªad_ed
(
ohci
, 
cur
, &
ed
)) {

1124 
	`Ârötf
(
°dîr
, "usb-ohci: EDÑódÉº‹áà%x\n", 
cur
);

1128 
√xt_ed
 = 
ed
.
√xt
 & 
OHCI_DPTR_MASK
;

1130 i‡((
ed
.
hód
 & 
OHCI_ED_H
Ë|| (ed.
Êags
 & 
OHCI_ED_K
)) {

1131 
uöt32_t
 
addr
;

1133 
addr
 = 
ed
.
hód
 & 
OHCI_DPTR_MASK
;

1134 i‡(
ohci
->
async_td
 && 
addr
 == ohci->async_td) {

1135 
	`usb_ˇn˚l_∑ckë
(&
ohci
->
usb_∑ckë
);

1136 
ohci
->
async_td
 = 0;

1141 (
ed
.
hód
 & 
OHCI_DPTR_MASK
Ë!ed.
èû
) {

1142 #ifde‡
DEBUG_PACKET


1143 
	`DPRINTF
("ED @ 0x%.8x fa=%uÉn=%u d=%u s=%u k=%u f=%u mps=%u "

1144 "h=%u c=%u\¿ hód=0x%.8xÅaûp=0x%.8xÇext=0x%.8x\n", 
cur
,

1145 
	`OHCI_BM
(
ed
.
Êags
, 
ED_FA
), OHCI_BM”d.Êags, 
ED_EN
),

1146 
	`OHCI_BM
(
ed
.
Êags
, 
ED_D
), (ed.Êag†& 
OHCI_ED_S
)!= 0,

1147 (
ed
.
Êags
 & 
OHCI_ED_K
Ë!0, (ed.Êag†& 
OHCI_ED_F
) != 0,

1148 
	`OHCI_BM
(
ed
.
Êags
, 
ED_MPS
), (ed.
hód
 & 
OHCI_ED_H
) != 0,

1149 (
ed
.
hód
 & 
OHCI_ED_C
Ë!0,Éd.hód & 
OHCI_DPTR_MASK
,

1150 
ed
.
èû
 & 
OHCI_DPTR_MASK
,Éd.
√xt
 & OHCI_DPTR_MASK);

1152 
a˘ive
 = 1;

1154 i‡((
ed
.
Êags
 & 
OHCI_ED_F
) == 0) {

1155 i‡(
	`ohci_£rvi˚_td
(
ohci
, &
ed
))

1159 i‡(
	`ohci_£rvi˚_iso_td
(
ohci
, &
ed
, 
com∂ëi⁄
))

1164 
	`ohci_put_ed
(
ohci
, 
cur
, &
ed
);

1167  
a˘ive
;

1168 
	}
}

1171 
	$ohci_sof
(
OHCISèã
 *
ohci
)

1173 
ohci
->
sof_time
 = 
	`qemu_gë_˛ock_ns
(
vm_˛ock
);

1174 
	`qemu_mod_timî
(
ohci
->
eof_timî
, ohci->
sof_time
 + 
usb_‰ame_time
);

1175 
	`ohci_£t_öãºu±
(
ohci
, 
OHCI_INTR_SF
);

1176 
	}
}

1179 
	$ohci_¥o˚ss_li°s
(
OHCISèã
 *
ohci
, 
com∂ëi⁄
)

1181 i‡((
ohci
->
˘l
 & 
OHCI_CTL_CLE
Ë&& (ohci->
°©us
 & 
OHCI_STATUS_CLF
)) {

1182 i‡(
ohci
->
˘æ_cur
 && ohci->˘æ_cu∏!ohci->
˘æ_hód
) {

1183 
	`DPRINTF
("usb-ohci: head %x, cur %x\n",

1184 
ohci
->
˘æ_hód
, ohci->
˘æ_cur
);

1186 i‡(!
	`ohci_£rvi˚_ed_li°
(
ohci
, ohci->
˘æ_hód
, 
com∂ëi⁄
)) {

1187 
ohci
->
˘æ_cur
 = 0;

1188 
ohci
->
°©us
 &~
OHCI_STATUS_CLF
;

1192 i‡((
ohci
->
˘l
 & 
OHCI_CTL_BLE
Ë&& (ohci->
°©us
 & 
OHCI_STATUS_BLF
)) {

1193 i‡(!
	`ohci_£rvi˚_ed_li°
(
ohci
, ohci->
bulk_hód
, 
com∂ëi⁄
)) {

1194 
ohci
->
bulk_cur
 = 0;

1195 
ohci
->
°©us
 &~
OHCI_STATUS_BLF
;

1198 
	}
}

1201 
	$ohci_‰ame_bound¨y
(*
›aque
)

1203 
OHCISèã
 *
ohci
 = 
›aque
;

1204 
ohci_hcˇ
 
hcˇ
;

1206 
	`ohci_ªad_hcˇ
(
ohci
, ohci->
hcˇ
, &hcca);

1209 i‡(
ohci
->
˘l
 & 
OHCI_CTL_PLE
) {

1210 
n
;

1212 
n
 = 
ohci
->
‰ame_numbî
 & 0x1f;

1213 
	`ohci_£rvi˚_ed_li°
(
ohci
, 
	`À32_to_˝u
(
hcˇ
.
öå
[
n
]), 0);

1217 i‡(
ohci
->
async_td
 &&

1218 
ohci
->
ﬁd_˘l
 & (~ohci->
˘l
Ë& (
OHCI_CTL_BLE
 | 
OHCI_CTL_CLE
)) {

1219 
	`usb_ˇn˚l_∑ckë
(&
ohci
->
usb_∑ckë
);

1220 
ohci
->
async_td
 = 0;

1222 
ohci
->
ﬁd_˘l
 = ohci->
˘l
;

1223 
	`ohci_¥o˚ss_li°s
(
ohci
, 0);

1226 
ohci
->
‰t
 = ohci->
fô
;

1229 
ohci
->
‰ame_numbî
 = (ohci->frame_number + 1) & 0xffff;

1230 
hcˇ
.
‰ame
 = 
	`˝u_to_À16
(
ohci
->
‰ame_numbî
);

1232 i‡(
ohci
->
d⁄e_cou¡
 =0 && !(ohci->
öå_°©us
 & 
OHCI_INTR_WD
)) {

1233 i‡(!
ohci
->
d⁄e
)

1234 
	`ab‹t
();

1235 i‡(
ohci
->
öå
 & ohci->
öå_°©us
)

1236 
ohci
->
d⁄e
 |= 1;

1237 
hcˇ
.
d⁄e
 = 
	`˝u_to_À32
(
ohci
->done);

1238 
ohci
->
d⁄e
 = 0;

1239 
ohci
->
d⁄e_cou¡
 = 7;

1240 
	`ohci_£t_öãºu±
(
ohci
, 
OHCI_INTR_WD
);

1243 i‡(
ohci
->
d⁄e_cou¡
 != 7 && ohci->done_count != 0)

1244 
ohci
->
d⁄e_cou¡
--;

1247 
	`ohci_sof
(
ohci
);

1250 
	`ohci_put_hcˇ
(
ohci
, ohci->
hcˇ
, &hcca);

1251 
	}
}

1256 
	$ohci_bus_°¨t
(
OHCISèã
 *
ohci
)

1258 
ohci
->
eof_timî
 = 
	`qemu_√w_timî_ns
(
vm_˛ock
,

1259 
ohci_‰ame_bound¨y
,

1260 
ohci
);

1262 i‡(
ohci
->
eof_timî
 =
NULL
) {

1263 
	`Ârötf
(
°dîr
, "usb-ohci: %s: qemu_√w_timî_n†Áûed\n", 
ohci
->
«me
);

1268 
	`DPRINTF
("usb-ohci: %s: USB O≥øti⁄Æ\n", 
ohci
->
«me
);

1270 
	`ohci_sof
(
ohci
);

1273 
	}
}

1276 
	$ohci_bus_°›
(
OHCISèã
 *
ohci
)

1278 i‡(
ohci
->
eof_timî
)

1279 
	`qemu_dñ_timî
(
ohci
->
eof_timî
);

1280 
ohci
->
eof_timî
 = 
NULL
;

1281 
	}
}

1287 
	$ohci_p‹t_£t_if_c⁄√˘ed
(
OHCISèã
 *
ohci
, 
i
, 
uöt32_t
 
vÆ
)

1289 
ªt
 = 1;

1292 i‡(
vÆ
 == 0)

1298 i‡(!(
ohci
->
rhp‹t
[
i
].
˘æ
 & 
OHCI_PORT_CCS
)) {

1299 
ohci
->
rhp‹t
[
i
].
˘æ
 |
OHCI_PORT_CSC
;

1300 i‡(
ohci
->
rh°©us
 & 
OHCI_RHS_DRWE
) {

1306 i‡(
ohci
->
rhp‹t
[
i
].
˘æ
 & 
vÆ
)

1307 
ªt
 = 0;

1310 
ohci
->
rhp‹t
[
i
].
˘æ
 |
vÆ
;

1312  
ªt
;

1313 
	}
}

1316 
	$ohci_£t_‰ame_öãrvÆ
(
OHCISèã
 *
ohci
, 
uöt16_t
 
vÆ
)

1318 
vÆ
 &
OHCI_FMI_FI
;

1320 i‡(
vÆ
 !
ohci
->
fi
) {

1321 
	`DPRINTF
("usb-ohci: %s: FrameInterval = 0x%x (%u)\n",

1322 
ohci
->
«me
, ohci->
fi
, ohci->fi);

1325 
ohci
->
fi
 = 
vÆ
;

1326 
	}
}

1328 
	$ohci_p‹t_powî
(
OHCISèã
 *
ohci
, 
i
, 
p
)

1330 i‡(
p
) {

1331 
ohci
->
rhp‹t
[
i
].
˘æ
 |
OHCI_PORT_PPS
;

1333 
ohci
->
rhp‹t
[
i
].
˘æ
 &~(
OHCI_PORT_PPS
|

1334 
OHCI_PORT_CCS
|

1335 
OHCI_PORT_PSS
|

1336 
OHCI_PORT_PRS
);

1338 
	}
}

1341 
	$ohci_£t_˘l
(
OHCISèã
 *
ohci
, 
uöt32_t
 
vÆ
)

1343 
uöt32_t
 
ﬁd_°©e
;

1344 
uöt32_t
 
√w_°©e
;

1346 
ﬁd_°©e
 = 
ohci
->
˘l
 & 
OHCI_CTL_HCFS
;

1347 
ohci
->
˘l
 = 
vÆ
;

1348 
√w_°©e
 = 
ohci
->
˘l
 & 
OHCI_CTL_HCFS
;

1351 i‡(
ﬁd_°©e
 =
√w_°©e
)

1354 
√w_°©e
) {

1355 
OHCI_USB_OPERATIONAL
:

1356 
	`ohci_bus_°¨t
(
ohci
);

1358 
OHCI_USB_SUSPEND
:

1359 
	`ohci_bus_°›
(
ohci
);

1360 
	`DPRINTF
("usb-ohci: %s: USB Su•íded\n", 
ohci
->
«me
);

1362 
OHCI_USB_RESUME
:

1363 
	`DPRINTF
("usb-ohci: %s: USB Resume\n", 
ohci
->
«me
);

1365 
OHCI_USB_RESET
:

1366 
	`ohci_ª£t
(
ohci
);

1367 
	`DPRINTF
("usb-ohci: %s: USB Re£t\n", 
ohci
->
«me
);

1370 
	}
}

1372 
uöt32_t
 
	$ohci_gë_‰ame_ªmaöög
(
OHCISèã
 *
ohci
)

1374 
uöt16_t
 
‰
;

1375 
öt64_t
 
tks
;

1377 i‡((
ohci
->
˘l
 & 
OHCI_CTL_HCFS
Ë!
OHCI_USB_OPERATIONAL
)

1378  (
ohci
->
‰t
 << 31);

1383 
tks
 = 
	`qemu_gë_˛ock_ns
(
vm_˛ock
Ë- 
ohci
->
sof_time
;

1386 i‡(
tks
 >
usb_‰ame_time
)

1387  (
ohci
->
‰t
 << 31);

1389 
tks
 = 
	`muldiv64
(1,Åks, 
usb_bô_time
);

1390 
‰
 = (
uöt16_t
)(
ohci
->
fi
 - 
tks
);

1392  (
ohci
->
‰t
 << 31Ë| 
‰
;

1393 
	}
}

1397 
	$ohci_£t_hub_°©us
(
OHCISèã
 *
ohci
, 
uöt32_t
 
vÆ
)

1399 
uöt32_t
 
ﬁd_°©e
;

1401 
ﬁd_°©e
 = 
ohci
->
rh°©us
;

1404 i‡(
vÆ
 & 
OHCI_RHS_OCIC
)

1405 
ohci
->
rh°©us
 &~
OHCI_RHS_OCIC
;

1407 i‡(
vÆ
 & 
OHCI_RHS_LPS
) {

1408 
i
;

1410 
i
 = 0; i < 
ohci
->
num_p‹ts
; i++)

1411 
	`ohci_p‹t_powî
(
ohci
, 
i
, 0);

1412 
	`DPRINTF
("usb-ohci:Öowered downállÖorts\n");

1415 i‡(
vÆ
 & 
OHCI_RHS_LPSC
) {

1416 
i
;

1418 
i
 = 0; i < 
ohci
->
num_p‹ts
; i++)

1419 
	`ohci_p‹t_powî
(
ohci
, 
i
, 1);

1420 
	`DPRINTF
("usb-ohci:Öowered upállÖorts\n");

1423 i‡(
vÆ
 & 
OHCI_RHS_DRWE
)

1424 
ohci
->
rh°©us
 |
OHCI_RHS_DRWE
;

1426 i‡(
vÆ
 & 
OHCI_RHS_CRWE
)

1427 
ohci
->
rh°©us
 &~
OHCI_RHS_DRWE
;

1429 i‡(
ﬁd_°©e
 !
ohci
->
rh°©us
)

1430 
	`ohci_£t_öãºu±
(
ohci
, 
OHCI_INTR_RHSC
);

1431 
	}
}

1434 
	$ohci_p‹t_£t_°©us
(
OHCISèã
 *
ohci
, 
p‹äum
, 
uöt32_t
 
vÆ
)

1436 
uöt32_t
 
ﬁd_°©e
;

1437 
OHCIP‹t
 *
p‹t
;

1439 
p‹t
 = &
ohci
->
rhp‹t
[
p‹äum
];

1440 
ﬁd_°©e
 = 
p‹t
->
˘æ
;

1443 i‡(
vÆ
 & 
OHCI_PORT_WTC
)

1444 
p‹t
->
˘æ
 &~(
vÆ
 & 
OHCI_PORT_WTC
);

1446 i‡(
vÆ
 & 
OHCI_PORT_CCS
)

1447 
p‹t
->
˘æ
 &~
OHCI_PORT_PES
;

1449 
	`ohci_p‹t_£t_if_c⁄√˘ed
(
ohci
, 
p‹äum
, 
vÆ
 & 
OHCI_PORT_PES
);

1451 i‡(
	`ohci_p‹t_£t_if_c⁄√˘ed
(
ohci
, 
p‹äum
, 
vÆ
 & 
OHCI_PORT_PSS
)) {

1452 
	`DPRINTF
("usb-ohci:Ö‹à%d: SUSPEND\n", 
p‹äum
);

1455 i‡(
	`ohci_p‹t_£t_if_c⁄√˘ed
(
ohci
, 
p‹äum
, 
vÆ
 & 
OHCI_PORT_PRS
)) {

1456 
	`DPRINTF
("usb-ohci:Ö‹à%d: RESET\n", 
p‹äum
);

1457 
	`usb_devi˚_ª£t
(
p‹t
->p‹t.
dev
);

1458 
p‹t
->
˘æ
 &~
OHCI_PORT_PRS
;

1460 
p‹t
->
˘æ
 |
OHCI_PORT_PES
 | 
OHCI_PORT_PRSC
;

1466 i‡(
vÆ
 & 
OHCI_PORT_LSDA
)

1467 
	`ohci_p‹t_powî
(
ohci
, 
p‹äum
, 0);

1468 i‡(
vÆ
 & 
OHCI_PORT_PPS
)

1469 
	`ohci_p‹t_powî
(
ohci
, 
p‹äum
, 1);

1471 i‡(
ﬁd_°©e
 !
p‹t
->
˘æ
)

1472 
	`ohci_£t_öãºu±
(
ohci
, 
OHCI_INTR_RHSC
);

1475 
	}
}

1477 
uöt64_t
 
	$ohci_mem_ªad
(*
›aque
,

1478 
èrgë_phys_addr_t
 
addr
,

1479 
size
)

1481 
OHCISèã
 *
ohci
 = 
›aque
;

1482 
uöt32_t
 
ªtvÆ
;

1485 i‡(
addr
 & 3) {

1486 
	`Ârötf
(
°dîr
, "usb-ohci: Mis-alignedÑead\n");

1488 } i‡(
addr
 >0x54 &&ádd∏< 0x54 + 
ohci
->
num_p‹ts
 * 4) {

1490 
ªtvÆ
 = 
ohci
->
rhp‹t
[(
addr
 - 0x54Ë>> 2].
˘æ
 | 
OHCI_PORT_PPS
;

1492 
addr
 >> 2) {

1494 
ªtvÆ
 = 0x10;

1498 
ªtvÆ
 = 
ohci
->
˘l
;

1502 
ªtvÆ
 = 
ohci
->
°©us
;

1506 
ªtvÆ
 = 
ohci
->
öå_°©us
;

1511 
ªtvÆ
 = 
ohci
->
öå
;

1515 
ªtvÆ
 = 
ohci
->
hcˇ
;

1519 
ªtvÆ
 = 
ohci
->
≥r_cur
;

1523 
ªtvÆ
 = 
ohci
->
˘æ_hód
;

1527 
ªtvÆ
 = 
ohci
->
˘æ_cur
;

1531 
ªtvÆ
 = 
ohci
->
bulk_hód
;

1535 
ªtvÆ
 = 
ohci
->
bulk_cur
;

1539 
ªtvÆ
 = 
ohci
->
d⁄e
;

1543 
ªtvÆ
 = (
ohci
->
fô
 << 31Ë| (ohci->
fsmps
 << 16Ë| (ohci->
fi
);

1547 
ªtvÆ
 = 
	`ohci_gë_‰ame_ªmaöög
(
ohci
);

1551 
ªtvÆ
 = 
ohci
->
‰ame_numbî
;

1555 
ªtvÆ
 = 
ohci
->
p°¨t
;

1559 
ªtvÆ
 = 
ohci
->
l°
;

1563 
ªtvÆ
 = 
ohci
->
rhdesc_a
;

1567 
ªtvÆ
 = 
ohci
->
rhdesc_b
;

1571 
ªtvÆ
 = 
ohci
->
rh°©us
;

1576 
ªtvÆ
 = 
ohci
->
h°©us
 & ohci->
hmask
;

1580 
ªtvÆ
 = 
ohci
->
hª£t
;

1584 
ªtvÆ
 = 
ohci
->
hmask
;

1588 
ªtvÆ
 = 
ohci
->
hã°
;

1592 
	`Ârötf
(
°dîr
, "ohci_ªad: Bad off£à%x\n", ()
addr
);

1593 
ªtvÆ
 = 0xffffffff;

1597  
ªtvÆ
;

1598 
	}
}

1600 
	$ohci_mem_wrôe
(*
›aque
,

1601 
èrgë_phys_addr_t
 
addr
,

1602 
uöt64_t
 
vÆ
,

1603 
size
)

1605 
OHCISèã
 *
ohci
 = 
›aque
;

1608 i‡(
addr
 & 3) {

1609 
	`Ârötf
(
°dîr
, "usb-ohci: Mis-aligned write\n");

1613 i‡(
addr
 >0x54 &&ádd∏< 0x54 + 
ohci
->
num_p‹ts
 * 4) {

1615 
	`ohci_p‹t_£t_°©us
(
ohci
, (
addr
 - 0x54Ë>> 2, 
vÆ
);

1619 
addr
 >> 2) {

1621 
	`ohci_£t_˘l
(
ohci
, 
vÆ
);

1626 
vÆ
 = (vÆ & ~
OHCI_STATUS_SOC
);

1629 
ohci
->
°©us
 |
vÆ
;

1631 i‡(
ohci
->
°©us
 & 
OHCI_STATUS_HCR
)

1632 
	`ohci_ª£t
(
ohci
);

1636 
ohci
->
öå_°©us
 &~
vÆ
;

1637 
	`ohci_öå_upd©e
(
ohci
);

1641 
ohci
->
öå
 |
vÆ
;

1642 
	`ohci_öå_upd©e
(
ohci
);

1646 
ohci
->
öå
 &~
vÆ
;

1647 
	`ohci_öå_upd©e
(
ohci
);

1651 
ohci
->
hcˇ
 = 
vÆ
 & 
OHCI_HCCA_MASK
;

1659 
ohci
->
˘æ_hód
 = 
vÆ
 & 
OHCI_EDPTR_MASK
;

1663 
ohci
->
˘æ_cur
 = 
vÆ
 & 
OHCI_EDPTR_MASK
;

1667 
ohci
->
bulk_hód
 = 
vÆ
 & 
OHCI_EDPTR_MASK
;

1671 
ohci
->
bulk_cur
 = 
vÆ
 & 
OHCI_EDPTR_MASK
;

1675 
ohci
->
fsmps
 = (
vÆ
 & 
OHCI_FMI_FSMPS
) >> 16;

1676 
ohci
->
fô
 = (
vÆ
 & 
OHCI_FMI_FIT
) >> 31;

1677 
	`ohci_£t_‰ame_öãrvÆ
(
ohci
, 
vÆ
);

1684 
ohci
->
p°¨t
 = 
vÆ
 & 0xffff;

1688 
ohci
->
l°
 = 
vÆ
 & 0xffff;

1692 
ohci
->
rhdesc_a
 &~
OHCI_RHA_RW_MASK
;

1693 
ohci
->
rhdesc_a
 |
vÆ
 & 
OHCI_RHA_RW_MASK
;

1700 
	`ohci_£t_hub_°©us
(
ohci
, 
vÆ
);

1705 
ohci
->
h°©us
 &~(
vÆ
 & ohci->
hmask
);

1708 
ohci
->
hª£t
 = 
vÆ
 & ~
OHCI_HRESET_FSBIR
;

1709 i‡(
vÆ
 & 
OHCI_HRESET_FSBIR
)

1710 
	`ohci_ª£t
(
ohci
);

1714 
ohci
->
hmask
 = 
vÆ
;

1718 
ohci
->
hã°
 = 
vÆ
;

1722 
	`Ârötf
(
°dîr
, "ohci_wrôe: Bad off£à%x\n", ()
addr
);

1725 
	}
}

1727 
	$ohci_async_ˇn˚l_devi˚
(
OHCISèã
 *
ohci
, 
USBDevi˚
 *
dev
)

1729 i‡(
ohci
->
async_td
 &&

1730 
	`usb_∑ckë_is_öÊight
(&
ohci
->
usb_∑ckë
) &&

1731 
ohci
->
usb_∑ckë
.
ï
->
dev
 == dev) {

1732 
	`usb_ˇn˚l_∑ckë
(&
ohci
->
usb_∑ckë
);

1733 
ohci
->
async_td
 = 0;

1735 
	}
}

1737 c⁄° 
Mem‹yRegi⁄Ops
 
	gohci_mem_›s
 = {

1738 .
ªad
 = 
ohci_mem_ªad
,

1739 .
	gwrôe
 = 
ohci_mem_wrôe
,

1740 .
	gídü¬ess
 = 
DEVICE_LITTLE_ENDIAN
,

1743 
USBP‹tOps
 
	gohci_p‹t_›s
 = {

1744 .
©èch
 = 
ohci_©èch
,

1745 .
	gdëach
 = 
ohci_dëach
,

1746 .
	gchûd_dëach
 = 
ohci_chûd_dëach
,

1747 .
	gwakeup
 = 
ohci_wakeup
,

1748 .
	gcom∂ëe
 = 
ohci_async_com∂ëe_∑ckë
,

1751 
USBBusOps
 
	gohci_bus_›s
 = {

1754 
	$usb_ohci_öô
(
OHCISèã
 *
ohci
, 
Devi˚Sèã
 *
dev
,

1755 
num_p‹ts
, 
dma_addr_t
 
loˇlmem_ba£
,

1756 *
ma°îbus
, 
uöt32_t
 
fú°p‹t
,

1757 
DMAC⁄ãxt
 *
dma
)

1759 
i
;

1761 
ohci
->
dma
 = dma;

1763 i‡(
usb_‰ame_time
 == 0) {

1764 #ifde‡
OHCI_TIME_WARP


1765 
usb_‰ame_time
 = 
	`gë_ticks_≥r_£c
();

1766 
usb_bô_time
 = 
	`muldiv64
(1, 
	`gë_ticks_≥r_£c
(), 
USB_HZ
/1000);

1768 
usb_‰ame_time
 = 
	`muldiv64
(1, 
	`gë_ticks_≥r_£c
(), 1000);

1769 i‡(
	`gë_ticks_≥r_£c
(Ë>
USB_HZ
) {

1770 
usb_bô_time
 = 
	`muldiv64
(1, 
	`gë_ticks_≥r_£c
(), 
USB_HZ
);

1772 
usb_bô_time
 = 1;

1775 
	`DPRINTF
("usb-ohci: usb_bô_time=%" 
PRId64
 " usb_frame_time=%" PRId64 "\n",

1776 
usb_‰ame_time
, 
usb_bô_time
);

1779 
ohci
->
num_p‹ts
 =Çum_ports;

1780 i‡(
ma°îbus
) {

1781 
USBP‹t
 *
p‹ts
[
OHCI_MAX_PORTS
];

1782 
i
 = 0; i < 
num_p‹ts
; i++) {

1783 
p‹ts
[
i
] = &
ohci
->
rhp‹t
[i].
p‹t
;

1785 i‡(
	`usb_ªgi°î_com∑ni⁄
(
ma°îbus
, 
p‹ts
, 
num_p‹ts
,

1786 
fú°p‹t
, 
ohci
, &
ohci_p‹t_›s
,

1787 
USB_SPEED_MASK_LOW
 | 
USB_SPEED_MASK_FULL
) != 0) {

1791 
	`usb_bus_√w
(&
ohci
->
bus
, &
ohci_bus_›s
, 
dev
);

1792 
i
 = 0; i < 
num_p‹ts
; i++) {

1793 
	`usb_ªgi°î_p‹t
(&
ohci
->
bus
, &ohci->
rhp‹t
[
i
].
p‹t
,

1794 
ohci
, 
i
, &
ohci_p‹t_›s
,

1795 
USB_SPEED_MASK_LOW
 | 
USB_SPEED_MASK_FULL
);

1799 
	`mem‹y_ªgi⁄_öô_io
(&
ohci
->
mem
, &
ohci_mem_›s
, ohci, "ohci", 256);

1800 
ohci
->
loˇlmem_ba£
 =Üocalmem_base;

1802 
ohci
->
«me
 = 
	`obje˘_gë_ty≥«me
(
	`OBJECT
(
dev
));

1803 
	`usb_∑ckë_öô
(&
ohci
->
usb_∑ckë
);

1805 
ohci
->
async_td
 = 0;

1806 
	`qemu_ªgi°î_ª£t
(
ohci_ª£t
, 
ohci
);

1809 
	}
}

1812 
PCIDevi˚
 
	mpci_dev
;

1813 
OHCISèã
 
	m°©e
;

1814 *
	mma°îbus
;

1815 
uöt32_t
 
	mnum_p‹ts
;

1816 
uöt32_t
 
	mfú°p‹t
;

1817 } 
	tOHCIPCISèã
;

1819 
	$usb_ohci_öô‚_pci
(
PCIDevi˚
 *
dev
)

1821 
OHCIPCISèã
 *
ohci
 = 
	`DO_UPCAST
(OHCIPCISèã, 
pci_dev
, 
dev
);

1823 
ohci
->
pci_dev
.
c⁄fig
[
PCI_CLASS_PROG
] = 0x10;

1824 
ohci
->
pci_dev
.
c⁄fig
[
PCI_INTERRUPT_PIN
] = 0x01;

1826 i‡(
	`usb_ohci_öô
(&
ohci
->
°©e
, &
dev
->
qdev
, ohci->
num_p‹ts
, 0,

1827 
ohci
->
ma°îbus
, ohci->
fú°p‹t
,

1828 
	`pci_dma_c⁄ãxt
(
dev
)) != 0) {

1831 
ohci
->
°©e
.
úq
 = ohci->
pci_dev
.irq[0];

1834 
	`pci_ªgi°î_b¨
(&
ohci
->
pci_dev
, 0, 0, &ohci->
°©e
.
mem
);

1836 
	}
}

1839 
SysBusDevi˚
 
	mbusdev
;

1840 
OHCISèã
 
	mohci
;

1841 
uöt32_t
 
	mnum_p‹ts
;

1842 
dma_addr_t
 
	mdma_off£t
;

1843 } 
	tOHCISysBusSèã
;

1845 
	$ohci_öô_pxa
(
SysBusDevi˚
 *
dev
)

1847 
OHCISysBusSèã
 *
s
 = 
	`FROM_SYSBUS
(OHCISysBusSèã, 
dev
);

1850 
	`usb_ohci_öô
(&
s
->
ohci
, &
dev
->
qdev
, s->
num_p‹ts
, s->
dma_off£t
, 
NULL
, 0,

1851 
NULL
);

1852 
	`sysbus_öô_úq
(
dev
, &
s
->
ohci
.
úq
);

1853 
	`sysbus_öô_mmio
(
dev
, &
s
->
ohci
.
mem
);

1856 
	}
}

1858 
Pr›îty
 
	gohci_pci_¥›îtõs
[] = {

1859 
DEFINE_PROP_STRING
("ma°îbus", 
OHCIPCISèã
, 
ma°îbus
),

1860 
DEFINE_PROP_UINT32
("num-p‹ts", 
OHCIPCISèã
, 
num_p‹ts
, 3),

1861 
DEFINE_PROP_UINT32
("fú°p‹t", 
OHCIPCISèã
, 
fú°p‹t
, 0),

1862 
DEFINE_PROP_END_OF_LIST
(),

1865 
	$ohci_pci_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1867 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1868 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

1870 
k
->
öô
 = 
usb_ohci_öô‚_pci
;

1871 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_APPLE
;

1872 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_APPLE_IPID_USB
;

1873 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

1874 
dc
->
desc
 = "Apple USB Controller";

1875 
dc
->
¥›s
 = 
ohci_pci_¥›îtõs
;

1876 
	}
}

1878 
Ty≥Info
 
	gohci_pci_öfo
 = {

1879 .
«me
 = "pci-ohci",

1880 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

1881 .
	gö°™˚_size
 = (
OHCIPCISèã
),

1882 .
	g˛ass_öô
 = 
ohci_pci_˛ass_öô
,

1885 
Pr›îty
 
	gohci_sysbus_¥›îtõs
[] = {

1886 
DEFINE_PROP_UINT32
("num-p‹ts", 
OHCISysBusSèã
, 
num_p‹ts
, 3),

1887 
DEFINE_PROP_DMAADDR
("dma-off£t", 
OHCISysBusSèã
, 
dma_off£t
, 3),

1888 
DEFINE_PROP_END_OF_LIST
(),

1891 
	$ohci_sysbus_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1893 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1894 
SysBusDevi˚Cœss
 *
sbc
 = 
	`SYS_BUS_DEVICE_CLASS
(
kœss
);

1896 
sbc
->
öô
 = 
ohci_öô_pxa
;

1897 
dc
->
desc
 = "OHCI USB Controller";

1898 
dc
->
¥›s
 = 
ohci_sysbus_¥›îtõs
;

1899 
	}
}

1901 
Ty≥Info
 
	gohci_sysbus_öfo
 = {

1902 .
«me
 = "sysbus-ohci",

1903 .
	g∑ª¡
 = 
TYPE_SYS_BUS_DEVICE
,

1904 .
	gö°™˚_size
 = (
OHCISysBusSèã
),

1905 .
	g˛ass_öô
 = 
ohci_sysbus_˛ass_öô
,

1908 
	$ohci_ªgi°î_ty≥s
()

1910 
	`ty≥_ªgi°î_°©ic
(&
ohci_pci_öfo
);

1911 
	`ty≥_ªgi°î_°©ic
(&
ohci_sysbus_öfo
);

1912 
	}
}

1914 
ty≥_öô
(
ohci_ªgi°î_ty≥s
)

	@hcd-uhci.c

28 
	~"hw/hw.h
"

29 
	~"hw/usb.h
"

30 
	~"hw/pci.h
"

31 
	~"qemu-timî.h
"

32 
	~"iov.h
"

33 
	~"dma.h
"

34 
	~"åa˚.h
"

39 
	#UHCI_CMD_FGR
 (1 << 4)

	)

40 
	#UHCI_CMD_EGSM
 (1 << 3)

	)

41 
	#UHCI_CMD_GRESET
 (1 << 2)

	)

42 
	#UHCI_CMD_HCRESET
 (1 << 1)

	)

43 
	#UHCI_CMD_RS
 (1 << 0)

	)

45 
	#UHCI_STS_HCHALTED
 (1 << 5)

	)

46 
	#UHCI_STS_HCPERR
 (1 << 4)

	)

47 
	#UHCI_STS_HSERR
 (1 << 3)

	)

48 
	#UHCI_STS_RD
 (1 << 2)

	)

49 
	#UHCI_STS_USBERR
 (1 << 1)

	)

50 
	#UHCI_STS_USBINT
 (1 << 0)

	)

52 
	#TD_CTRL_SPD
 (1 << 29)

	)

53 
	#TD_CTRL_ERROR_SHIFT
 27

	)

54 
	#TD_CTRL_IOS
 (1 << 25)

	)

55 
	#TD_CTRL_IOC
 (1 << 24)

	)

56 
	#TD_CTRL_ACTIVE
 (1 << 23)

	)

57 
	#TD_CTRL_STALL
 (1 << 22)

	)

58 
	#TD_CTRL_BABBLE
 (1 << 20)

	)

59 
	#TD_CTRL_NAK
 (1 << 19)

	)

60 
	#TD_CTRL_TIMEOUT
 (1 << 18)

	)

62 
	#UHCI_PORT_SUSPEND
 (1 << 12)

	)

63 
	#UHCI_PORT_RESET
 (1 << 9)

	)

64 
	#UHCI_PORT_LSDA
 (1 << 8)

	)

65 
	#UHCI_PORT_RD
 (1 << 6)

	)

66 
	#UHCI_PORT_ENC
 (1 << 3)

	)

67 
	#UHCI_PORT_EN
 (1 << 2)

	)

68 
	#UHCI_PORT_CSC
 (1 << 1)

	)

69 
	#UHCI_PORT_CCS
 (1 << 0)

	)

71 
	#UHCI_PORT_READ_ONLY
 (0x1bb)

	)

72 
	#UHCI_PORT_WRITE_CLEAR
 (
UHCI_PORT_CSC
 | 
UHCI_PORT_ENC
)

	)

74 
	#FRAME_TIMER_FREQ
 1000

	)

76 
	#FRAME_MAX_LOOPS
 256

	)

78 
	#NB_PORTS
 2

	)

81 
	mTD_RESULT_STOP_FRAME
 = 10,

82 
	mTD_RESULT_COMPLETE
,

83 
	mTD_RESULT_NEXT_QH
,

84 
	mTD_RESULT_ASYNC_START
,

85 
	mTD_RESULT_ASYNC_CONT
,

88 
UHCISèã
 
	tUHCISèã
;

89 
UHCIAsync
 
	tUHCIAsync
;

90 
UHCIQueue
 
	tUHCIQueue
;

98 
	sUHCIAsync
 {

99 
USBPackë
 
	m∑ckë
;

100 
QEMUSGLi°
 
	msgl
;

101 
UHCIQueue
 *
	mqueue
;

102 
QTAILQ_ENTRY
(
UHCIAsync
Ë
	m√xt
;

103 
uöt32_t
 
	mtd
;

104 
uöt8_t
 
	misoc
;

105 
uöt8_t
 
	md⁄e
;

108 
	sUHCIQueue
 {

109 
uöt32_t
 
	mtokí
;

110 
UHCISèã
 *
	muhci
;

111 
QTAILQ_ENTRY
(
UHCIQueue
Ë
	m√xt
;

112 
QTAILQ_HEAD
(, 
UHCIAsync
Ë
	masyncs
;

113 
öt8_t
 
	mvÆid
;

116 
	sUHCIP‹t
 {

117 
USBP‹t
 
	mp‹t
;

118 
uöt16_t
 
	m˘æ
;

119 } 
	tUHCIP‹t
;

121 
	sUHCISèã
 {

122 
PCIDevi˚
 
	mdev
;

123 
Mem‹yRegi⁄
 
	mio_b¨
;

124 
USBBus
 
	mbus
;

125 
uöt16_t
 
	mcmd
;

126 
uöt16_t
 
	m°©us
;

127 
uöt16_t
 
	möå
;

128 
uöt16_t
 
	m‰num
;

129 
uöt32_t
 
	mÊ_ba£_addr
;

130 
uöt8_t
 
	msof_timög
;

131 
uöt8_t
 
	m°©us2
;

132 
öt64_t
 
	mexpúe_time
;

133 
QEMUTimî
 *
	m‰ame_timî
;

134 
QEMUBH
 *
	mbh
;

135 
uöt32_t
 
	m‰ame_byãs
;

136 
uöt32_t
 
	m‰ame_b™dwidth
;

137 
UHCIP‹t
 
	mp‹ts
[
NB_PORTS
];

140 
uöt32_t
 
	m≥ndög_öt_mask
;

141 
	múq_pö
;

144 
QTAILQ_HEAD
(, 
UHCIQueue
Ë
	mqueues
;

145 
uöt8_t
 
	mnum_p‹ts_vm°©e
;

148 *
	mma°îbus
;

149 
uöt32_t
 
	mfú°p‹t
;

152 
	sUHCI_TD
 {

153 
uöt32_t
 
	mlök
;

154 
uöt32_t
 
	m˘æ
;

155 
uöt32_t
 
	mtokí
;

156 
uöt32_t
 
	mbuf„r
;

157 } 
	tUHCI_TD
;

159 
	sUHCI_QH
 {

160 
uöt32_t
 
	mlök
;

161 
uöt32_t
 
	mñ_lök
;

162 } 
	tUHCI_QH
;

164 
ölöe
 
öt32_t
 
	$uhci_queue_tokí
(
UHCI_TD
 *
td
)

167  
td
->
tokí
 & 0x7ffff;

168 
	}
}

170 
UHCIQueue
 *
	$uhci_queue_gë
(
UHCISèã
 *
s
, 
UHCI_TD
 *
td
)

172 
uöt32_t
 
tokí
 = 
	`uhci_queue_tokí
(
td
);

173 
UHCIQueue
 *
queue
;

175 
	`QTAILQ_FOREACH
(
queue
, &
s
->
queues
, 
√xt
) {

176 i‡(
queue
->
tokí
 ==Åoken) {

177  
queue
;

181 
queue
 = 
	`g_√w0
(
UHCIQueue
, 1);

182 
queue
->
uhci
 = 
s
;

183 
queue
->
tokí
 =Åoken;

184 
	`QTAILQ_INIT
(&
queue
->
asyncs
);

185 
	`QTAILQ_INSERT_HEAD
(&
s
->
queues
, 
queue
, 
√xt
);

186 
	`åa˚_usb_uhci_queue_add
(
queue
->
tokí
);

187  
queue
;

188 
	}
}

190 
	$uhci_queue_‰ì
(
UHCIQueue
 *
queue
)

192 
UHCISèã
 *
s
 = 
queue
->
uhci
;

194 
	`åa˚_usb_uhci_queue_dñ
(
queue
->
tokí
);

195 
	`QTAILQ_REMOVE
(&
s
->
queues
, 
queue
, 
√xt
);

196 
	`g_‰ì
(
queue
);

197 
	}
}

199 
UHCIAsync
 *
	$uhci_async_Æloc
(
UHCIQueue
 *
queue
, 
uöt32_t
 
addr
)

201 
UHCIAsync
 *
async
 = 
	`g_√w0
(UHCIAsync, 1);

203 
async
->
queue
 = queue;

204 
async
->
td
 = 
addr
;

205 
	`usb_∑ckë_öô
(&
async
->
∑ckë
);

206 
	`pci_dma_sgli°_öô
(&
async
->
sgl
, &
queue
->
uhci
->
dev
, 1);

207 
	`åa˚_usb_uhci_∑ckë_add
(
async
->
queue
->
tokí
,ásync->
td
);

209  
async
;

210 
	}
}

212 
	$uhci_async_‰ì
(
UHCIAsync
 *
async
)

214 
	`åa˚_usb_uhci_∑ckë_dñ
(
async
->
queue
->
tokí
,ásync->
td
);

215 
	`usb_∑ckë_˛ónup
(&
async
->
∑ckë
);

216 
	`qemu_sgli°_de°roy
(&
async
->
sgl
);

217 
	`g_‰ì
(
async
);

218 
	}
}

220 
	$uhci_async_lök
(
UHCIAsync
 *
async
)

222 
UHCIQueue
 *
queue
 = 
async
->queue;

223 
	`QTAILQ_INSERT_TAIL
(&
queue
->
asyncs
, 
async
, 
√xt
);

224 
	`åa˚_usb_uhci_∑ckë_lök_async
(
async
->
queue
->
tokí
,ásync->
td
);

225 
	}
}

227 
	$uhci_async_u∆ök
(
UHCIAsync
 *
async
)

229 
UHCIQueue
 *
queue
 = 
async
->queue;

230 
	`QTAILQ_REMOVE
(&
queue
->
asyncs
, 
async
, 
√xt
);

231 
	`åa˚_usb_uhci_∑ckë_u∆ök_async
(
async
->
queue
->
tokí
,ásync->
td
);

232 
	}
}

234 
	$uhci_async_ˇn˚l
(
UHCIAsync
 *
async
)

236 
	`åa˚_usb_uhci_∑ckë_ˇn˚l
(
async
->
queue
->
tokí
,ásync->
td
,ásync->
d⁄e
);

237 i‡(!
async
->
d⁄e
)

238 
	`usb_ˇn˚l_∑ckë
(&
async
->
∑ckë
);

239 
	`uhci_async_‰ì
(
async
);

240 
	}
}

246 
	$uhci_async_vÆid©e_begö
(
UHCISèã
 *
s
)

248 
UHCIQueue
 *
queue
;

250 
	`QTAILQ_FOREACH
(
queue
, &
s
->
queues
, 
√xt
) {

251 
queue
->
vÆid
--;

253 
	}
}

258 
	$uhci_async_vÆid©e_íd
(
UHCISèã
 *
s
)

260 
UHCIQueue
 *
queue
, *
n
;

261 
UHCIAsync
 *
async
;

263 
	`QTAILQ_FOREACH_SAFE
(
queue
, &
s
->
queues
, 
√xt
, 
n
) {

264 i‡(
queue
->
vÆid
 > 0) {

267 !
	`QTAILQ_EMPTY
(&
queue
->
asyncs
)) {

268 
async
 = 
	`QTAILQ_FIRST
(&
queue
->
asyncs
);

269 
	`uhci_async_u∆ök
(
async
);

270 
	`uhci_async_ˇn˚l
(
async
);

272 
	`uhci_queue_‰ì
(
queue
);

274 
	}
}

276 
	$uhci_async_ˇn˚l_devi˚
(
UHCISèã
 *
s
, 
USBDevi˚
 *
dev
)

278 
UHCIQueue
 *
queue
;

279 
UHCIAsync
 *
cuº
, *
n
;

281 
	`QTAILQ_FOREACH
(
queue
, &
s
->
queues
, 
√xt
) {

282 
	`QTAILQ_FOREACH_SAFE
(
cuº
, &
queue
->
asyncs
, 
√xt
, 
n
) {

283 i‡(!
	`usb_∑ckë_is_öÊight
(&
cuº
->
∑ckë
) ||

284 
cuº
->
∑ckë
.
ï
->
dev
 != dev) {

287 
	`uhci_async_u∆ök
(
cuº
);

288 
	`uhci_async_ˇn˚l
(
cuº
);

291 
	}
}

293 
	$uhci_async_ˇn˚l_Æl
(
UHCISèã
 *
s
)

295 
UHCIQueue
 *
queue
, *
nq
;

296 
UHCIAsync
 *
cuº
, *
n
;

298 
	`QTAILQ_FOREACH_SAFE
(
queue
, &
s
->
queues
, 
√xt
, 
nq
) {

299 
	`QTAILQ_FOREACH_SAFE
(
cuº
, &
queue
->
asyncs
, 
√xt
, 
n
) {

300 
	`uhci_async_u∆ök
(
cuº
);

301 
	`uhci_async_ˇn˚l
(
cuº
);

303 
	`uhci_queue_‰ì
(
queue
);

305 
	}
}

307 
UHCIAsync
 *
	$uhci_async_föd_td
(
UHCISèã
 *
s
, 
uöt32_t
 
addr
, 
UHCI_TD
 *
td
)

309 
uöt32_t
 
tokí
 = 
	`uhci_queue_tokí
(
td
);

310 
UHCIQueue
 *
queue
;

311 
UHCIAsync
 *
async
;

313 
	`QTAILQ_FOREACH
(
queue
, &
s
->
queues
, 
√xt
) {

314 i‡(
queue
->
tokí
 ==Åoken) {

318 i‡(
queue
 =
NULL
) {

319  
NULL
;

322 
	`QTAILQ_FOREACH
(
async
, &
queue
->
asyncs
, 
√xt
) {

323 i‡(
async
->
td
 =
addr
) {

324  
async
;

328  
NULL
;

329 
	}
}

331 
	$uhci_upd©e_úq
(
UHCISèã
 *
s
)

333 
Àvñ
;

334 i‡(((
s
->
°©us2
 & 1Ë&& (s->
öå
 & (1 << 2))) ||

335 ((
s
->
°©us2
 & 2Ë&& (s->
öå
 & (1 << 3))) ||

336 ((
s
->
°©us
 & 
UHCI_STS_USBERR
Ë&& (s->
öå
 & (1 << 0))) ||

337 ((
s
->
°©us
 & 
UHCI_STS_RD
Ë&& (s->
öå
 & (1 << 1))) ||

338 (
s
->
°©us
 & 
UHCI_STS_HSERR
) ||

339 (
s
->
°©us
 & 
UHCI_STS_HCPERR
)) {

340 
Àvñ
 = 1;

342 
Àvñ
 = 0;

344 
	`qemu_£t_úq
(
s
->
dev
.
úq
[s->
úq_pö
], 
Àvñ
);

345 
	}
}

347 
	$uhci_ª£t
(*
›aque
)

349 
UHCISèã
 *
s
 = 
›aque
;

350 
uöt8_t
 *
pci_c⁄f
;

351 
i
;

352 
UHCIP‹t
 *
p‹t
;

354 
	`åa˚_usb_uhci_ª£t
();

356 
pci_c⁄f
 = 
s
->
dev
.
c⁄fig
;

358 
pci_c⁄f
[0x6a] = 0x01;

359 
pci_c⁄f
[0x6b] = 0x00;

360 
s
->
cmd
 = 0;

361 
s
->
°©us
 = 0;

362 
s
->
°©us2
 = 0;

363 
s
->
öå
 = 0;

364 
s
->
Ê_ba£_addr
 = 0;

365 
s
->
sof_timög
 = 64;

367 
i
 = 0; i < 
NB_PORTS
; i++) {

368 
p‹t
 = &
s
->
p‹ts
[
i
];

369 
p‹t
->
˘æ
 = 0x0080;

370 i‡(
p‹t
->p‹t.
dev
 &&Ö‹t->p‹t.dev->
©èched
) {

371 
	`usb_p‹t_ª£t
(&
p‹t
->port);

375 
	`uhci_async_ˇn˚l_Æl
(
s
);

376 
	`qemu_bh_ˇn˚l
(
s
->
bh
);

377 
	`uhci_upd©e_úq
(
s
);

378 
	}
}

380 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_uhci_p‹t
 = {

381 .
«me
 = "uhciÖort",

382 .
	gvîsi⁄_id
 = 1,

383 .
	gmöimum_vîsi⁄_id
 = 1,

384 .
	gmöimum_vîsi⁄_id_ﬁd
 = 1,

385 .
	gfõlds
 = (
VMSèãFõld
 []) {

386 
VMSTATE_UINT16
(
˘æ
, 
UHCIP‹t
),

387 
VMSTATE_END_OF_LIST
()

391 
	$uhci_po°_lﬂd
(*
›aque
, 
vîsi⁄_id
)

393 
UHCISèã
 *
s
 = 
›aque
;

395 i‡(
vîsi⁄_id
 < 2) {

396 
s
->
expúe_time
 = 
	`qemu_gë_˛ock_ns
(
vm_˛ock
) +

397 (
	`gë_ticks_≥r_£c
(Ë/ 
FRAME_TIMER_FREQ
);

400 
	}
}

402 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_uhci
 = {

403 .
«me
 = "uhci",

404 .
	gvîsi⁄_id
 = 2,

405 .
	gmöimum_vîsi⁄_id
 = 1,

406 .
	gmöimum_vîsi⁄_id_ﬁd
 = 1,

407 .
	gpo°_lﬂd
 = 
uhci_po°_lﬂd
,

408 .
	gfõlds
 = (
VMSèãFõld
 []) {

409 
VMSTATE_PCI_DEVICE
(
dev
, 
UHCISèã
),

410 
VMSTATE_UINT8_EQUAL
(
num_p‹ts_vm°©e
, 
UHCISèã
),

411 
VMSTATE_STRUCT_ARRAY
(
p‹ts
, 
UHCISèã
, 
NB_PORTS
, 1,

412 
vm°©e_uhci_p‹t
, 
UHCIP‹t
),

413 
VMSTATE_UINT16
(
cmd
, 
UHCISèã
),

414 
VMSTATE_UINT16
(
°©us
, 
UHCISèã
),

415 
VMSTATE_UINT16
(
öå
, 
UHCISèã
),

416 
VMSTATE_UINT16
(
‰num
, 
UHCISèã
),

417 
VMSTATE_UINT32
(
Ê_ba£_addr
, 
UHCISèã
),

418 
VMSTATE_UINT8
(
sof_timög
, 
UHCISèã
),

419 
VMSTATE_UINT8
(
°©us2
, 
UHCISèã
),

420 
VMSTATE_TIMER
(
‰ame_timî
, 
UHCISèã
),

421 
VMSTATE_INT64_V
(
expúe_time
, 
UHCISèã
, 2),

422 
VMSTATE_END_OF_LIST
()

426 
	$uhci_i›‹t_wrôeb
(*
›aque
, 
uöt32_t
 
addr
, uöt32_à
vÆ
)

428 
UHCISèã
 *
s
 = 
›aque
;

430 
addr
 &= 0x1f;

431 
addr
) {

433 
s
->
sof_timög
 = 
vÆ
;

436 
	}
}

438 
uöt32_t
 
	$uhci_i›‹t_ªadb
(*
›aque
, 
uöt32_t
 
addr
)

440 
UHCISèã
 *
s
 = 
›aque
;

441 
uöt32_t
 
vÆ
;

443 
addr
 &= 0x1f;

444 
addr
) {

446 
vÆ
 = 
s
->
sof_timög
;

449 
vÆ
 = 0xff;

452  
vÆ
;

453 
	}
}

455 
	$uhci_i›‹t_wrôew
(*
›aque
, 
uöt32_t
 
addr
, uöt32_à
vÆ
)

457 
UHCISèã
 *
s
 = 
›aque
;

459 
addr
 &= 0x1f;

460 
	`åa˚_usb_uhci_mmio_wrôew
(
addr
, 
vÆ
);

462 
addr
) {

464 i‡((
vÆ
 & 
UHCI_CMD_RS
Ë&& !(
s
->
cmd
 & UHCI_CMD_RS)) {

466 
	`åa˚_usb_uhci_scheduÀ_°¨t
();

467 
s
->
expúe_time
 = 
	`qemu_gë_˛ock_ns
(
vm_˛ock
) +

468 (
	`gë_ticks_≥r_£c
(Ë/ 
FRAME_TIMER_FREQ
);

469 
	`qemu_mod_timî
(
s
->
‰ame_timî
, 
	`qemu_gë_˛ock_ns
(
vm_˛ock
));

470 
s
->
°©us
 &~
UHCI_STS_HCHALTED
;

471 } i‡(!(
vÆ
 & 
UHCI_CMD_RS
)) {

472 
s
->
°©us
 |
UHCI_STS_HCHALTED
;

474 i‡(
vÆ
 & 
UHCI_CMD_GRESET
) {

475 
UHCIP‹t
 *
p‹t
;

476 
i
;

479 
i
 = 0; i < 
NB_PORTS
; i++) {

480 
p‹t
 = &
s
->
p‹ts
[
i
];

481 
	`usb_devi˚_ª£t
(
p‹t
->p‹t.
dev
);

483 
	`uhci_ª£t
(
s
);

486 i‡(
vÆ
 & 
UHCI_CMD_HCRESET
) {

487 
	`uhci_ª£t
(
s
);

490 
s
->
cmd
 = 
vÆ
;

493 
s
->
°©us
 &~
vÆ
;

496 i‡(
vÆ
 & 
UHCI_STS_USBINT
)

497 
s
->
°©us2
 = 0;

498 
	`uhci_upd©e_úq
(
s
);

501 
s
->
öå
 = 
vÆ
;

502 
	`uhci_upd©e_úq
(
s
);

505 i‡(
s
->
°©us
 & 
UHCI_STS_HCHALTED
)

506 
s
->
‰num
 = 
vÆ
 & 0x7ff;

510 
UHCIP‹t
 *
p‹t
;

511 
USBDevi˚
 *
dev
;

512 
n
;

514 
n
 = (
addr
 >> 1) & 7;

515 i‡(
n
 >
NB_PORTS
)

517 
p‹t
 = &
s
->
p‹ts
[
n
];

518 
dev
 = 
p‹t
->port.dev;

519 i‡(
dev
 && dev->
©èched
) {

521 i‡–(
vÆ
 & 
UHCI_PORT_RESET
) &&

522 !(
p‹t
->
˘æ
 & 
UHCI_PORT_RESET
) ) {

523 
	`usb_devi˚_ª£t
(
dev
);

526 
p‹t
->
˘æ
 &
UHCI_PORT_READ_ONLY
;

527 
p‹t
->
˘æ
 |(
vÆ
 & ~
UHCI_PORT_READ_ONLY
);

529 
p‹t
->
˘æ
 &~(
vÆ
 & 
UHCI_PORT_WRITE_CLEAR
);

533 
	}
}

535 
uöt32_t
 
	$uhci_i›‹t_ªadw
(*
›aque
, 
uöt32_t
 
addr
)

537 
UHCISèã
 *
s
 = 
›aque
;

538 
uöt32_t
 
vÆ
;

540 
addr
 &= 0x1f;

541 
addr
) {

543 
vÆ
 = 
s
->
cmd
;

546 
vÆ
 = 
s
->
°©us
;

549 
vÆ
 = 
s
->
öå
;

552 
vÆ
 = 
s
->
‰num
;

556 
UHCIP‹t
 *
p‹t
;

557 
n
;

558 
n
 = (
addr
 >> 1) & 7;

559 i‡(
n
 >
NB_PORTS
)

560 
ªad_deÁu…
;

561 
p‹t
 = &
s
->
p‹ts
[
n
];

562 
vÆ
 = 
p‹t
->
˘æ
;

566 
ªad_deÁu…
:

567 
vÆ
 = 0xff7f;

571 
	`åa˚_usb_uhci_mmio_ªadw
(
addr
, 
vÆ
);

573  
vÆ
;

574 
	}
}

576 
	$uhci_i›‹t_wrôñ
(*
›aque
, 
uöt32_t
 
addr
, uöt32_à
vÆ
)

578 
UHCISèã
 *
s
 = 
›aque
;

580 
addr
 &= 0x1f;

581 
	`åa˚_usb_uhci_mmio_wrôñ
(
addr
, 
vÆ
);

583 
addr
) {

585 
s
->
Ê_ba£_addr
 = 
vÆ
 & ~0xfff;

588 
	}
}

590 
uöt32_t
 
	$uhci_i›‹t_ªadl
(*
›aque
, 
uöt32_t
 
addr
)

592 
UHCISèã
 *
s
 = 
›aque
;

593 
uöt32_t
 
vÆ
;

595 
addr
 &= 0x1f;

596 
addr
) {

598 
vÆ
 = 
s
->
Ê_ba£_addr
;

601 
vÆ
 = 0xffffffff;

604 
	`åa˚_usb_uhci_mmio_ªadl
(
addr
, 
vÆ
);

605  
vÆ
;

606 
	}
}

609 
	$uhci_ªsume
 (*
›aque
)

611 
UHCISèã
 *
s
 = (UHCISèã *)
›aque
;

613 i‡(!
s
)

616 i‡(
s
->
cmd
 & 
UHCI_CMD_EGSM
) {

617 
s
->
cmd
 |
UHCI_CMD_FGR
;

618 
s
->
°©us
 |
UHCI_STS_RD
;

619 
	`uhci_upd©e_úq
(
s
);

621 
	}
}

623 
	$uhci_©èch
(
USBP‹t
 *
p‹t1
)

625 
UHCISèã
 *
s
 = 
p‹t1
->
›aque
;

626 
UHCIP‹t
 *
p‹t
 = &
s
->
p‹ts
[
p‹t1
->
ödex
];

629 
p‹t
->
˘æ
 |
UHCI_PORT_CCS
 | 
UHCI_PORT_CSC
;

632 i‡(
p‹t
->p‹t.
dev
->
•ìd
 =
USB_SPEED_LOW
) {

633 
p‹t
->
˘æ
 |
UHCI_PORT_LSDA
;

635 
p‹t
->
˘æ
 &~
UHCI_PORT_LSDA
;

638 
	`uhci_ªsume
(
s
);

639 
	}
}

641 
	$uhci_dëach
(
USBP‹t
 *
p‹t1
)

643 
UHCISèã
 *
s
 = 
p‹t1
->
›aque
;

644 
UHCIP‹t
 *
p‹t
 = &
s
->
p‹ts
[
p‹t1
->
ödex
];

646 
	`uhci_async_ˇn˚l_devi˚
(
s
, 
p‹t1
->
dev
);

649 i‡(
p‹t
->
˘æ
 & 
UHCI_PORT_CCS
) {

650 
p‹t
->
˘æ
 &~
UHCI_PORT_CCS
;

651 
p‹t
->
˘æ
 |
UHCI_PORT_CSC
;

654 i‡(
p‹t
->
˘æ
 & 
UHCI_PORT_EN
) {

655 
p‹t
->
˘æ
 &~
UHCI_PORT_EN
;

656 
p‹t
->
˘æ
 |
UHCI_PORT_ENC
;

659 
	`uhci_ªsume
(
s
);

660 
	}
}

662 
	$uhci_chûd_dëach
(
USBP‹t
 *
p‹t1
, 
USBDevi˚
 *
chûd
)

664 
UHCISèã
 *
s
 = 
p‹t1
->
›aque
;

666 
	`uhci_async_ˇn˚l_devi˚
(
s
, 
chûd
);

667 
	}
}

669 
	$uhci_wakeup
(
USBP‹t
 *
p‹t1
)

671 
UHCISèã
 *
s
 = 
p‹t1
->
›aque
;

672 
UHCIP‹t
 *
p‹t
 = &
s
->
p‹ts
[
p‹t1
->
ödex
];

674 i‡(
p‹t
->
˘æ
 & 
UHCI_PORT_SUSPEND
 && !’‹t->˘æ & 
UHCI_PORT_RD
)) {

675 
p‹t
->
˘æ
 |
UHCI_PORT_RD
;

676 
	`uhci_ªsume
(
s
);

678 
	}
}

680 
USBDevi˚
 *
	$uhci_föd_devi˚
(
UHCISèã
 *
s
, 
uöt8_t
 
addr
)

682 
USBDevi˚
 *
dev
;

683 
i
;

685 
i
 = 0; i < 
NB_PORTS
; i++) {

686 
UHCIP‹t
 *
p‹t
 = &
s
->
p‹ts
[
i
];

687 i‡(!(
p‹t
->
˘æ
 & 
UHCI_PORT_EN
)) {

690 
dev
 = 
	`usb_föd_devi˚
(&
p‹t
->p‹t, 
addr
);

691 i‡(
dev
 !
NULL
) {

692  
dev
;

695  
NULL
;

696 
	}
}

698 
uhci_async_com∂ëe
(
USBP‹t
 *
p‹t
, 
USBPackë
 *
∑ckë
);

699 
uhci_¥o˚ss_‰ame
(
UHCISèã
 *
s
);

705 
	$uhci_com∂ëe_td
(
UHCISèã
 *
s
, 
UHCI_TD
 *
td
, 
UHCIAsync
 *
async
, 
uöt32_t
 *
öt_mask
)

707 
Àn
 = 0, 
max_Àn
, 
îr
, 
ªt
;

708 
uöt8_t
 
pid
;

710 
max_Àn
 = ((
td
->
tokí
 >> 21) + 1) & 0x7ff;

711 
pid
 = 
td
->
tokí
 & 0xff;

713 
ªt
 = 
async
->
∑ckë
.
ªsu…
;

715 i‡(
td
->
˘æ
 & 
TD_CTRL_IOS
)

716 
td
->
˘æ
 &~
TD_CTRL_ACTIVE
;

718 i‡(
ªt
 < 0)

719 
out
;

721 
Àn
 = 
async
->
∑ckë
.
ªsu…
;

722 
td
->
˘æ
 = (td->˘æ & ~0x7ffË| ((
Àn
 - 1) & 0x7ff);

727 
td
->
˘æ
 &~(
TD_CTRL_ACTIVE
 | 
TD_CTRL_NAK
);

728 i‡(
td
->
˘æ
 & 
TD_CTRL_IOC
)

729 *
öt_mask
 |= 0x01;

731 i‡(
pid
 =
USB_TOKEN_IN
) {

732 i‡(
Àn
 > 
max_Àn
) {

733 
ªt
 = 
USB_RET_BABBLE
;

734 
out
;

737 i‡((
td
->
˘æ
 & 
TD_CTRL_SPD
Ë&& 
Àn
 < 
max_Àn
) {

738 *
öt_mask
 |= 0x02;

740 
	`åa˚_usb_uhci_∑ckë_com∂ëe_sh‹tx„r
(
async
->
queue
->
tokí
,

741 
async
->
td
);

742  
TD_RESULT_NEXT_QH
;

747 
	`åa˚_usb_uhci_∑ckë_com∂ëe_suc˚ss
(
async
->
queue
->
tokí
,ásync->
td
);

748  
TD_RESULT_COMPLETE
;

750 
out
:

761 !
	`QTAILQ_EMPTY
(&
async
->
queue
->
asyncs
)) {

762 
UHCIAsync
 *
as
 = 
	`QTAILQ_FIRST
(&
async
->
queue
->
asyncs
);

763 
	`uhci_async_u∆ök
(
as
);

764 
	`uhci_async_ˇn˚l
(
as
);

767 
ªt
) {

768 
USB_RET_STALL
:

769 
td
->
˘æ
 |
TD_CTRL_STALL
;

770 
td
->
˘æ
 &~
TD_CTRL_ACTIVE
;

771 
s
->
°©us
 |
UHCI_STS_USBERR
;

772 i‡(
td
->
˘æ
 & 
TD_CTRL_IOC
) {

773 *
öt_mask
 |= 0x01;

775 
	`uhci_upd©e_úq
(
s
);

776 
	`åa˚_usb_uhci_∑ckë_com∂ëe_°Æl
(
async
->
queue
->
tokí
,ásync->
td
);

777  
TD_RESULT_NEXT_QH
;

779 
USB_RET_BABBLE
:

780 
td
->
˘æ
 |
TD_CTRL_BABBLE
 | 
TD_CTRL_STALL
;

781 
td
->
˘æ
 &~
TD_CTRL_ACTIVE
;

782 
s
->
°©us
 |
UHCI_STS_USBERR
;

783 i‡(
td
->
˘æ
 & 
TD_CTRL_IOC
) {

784 *
öt_mask
 |= 0x01;

786 
	`uhci_upd©e_úq
(
s
);

788 
	`åa˚_usb_uhci_∑ckë_com∂ëe_babbÀ
(
async
->
queue
->
tokí
,ásync->
td
);

789  
TD_RESULT_STOP_FRAME
;

791 
USB_RET_NAK
:

792 
td
->
˘æ
 |
TD_CTRL_NAK
;

793 i‡(
pid
 =
USB_TOKEN_SETUP
)

795  
TD_RESULT_NEXT_QH
;

797 
USB_RET_IOERROR
:

798 
USB_RET_NODEV
:

805 
td
->
˘æ
 |
TD_CTRL_TIMEOUT
;

806 
îr
 = (
td
->
˘æ
 >> 
TD_CTRL_ERROR_SHIFT
) & 3;

807 i‡(
îr
 != 0) {

808 
îr
--;

809 i‡(
îr
 == 0) {

810 
td
->
˘æ
 &~
TD_CTRL_ACTIVE
;

811 
s
->
°©us
 |
UHCI_STS_USBERR
;

812 i‡(
td
->
˘æ
 & 
TD_CTRL_IOC
)

813 *
öt_mask
 |= 0x01;

814 
	`uhci_upd©e_úq
(
s
);

815 
	`åa˚_usb_uhci_∑ckë_com∂ëe_îr‹
(
async
->
queue
->
tokí
,

816 
async
->
td
);

819 
td
->
˘æ
 = (td->˘æ & ~(3 << 
TD_CTRL_ERROR_SHIFT
)) |

820 (
îr
 << 
TD_CTRL_ERROR_SHIFT
);

821  
TD_RESULT_NEXT_QH
;

822 
	}
}

824 
	$uhci_h™dÀ_td
(
UHCISèã
 *
s
, 
uöt32_t
 
addr
, 
UHCI_TD
 *
td
,

825 
uöt32_t
 *
öt_mask
, 
boﬁ
 
queuög
)

827 
UHCIAsync
 *
async
;

828 
Àn
 = 0, 
max_Àn
;

829 
uöt8_t
 
pid
;

830 
USBDevi˚
 *
dev
;

831 
USBEndpoöt
 *
ï
;

834 i‡(!(
td
->
˘æ
 & 
TD_CTRL_ACTIVE
))

835  
TD_RESULT_NEXT_QH
;

837 
async
 = 
	`uhci_async_föd_td
(
s
, 
addr
, 
td
);

838 i‡(
async
) {

840 
async
->
queue
->
vÆid
 = 32;

842 i‡(!
async
->
d⁄e
)

843  
TD_RESULT_ASYNC_CONT
;

844 i‡(
queuög
) {

848  
TD_RESULT_ASYNC_CONT
;

851 
	`uhci_async_u∆ök
(
async
);

852 
d⁄e
;

856 
async
 = 
	`uhci_async_Æloc
(
	`uhci_queue_gë
(
s
, 
td
), 
addr
);

861 
async
->
queue
->
vÆid
 = 32;

862 
async
->
isoc
 = 
td
->
˘æ
 & 
TD_CTRL_IOS
;

864 
max_Àn
 = ((
td
->
tokí
 >> 21) + 1) & 0x7ff;

865 
pid
 = 
td
->
tokí
 & 0xff;

867 
dev
 = 
	`uhci_föd_devi˚
(
s
, (
td
->
tokí
 >> 8) & 0x7f);

868 
ï
 = 
	`usb_ï_gë
(
dev
, 
pid
, (
td
->
tokí
 >> 15) & 0xf);

869 
	`usb_∑ckë_£tup
(&
async
->
∑ckë
, 
pid
, 
ï
, 
addr
);

870 
	`qemu_sgli°_add
(&
async
->
sgl
, 
td
->
buf„r
, 
max_Àn
);

871 
	`usb_∑ckë_m≠
(&
async
->
∑ckë
, &async->
sgl
);

873 
pid
) {

874 
USB_TOKEN_OUT
:

875 
USB_TOKEN_SETUP
:

876 
Àn
 = 
	`usb_h™dÀ_∑ckë
(
dev
, &
async
->
∑ckë
);

877 i‡(
Àn
 >= 0)

878 
Àn
 = 
max_Àn
;

881 
USB_TOKEN_IN
:

882 
Àn
 = 
	`usb_h™dÀ_∑ckë
(
dev
, &
async
->
∑ckë
);

887 
	`uhci_async_‰ì
(
async
);

888 
s
->
°©us
 |
UHCI_STS_HCPERR
;

889 
	`uhci_upd©e_úq
(
s
);

890  
TD_RESULT_STOP_FRAME
;

893 i‡(
Àn
 =
USB_RET_ASYNC
) {

894 
	`uhci_async_lök
(
async
);

895  
TD_RESULT_ASYNC_START
;

898 
async
->
∑ckë
.
ªsu…
 = 
Àn
;

900 
d⁄e
:

901 
Àn
 = 
	`uhci_com∂ëe_td
(
s
, 
td
, 
async
, 
öt_mask
);

902 
	`usb_∑ckë_unm≠
(&
async
->
∑ckë
, &async->
sgl
);

903 
	`uhci_async_‰ì
(
async
);

904  
Àn
;

905 
	}
}

907 
	$uhci_async_com∂ëe
(
USBP‹t
 *
p‹t
, 
USBPackë
 *
∑ckë
)

909 
UHCIAsync
 *
async
 = 
	`c⁄èöî_of
(
∑ckë
, UHCIAsync,Öacket);

910 
UHCISèã
 *
s
 = 
async
->
queue
->
uhci
;

912 i‡(
async
->
isoc
) {

913 
UHCI_TD
 
td
;

914 
uöt32_t
 
lök
 = 
async
->
td
;

915 
uöt32_t
 
öt_mask
 = 0, 
vÆ
;

917 
	`pci_dma_ªad
(&
s
->
dev
, 
lök
 & ~0xf, &
td
, (td));

918 
	`À32_to_˝us
(&
td
.
lök
);

919 
	`À32_to_˝us
(&
td
.
˘æ
);

920 
	`À32_to_˝us
(&
td
.
tokí
);

921 
	`À32_to_˝us
(&
td
.
buf„r
);

923 
	`uhci_async_u∆ök
(
async
);

924 
	`uhci_com∂ëe_td
(
s
, &
td
, 
async
, &
öt_mask
);

925 
s
->
≥ndög_öt_mask
 |
öt_mask
;

928 
vÆ
 = 
	`˝u_to_À32
(
td
.
˘æ
);

929 
	`pci_dma_wrôe
(&
s
->
dev
, (
lök
 & ~0xfË+ 4, &
vÆ
, (val));

930 
	`uhci_async_‰ì
(
async
);

932 
async
->
d⁄e
 = 1;

933 i‡(
s
->
‰ame_byãs
 < s->
‰ame_b™dwidth
) {

934 
	`qemu_bh_scheduÀ
(
s
->
bh
);

937 
	}
}

939 
	$is_vÆid
(
uöt32_t
 
lök
)

941  (
lök
 & 1) == 0;

942 
	}
}

944 
	$is_qh
(
uöt32_t
 
lök
)

946  (
lök
 & 2) != 0;

947 
	}
}

949 
	$dïth_fú°
(
uöt32_t
 
lök
)

951  (
lök
 & 4) != 0;

952 
	}
}

955 
	#UHCI_MAX_QUEUES
 128

	)

957 
uöt32_t
 
	maddr
[
UHCI_MAX_QUEUES
];

958 
	mcou¡
;

959 } 
	tQhDb
;

961 
	$qhdb_ª£t
(
QhDb
 *
db
)

963 
db
->
cou¡
 = 0;

964 
	}
}

967 
	$qhdb_ö£π
(
QhDb
 *
db
, 
uöt32_t
 
addr
)

969 
i
;

970 
i
 = 0; i < 
db
->
cou¡
; i++)

971 i‡(
db
->
addr
[
i
] ==áddr)

974 i‡(
db
->
cou¡
 >
UHCI_MAX_QUEUES
)

977 
db
->
addr
[db->
cou¡
++] =áddr;

979 
	}
}

981 
	$uhci_fûl_queue
(
UHCISèã
 *
s
, 
UHCI_TD
 *
td
)

983 
uöt32_t
 
öt_mask
 = 0;

984 
uöt32_t
 
∂ök
 = 
td
->
lök
;

985 
uöt32_t
 
tokí
 = 
	`uhci_queue_tokí
(
td
);

986 
UHCI_TD
 
±d
;

987 
ªt
;

989 
	`is_vÆid
(
∂ök
)) {

990 
	`pci_dma_ªad
(&
s
->
dev
, 
∂ök
 & ~0xf, &
±d
, (ptd));

991 
	`À32_to_˝us
(&
±d
.
lök
);

992 
	`À32_to_˝us
(&
±d
.
˘æ
);

993 
	`À32_to_˝us
(&
±d
.
tokí
);

994 
	`À32_to_˝us
(&
±d
.
buf„r
);

995 i‡(!(
±d
.
˘æ
 & 
TD_CTRL_ACTIVE
)) {

998 i‡(
	`uhci_queue_tokí
(&
±d
Ë!
tokí
) {

1001 
	`åa˚_usb_uhci_td_queue
(
∂ök
 & ~0xf, 
±d
.
˘æ
,Ötd.
tokí
);

1002 
ªt
 = 
	`uhci_h™dÀ_td
(
s
, 
∂ök
, &
±d
, &
öt_mask
, 
åue
);

1003 i‡(
ªt
 =
TD_RESULT_ASYNC_CONT
) {

1006 
	`as£π
(
ªt
 =
TD_RESULT_ASYNC_START
);

1007 
	`as£π
(
öt_mask
 == 0);

1008 
∂ök
 = 
±d
.
lök
;

1010 
	}
}

1012 
	$uhci_¥o˚ss_‰ame
(
UHCISèã
 *
s
)

1014 
uöt32_t
 
‰ame_addr
, 
lök
, 
ﬁd_td_˘æ
, 
vÆ
, 
öt_mask
;

1015 
uöt32_t
 
cuº_qh
, 
td_cou¡
 = 0;

1016 
˙t
, 
ªt
;

1017 
UHCI_TD
 
td
;

1018 
UHCI_QH
 
qh
;

1019 
QhDb
 
qhdb
;

1021 
‰ame_addr
 = 
s
->
Ê_ba£_addr
 + ((s->
‰num
 & 0x3ff) << 2);

1023 
	`pci_dma_ªad
(&
s
->
dev
, 
‰ame_addr
, &
lök
, 4);

1024 
	`À32_to_˝us
(&
lök
);

1026 
öt_mask
 = 0;

1027 
cuº_qh
 = 0;

1029 
	`qhdb_ª£t
(&
qhdb
);

1031 
˙t
 = 
FRAME_MAX_LOOPS
; 
	`is_vÆid
(
lök
) && cnt; cnt--) {

1032 i‡(
s
->
‰ame_byãs
 >s->
‰ame_b™dwidth
) {

1035 
	`åa˚_usb_uhci_‰ame_°›_b™dwidth
();

1038 i‡(
	`is_qh
(
lök
)) {

1040 
	`åa˚_usb_uhci_qh_lﬂd
(
lök
 & ~0xf);

1042 i‡(
	`qhdb_ö£π
(&
qhdb
, 
lök
)) {

1050 i‡(
td_cou¡
 == 0) {

1051 
	`åa˚_usb_uhci_‰ame_lo›_°›_idÀ
();

1054 
	`åa˚_usb_uhci_‰ame_lo›_c⁄töue
();

1055 
td_cou¡
 = 0;

1056 
	`qhdb_ª£t
(&
qhdb
);

1057 
	`qhdb_ö£π
(&
qhdb
, 
lök
);

1061 
	`pci_dma_ªad
(&
s
->
dev
, 
lök
 & ~0xf, &
qh
, (qh));

1062 
	`À32_to_˝us
(&
qh
.
lök
);

1063 
	`À32_to_˝us
(&
qh
.
ñ_lök
);

1065 i‡(!
	`is_vÆid
(
qh
.
ñ_lök
)) {

1067 
cuº_qh
 = 0;

1068 
lök
 = 
qh
.link;

1071 
cuº_qh
 = 
lök
;

1072 
lök
 = 
qh
.
ñ_lök
;

1078 
	`pci_dma_ªad
(&
s
->
dev
, 
lök
 & ~0xf, &
td
, (td));

1079 
	`À32_to_˝us
(&
td
.
lök
);

1080 
	`À32_to_˝us
(&
td
.
˘æ
);

1081 
	`À32_to_˝us
(&
td
.
tokí
);

1082 
	`À32_to_˝us
(&
td
.
buf„r
);

1083 
	`åa˚_usb_uhci_td_lﬂd
(
cuº_qh
 & ~0xf, 
lök
 & ~0xf, 
td
.
˘æ
,Åd.
tokí
);

1085 
ﬁd_td_˘æ
 = 
td
.
˘æ
;

1086 
ªt
 = 
	`uhci_h™dÀ_td
(
s
, 
lök
, &
td
, &
öt_mask
, 
Ál£
);

1087 i‡(
ﬁd_td_˘æ
 !
td
.
˘æ
) {

1089 
vÆ
 = 
	`˝u_to_À32
(
td
.
˘æ
);

1090 
	`pci_dma_wrôe
(&
s
->
dev
, (
lök
 & ~0xfË+ 4, &
vÆ
, (val));

1093 
ªt
) {

1094 
TD_RESULT_STOP_FRAME
:

1095 
out
;

1097 
TD_RESULT_NEXT_QH
:

1098 
TD_RESULT_ASYNC_CONT
:

1099 
	`åa˚_usb_uhci_td_√xtqh
(
cuº_qh
 & ~0xf, 
lök
 & ~0xf);

1100 
lök
 = 
cuº_qh
 ? 
qh
.lök : 
td
.link;

1103 
TD_RESULT_ASYNC_START
:

1104 
	`åa˚_usb_uhci_td_async
(
cuº_qh
 & ~0xf, 
lök
 & ~0xf);

1105 i‡(
	`is_vÆid
(
td
.
lök
)) {

1106 
	`uhci_fûl_queue
(
s
, &
td
);

1108 
lök
 = 
cuº_qh
 ? 
qh
.lök : 
td
.link;

1111 
TD_RESULT_COMPLETE
:

1112 
	`åa˚_usb_uhci_td_com∂ëe
(
cuº_qh
 & ~0xf, 
lök
 & ~0xf);

1113 
lök
 = 
td
.link;

1114 
td_cou¡
++;

1115 
s
->
‰ame_byãs
 +(
td
.
˘æ
 & 0x7ff) + 1;

1117 i‡(
cuº_qh
) {

1119 
qh
.
ñ_lök
 = 
lök
;

1120 
vÆ
 = 
	`˝u_to_À32
(
qh
.
ñ_lök
);

1121 
	`pci_dma_wrôe
(&
s
->
dev
, (
cuº_qh
 & ~0xfË+ 4, &
vÆ
, (val));

1123 i‡(!
	`dïth_fú°
(
lök
)) {

1125 
cuº_qh
 = 0;

1126 
lök
 = 
qh
.link;

1132 
	`as£π
(!"unknownÑeturn code");

1138 
out
:

1139 
s
->
≥ndög_öt_mask
 |
öt_mask
;

1140 
	}
}

1142 
	$uhci_bh
(*
›aque
)

1144 
UHCISèã
 *
s
 = 
›aque
;

1145 
	`uhci_¥o˚ss_‰ame
(
s
);

1146 
	}
}

1148 
	$uhci_‰ame_timî
(*
›aque
)

1150 
UHCISèã
 *
s
 = 
›aque
;

1153 
s
->
expúe_time
 +(
	`gë_ticks_≥r_£c
(Ë/ 
FRAME_TIMER_FREQ
);

1154 
s
->
‰ame_byãs
 = 0;

1155 
	`qemu_bh_ˇn˚l
(
s
->
bh
);

1157 i‡(!(
s
->
cmd
 & 
UHCI_CMD_RS
)) {

1159 
	`åa˚_usb_uhci_scheduÀ_°›
();

1160 
	`qemu_dñ_timî
(
s
->
‰ame_timî
);

1161 
	`uhci_async_ˇn˚l_Æl
(
s
);

1163 
s
->
°©us
 |
UHCI_STS_HCHALTED
;

1168 i‡(
s
->
≥ndög_öt_mask
) {

1169 
s
->
°©us2
 |s->
≥ndög_öt_mask
;

1170 
s
->
°©us
 |
UHCI_STS_USBINT
;

1171 
	`uhci_upd©e_úq
(
s
);

1173 
s
->
≥ndög_öt_mask
 = 0;

1176 
s
->
‰num
 = (s->frnum + 1) & 0x7ff;

1178 
	`åa˚_usb_uhci_‰ame_°¨t
(
s
->
‰num
);

1180 
	`uhci_async_vÆid©e_begö
(
s
);

1182 
	`uhci_¥o˚ss_‰ame
(
s
);

1184 
	`uhci_async_vÆid©e_íd
(
s
);

1186 
	`qemu_mod_timî
(
s
->
‰ame_timî
, s->
expúe_time
);

1187 
	}
}

1189 c⁄° 
Mem‹yRegi⁄P‹tio
 
	guhci_p‹tio
[] = {

1190 { 0, 32, 2, .
wrôe
 = 
uhci_i›‹t_wrôew
, },

1191 { 0, 32, 2, .
	gªad
 = 
uhci_i›‹t_ªadw
, },

1192 { 0, 32, 4, .
	gwrôe
 = 
uhci_i›‹t_wrôñ
, },

1193 { 0, 32, 4, .
	gªad
 = 
uhci_i›‹t_ªadl
, },

1194 { 0, 32, 1, .
	gwrôe
 = 
uhci_i›‹t_wrôeb
, },

1195 { 0, 32, 1, .
	gªad
 = 
uhci_i›‹t_ªadb
, },

1196 
PORTIO_END_OF_LIST
()

1199 c⁄° 
Mem‹yRegi⁄Ops
 
	guhci_i›‹t_›s
 = {

1200 .
ﬁd_p‹tio
 = 
uhci_p‹tio
,

1203 
USBP‹tOps
 
	guhci_p‹t_›s
 = {

1204 .
©èch
 = 
uhci_©èch
,

1205 .
	gdëach
 = 
uhci_dëach
,

1206 .
	gchûd_dëach
 = 
uhci_chûd_dëach
,

1207 .
	gwakeup
 = 
uhci_wakeup
,

1208 .
	gcom∂ëe
 = 
uhci_async_com∂ëe
,

1211 
USBBusOps
 
	guhci_bus_›s
 = {

1214 
	$usb_uhci_comm⁄_öô‚
(
PCIDevi˚
 *
dev
)

1216 
PCIDevi˚Cœss
 *
pc
 = 
	`PCI_DEVICE_GET_CLASS
(
dev
);

1217 
UHCISèã
 *
s
 = 
	`DO_UPCAST
(UHCISèã, 
dev
, dev);

1218 
uöt8_t
 *
pci_c⁄f
 = 
s
->
dev
.
c⁄fig
;

1219 
i
;

1221 
pci_c⁄f
[
PCI_CLASS_PROG
] = 0x00;

1223 
pci_c⁄f
[
USB_SBRN
] = 
USB_RELEASE_1
;

1225 
pc
->
devi˚_id
) {

1226 
PCI_DEVICE_ID_INTEL_82801I_UHCI1
:

1227 
s
->
úq_pö
 = 0;

1229 
PCI_DEVICE_ID_INTEL_82801I_UHCI2
:

1230 
s
->
úq_pö
 = 1;

1232 
PCI_DEVICE_ID_INTEL_82801I_UHCI3
:

1233 
s
->
úq_pö
 = 2;

1236 
s
->
úq_pö
 = 3;

1239 
	`pci_c⁄fig_£t_öãºu±_pö
(
pci_c⁄f
, 
s
->
úq_pö
 + 1);

1241 i‡(
s
->
ma°îbus
) {

1242 
USBP‹t
 *
p‹ts
[
NB_PORTS
];

1243 
i
 = 0; i < 
NB_PORTS
; i++) {

1244 
p‹ts
[
i
] = &
s
->p‹ts[i].
p‹t
;

1246 i‡(
	`usb_ªgi°î_com∑ni⁄
(
s
->
ma°îbus
, 
p‹ts
, 
NB_PORTS
,

1247 
s
->
fú°p‹t
, s, &
uhci_p‹t_›s
,

1248 
USB_SPEED_MASK_LOW
 | 
USB_SPEED_MASK_FULL
) != 0) {

1252 
	`usb_bus_√w
(&
s
->
bus
, &
uhci_bus_›s
, &s->
dev
.
qdev
);

1253 
i
 = 0; i < 
NB_PORTS
; i++) {

1254 
	`usb_ªgi°î_p‹t
(&
s
->
bus
, &s->
p‹ts
[
i
].
p‹t
, s, i, &
uhci_p‹t_›s
,

1255 
USB_SPEED_MASK_LOW
 | 
USB_SPEED_MASK_FULL
);

1258 
s
->
bh
 = 
	`qemu_bh_√w
(
uhci_bh
, s);

1259 
s
->
‰ame_timî
 = 
	`qemu_√w_timî_ns
(
vm_˛ock
, 
uhci_‰ame_timî
, s);

1260 
s
->
num_p‹ts_vm°©e
 = 
NB_PORTS
;

1261 
	`QTAILQ_INIT
(&
s
->
queues
);

1263 
	`qemu_ªgi°î_ª£t
(
uhci_ª£t
, 
s
);

1265 
	`mem‹y_ªgi⁄_öô_io
(&
s
->
io_b¨
, &
uhci_i›‹t_›s
, s, "uhci", 0x20);

1268 
	`pci_ªgi°î_b¨
(&
s
->
dev
, 4, 
PCI_BASE_ADDRESS_SPACE_IO
, &s->
io_b¨
);

1271 
	}
}

1273 
	$usb_uhci_vt82c686b_öô‚
(
PCIDevi˚
 *
dev
)

1275 
UHCISèã
 *
s
 = 
	`DO_UPCAST
(UHCISèã, 
dev
, dev);

1276 
uöt8_t
 *
pci_c⁄f
 = 
s
->
dev
.
c⁄fig
;

1279 
	`pci_£t_l⁄g
(
pci_c⁄f
 + 0x40,0x00001000);

1281 
	`pci_£t_l⁄g
(
pci_c⁄f
 + 0x80,0x00020001);

1283 
	`pci_£t_l⁄g
(
pci_c⁄f
 + 0xc0,0x00002000);

1285  
	`usb_uhci_comm⁄_öô‚
(
dev
);

1286 
	}
}

1288 
	$usb_uhci_exô
(
PCIDevi˚
 *
dev
)

1290 
UHCISèã
 *
s
 = 
	`DO_UPCAST
(UHCISèã, 
dev
, dev);

1292 
	`mem‹y_ªgi⁄_de°roy
(&
s
->
io_b¨
);

1293 
	}
}

1295 
Pr›îty
 
	guhci_¥›îtõs
[] = {

1296 
DEFINE_PROP_STRING
("ma°îbus", 
UHCISèã
, 
ma°îbus
),

1297 
DEFINE_PROP_UINT32
("fú°p‹t", 
UHCISèã
, 
fú°p‹t
, 0),

1298 
DEFINE_PROP_UINT32
("b™dwidth", 
UHCISèã
, 
‰ame_b™dwidth
, 1280),

1299 
DEFINE_PROP_END_OF_LIST
(),

1302 
	$piix3_uhci_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1304 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1305 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

1307 
k
->
öô
 = 
usb_uhci_comm⁄_öô‚
;

1308 
k
->
exô
 = 
usb_uhci_exô
;

1309 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_INTEL
;

1310 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_INTEL_82371SB_2
;

1311 
k
->
ªvisi⁄
 = 0x01;

1312 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

1313 
dc
->
vmsd
 = &
vm°©e_uhci
;

1314 
dc
->
¥›s
 = 
uhci_¥›îtõs
;

1315 
	}
}

1317 
Ty≥Info
 
	gpiix3_uhci_öfo
 = {

1318 .
«me
 = "piix3-usb-uhci",

1319 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

1320 .
	gö°™˚_size
 = (
UHCISèã
),

1321 .
	g˛ass_öô
 = 
piix3_uhci_˛ass_öô
,

1324 
	$piix4_uhci_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1326 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1327 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

1329 
k
->
öô
 = 
usb_uhci_comm⁄_öô‚
;

1330 
k
->
exô
 = 
usb_uhci_exô
;

1331 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_INTEL
;

1332 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_INTEL_82371AB_2
;

1333 
k
->
ªvisi⁄
 = 0x01;

1334 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

1335 
dc
->
vmsd
 = &
vm°©e_uhci
;

1336 
dc
->
¥›s
 = 
uhci_¥›îtõs
;

1337 
	}
}

1339 
Ty≥Info
 
	gpiix4_uhci_öfo
 = {

1340 .
«me
 = "piix4-usb-uhci",

1341 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

1342 .
	gö°™˚_size
 = (
UHCISèã
),

1343 .
	g˛ass_öô
 = 
piix4_uhci_˛ass_öô
,

1346 
	$vt82c686b_uhci_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1348 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1349 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

1351 
k
->
öô
 = 
usb_uhci_vt82c686b_öô‚
;

1352 
k
->
exô
 = 
usb_uhci_exô
;

1353 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_VIA
;

1354 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_VIA_UHCI
;

1355 
k
->
ªvisi⁄
 = 0x01;

1356 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

1357 
dc
->
vmsd
 = &
vm°©e_uhci
;

1358 
dc
->
¥›s
 = 
uhci_¥›îtõs
;

1359 
	}
}

1361 
Ty≥Info
 
	gvt82c686b_uhci_öfo
 = {

1362 .
«me
 = "vt82c686b-usb-uhci",

1363 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

1364 .
	gö°™˚_size
 = (
UHCISèã
),

1365 .
	g˛ass_öô
 = 
vt82c686b_uhci_˛ass_öô
,

1368 
	$ich9_uhci1_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1370 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1371 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

1373 
k
->
öô
 = 
usb_uhci_comm⁄_öô‚
;

1374 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_INTEL
;

1375 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_INTEL_82801I_UHCI1
;

1376 
k
->
ªvisi⁄
 = 0x03;

1377 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

1378 
dc
->
vmsd
 = &
vm°©e_uhci
;

1379 
dc
->
¥›s
 = 
uhci_¥›îtõs
;

1380 
	}
}

1382 
Ty≥Info
 
	gich9_uhci1_öfo
 = {

1383 .
«me
 = "ich9-usb-uhci1",

1384 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

1385 .
	gö°™˚_size
 = (
UHCISèã
),

1386 .
	g˛ass_öô
 = 
ich9_uhci1_˛ass_öô
,

1389 
	$ich9_uhci2_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1391 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1392 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

1394 
k
->
öô
 = 
usb_uhci_comm⁄_öô‚
;

1395 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_INTEL
;

1396 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_INTEL_82801I_UHCI2
;

1397 
k
->
ªvisi⁄
 = 0x03;

1398 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

1399 
dc
->
vmsd
 = &
vm°©e_uhci
;

1400 
dc
->
¥›s
 = 
uhci_¥›îtõs
;

1401 
	}
}

1403 
Ty≥Info
 
	gich9_uhci2_öfo
 = {

1404 .
«me
 = "ich9-usb-uhci2",

1405 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

1406 .
	gö°™˚_size
 = (
UHCISèã
),

1407 .
	g˛ass_öô
 = 
ich9_uhci2_˛ass_öô
,

1410 
	$ich9_uhci3_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1412 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1413 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

1415 
k
->
öô
 = 
usb_uhci_comm⁄_öô‚
;

1416 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_INTEL
;

1417 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_INTEL_82801I_UHCI3
;

1418 
k
->
ªvisi⁄
 = 0x03;

1419 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

1420 
dc
->
vmsd
 = &
vm°©e_uhci
;

1421 
dc
->
¥›s
 = 
uhci_¥›îtõs
;

1422 
	}
}

1424 
Ty≥Info
 
	gich9_uhci3_öfo
 = {

1425 .
«me
 = "ich9-usb-uhci3",

1426 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

1427 .
	gö°™˚_size
 = (
UHCISèã
),

1428 .
	g˛ass_öô
 = 
ich9_uhci3_˛ass_öô
,

1431 
	$uhci_ªgi°î_ty≥s
()

1433 
	`ty≥_ªgi°î_°©ic
(&
piix3_uhci_öfo
);

1434 
	`ty≥_ªgi°î_°©ic
(&
piix4_uhci_öfo
);

1435 
	`ty≥_ªgi°î_°©ic
(&
vt82c686b_uhci_öfo
);

1436 
	`ty≥_ªgi°î_°©ic
(&
ich9_uhci1_öfo
);

1437 
	`ty≥_ªgi°î_°©ic
(&
ich9_uhci2_öfo
);

1438 
	`ty≥_ªgi°î_°©ic
(&
ich9_uhci3_öfo
);

1439 
	}
}

1441 
ty≥_öô
(
uhci_ªgi°î_ty≥s
)

	@hcd-xhci.c

21 
	~"hw/hw.h
"

22 
	~"qemu-timî.h
"

23 
	~"hw/usb.h
"

24 
	~"hw/pci.h
"

25 
	~"hw/msi.h
"

26 
	~"åa˚.h
"

31 #ifde‡
DEBUG_XHCI


32 
	#DPRINTF
(...Ë
	`Ârötf
(
°dîr
, 
__VA_ARGS__
)

	)

34 
	#DPRINTF
(...Ëdÿ{} 0)

	)

36 
	#FIXME
(Ëdÿ{ 
	`Ârötf
(
°dîr
, "FIXME %s:%d\n", \

37 
__func__
, 
__LINE__
); 
	`ab‹t
(); } 0)

	)

39 
	#MAXSLOTS
 8

	)

40 
	#MAXINTRS
 1

	)

42 
	#USB2_PORTS
 4

	)

43 
	#USB3_PORTS
 4

	)

45 
	#MAXPORTS
 (
USB2_PORTS
+
USB3_PORTS
)

	)

47 
	#TD_QUEUE
 24

	)

48 
	#BG_XFERS
 8

	)

49 
	#BG_PKTS
 8

	)

52 
	#EV_QUEUE
 (((3*
TD_QUEUE
)+16)*
MAXSLOTS
)

	)

55 
	#ER_FULL_HACK


	)

57 
	#LEN_CAP
 0x40

	)

58 
	#OFF_OPER
 
LEN_CAP


	)

59 
	#LEN_OPER
 (0x400 + 0x10 * 
MAXPORTS
)

	)

60 
	#OFF_RUNTIME
 ((
OFF_OPER
 + 
LEN_OPER
 + 0x20Ë& ~0x1f)

	)

61 
	#LEN_RUNTIME
 (0x20 + 
MAXINTRS
 * 0x20)

	)

62 
	#OFF_DOORBELL
 (
OFF_RUNTIME
 + 
LEN_RUNTIME
)

	)

63 
	#LEN_DOORBELL
 ((
MAXSLOTS
 + 1Ë* 0x20)

	)

66 
	#LEN_REGS
 0x2000

	)

68 #i‡(
OFF_DOORBELL
 + 
LEN_DOORBELL
Ë> 
LEN_REGS


69 #îr‹ 
In¸ó£
 
LEN_REGS


72 #i‡
MAXINTRS
 > 1

73 #îr‹ 
TODO
: 
⁄ly
 
⁄e
 
öãºu±î
 
suµ‹ãd


77 
	#USBCMD_RS
 (1<<0)

	)

78 
	#USBCMD_HCRST
 (1<<1)

	)

79 
	#USBCMD_INTE
 (1<<2)

	)

80 
	#USBCMD_HSEE
 (1<<3)

	)

81 
	#USBCMD_LHCRST
 (1<<7)

	)

82 
	#USBCMD_CSS
 (1<<8)

	)

83 
	#USBCMD_CRS
 (1<<9)

	)

84 
	#USBCMD_EWE
 (1<<10)

	)

85 
	#USBCMD_EU3S
 (1<<11)

	)

87 
	#USBSTS_HCH
 (1<<0)

	)

88 
	#USBSTS_HSE
 (1<<2)

	)

89 
	#USBSTS_EINT
 (1<<3)

	)

90 
	#USBSTS_PCD
 (1<<4)

	)

91 
	#USBSTS_SSS
 (1<<8)

	)

92 
	#USBSTS_RSS
 (1<<9)

	)

93 
	#USBSTS_SRE
 (1<<10)

	)

94 
	#USBSTS_CNR
 (1<<11)

	)

95 
	#USBSTS_HCE
 (1<<12)

	)

98 
	#PORTSC_CCS
 (1<<0)

	)

99 
	#PORTSC_PED
 (1<<1)

	)

100 
	#PORTSC_OCA
 (1<<3)

	)

101 
	#PORTSC_PR
 (1<<4)

	)

102 
	#PORTSC_PLS_SHIFT
 5

	)

103 
	#PORTSC_PLS_MASK
 0xf

	)

104 
	#PORTSC_PP
 (1<<9)

	)

105 
	#PORTSC_SPEED_SHIFT
 10

	)

106 
	#PORTSC_SPEED_MASK
 0xf

	)

107 
	#PORTSC_SPEED_FULL
 (1<<10)

	)

108 
	#PORTSC_SPEED_LOW
 (2<<10)

	)

109 
	#PORTSC_SPEED_HIGH
 (3<<10)

	)

110 
	#PORTSC_SPEED_SUPER
 (4<<10)

	)

111 
	#PORTSC_PIC_SHIFT
 14

	)

112 
	#PORTSC_PIC_MASK
 0x3

	)

113 
	#PORTSC_LWS
 (1<<16)

	)

114 
	#PORTSC_CSC
 (1<<17)

	)

115 
	#PORTSC_PEC
 (1<<18)

	)

116 
	#PORTSC_WRC
 (1<<19)

	)

117 
	#PORTSC_OCC
 (1<<20)

	)

118 
	#PORTSC_PRC
 (1<<21)

	)

119 
	#PORTSC_PLC
 (1<<22)

	)

120 
	#PORTSC_CEC
 (1<<23)

	)

121 
	#PORTSC_CAS
 (1<<24)

	)

122 
	#PORTSC_WCE
 (1<<25)

	)

123 
	#PORTSC_WDE
 (1<<26)

	)

124 
	#PORTSC_WOE
 (1<<27)

	)

125 
	#PORTSC_DR
 (1<<30)

	)

126 
	#PORTSC_WPR
 (1<<31)

	)

128 
	#CRCR_RCS
 (1<<0)

	)

129 
	#CRCR_CS
 (1<<1)

	)

130 
	#CRCR_CA
 (1<<2)

	)

131 
	#CRCR_CRR
 (1<<3)

	)

133 
	#IMAN_IP
 (1<<0)

	)

134 
	#IMAN_IE
 (1<<1)

	)

136 
	#ERDP_EHB
 (1<<3)

	)

138 
	#TRB_SIZE
 16

	)

139 
	sXHCITRB
 {

140 
uöt64_t
 
	m∑ømëî
;

141 
uöt32_t
 
	m°©us
;

142 
uöt32_t
 
	mc⁄åﬁ
;

143 
dma_addr_t
 
	maddr
;

144 
boﬁ
 
	mccs
;

145 } 
	tXHCITRB
;

148 
	eTRBTy≥
 {

149 
	mTRB_RESERVED
 = 0,

150 
	mTR_NORMAL
,

151 
	mTR_SETUP
,

152 
	mTR_DATA
,

153 
	mTR_STATUS
,

154 
	mTR_ISOCH
,

155 
	mTR_LINK
,

156 
	mTR_EVDATA
,

157 
	mTR_NOOP
,

158 
	mCR_ENABLE_SLOT
,

159 
	mCR_DISABLE_SLOT
,

160 
	mCR_ADDRESS_DEVICE
,

161 
	mCR_CONFIGURE_ENDPOINT
,

162 
	mCR_EVALUATE_CONTEXT
,

163 
	mCR_RESET_ENDPOINT
,

164 
	mCR_STOP_ENDPOINT
,

165 
	mCR_SET_TR_DEQUEUE
,

166 
	mCR_RESET_DEVICE
,

167 
	mCR_FORCE_EVENT
,

168 
	mCR_NEGOTIATE_BW
,

169 
	mCR_SET_LATENCY_TOLERANCE
,

170 
	mCR_GET_PORT_BANDWIDTH
,

171 
	mCR_FORCE_HEADER
,

172 
	mCR_NOOP
,

173 
	mER_TRANSFER
 = 32,

174 
	mER_COMMAND_COMPLETE
,

175 
	mER_PORT_STATUS_CHANGE
,

176 
	mER_BANDWIDTH_REQUEST
,

177 
	mER_DOORBELL
,

178 
	mER_HOST_CONTROLLER
,

179 
	mER_DEVICE_NOTIFICATION
,

180 
	mER_MFINDEX_WRAP
,

182 
	mCR_VENDOR_VIA_CHALLENGE_RESPONSE
 = 48,

183 
	mCR_VENDOR_NEC_FIRMWARE_REVISION
 = 49,

184 
	mCR_VENDOR_NEC_CHALLENGE_RESPONSE
 = 50,

185 } 
	tTRBTy≥
;

187 
	#CR_LINK
 
TR_LINK


	)

189 
	eTRBCCode
 {

190 
	mCC_INVALID
 = 0,

191 
	mCC_SUCCESS
,

192 
	mCC_DATA_BUFFER_ERROR
,

193 
	mCC_BABBLE_DETECTED
,

194 
	mCC_USB_TRANSACTION_ERROR
,

195 
	mCC_TRB_ERROR
,

196 
	mCC_STALL_ERROR
,

197 
	mCC_RESOURCE_ERROR
,

198 
	mCC_BANDWIDTH_ERROR
,

199 
	mCC_NO_SLOTS_ERROR
,

200 
	mCC_INVALID_STREAM_TYPE_ERROR
,

201 
	mCC_SLOT_NOT_ENABLED_ERROR
,

202 
	mCC_EP_NOT_ENABLED_ERROR
,

203 
	mCC_SHORT_PACKET
,

204 
	mCC_RING_UNDERRUN
,

205 
	mCC_RING_OVERRUN
,

206 
	mCC_VF_ER_FULL
,

207 
	mCC_PARAMETER_ERROR
,

208 
	mCC_BANDWIDTH_OVERRUN
,

209 
	mCC_CONTEXT_STATE_ERROR
,

210 
	mCC_NO_PING_RESPONSE_ERROR
,

211 
	mCC_EVENT_RING_FULL_ERROR
,

212 
	mCC_INCOMPATIBLE_DEVICE_ERROR
,

213 
	mCC_MISSED_SERVICE_ERROR
,

214 
	mCC_COMMAND_RING_STOPPED
,

215 
	mCC_COMMAND_ABORTED
,

216 
	mCC_STOPPED
,

217 
	mCC_STOPPED_LENGTH_INVALID
,

218 
	mCC_MAX_EXIT_LATENCY_TOO_LARGE_ERROR
 = 29,

219 
	mCC_ISOCH_BUFFER_OVERRUN
 = 31,

220 
	mCC_EVENT_LOST_ERROR
,

221 
	mCC_UNDEFINED_ERROR
,

222 
	mCC_INVALID_STREAM_ID_ERROR
,

223 
	mCC_SECONDARY_BANDWIDTH_ERROR
,

224 
	mCC_SPLIT_TRANSACTION_ERROR


225 } 
	tTRBCCode
;

227 
	#TRB_C
 (1<<0)

	)

228 
	#TRB_TYPE_SHIFT
 10

	)

229 
	#TRB_TYPE_MASK
 0x3f

	)

230 
	#TRB_TYPE
(
t
Ë((—).
c⁄åﬁ
 >> 
TRB_TYPE_SHIFT
Ë& 
TRB_TYPE_MASK
)

	)

232 
	#TRB_EV_ED
 (1<<2)

	)

234 
	#TRB_TR_ENT
 (1<<1)

	)

235 
	#TRB_TR_ISP
 (1<<2)

	)

236 
	#TRB_TR_NS
 (1<<3)

	)

237 
	#TRB_TR_CH
 (1<<4)

	)

238 
	#TRB_TR_IOC
 (1<<5)

	)

239 
	#TRB_TR_IDT
 (1<<6)

	)

240 
	#TRB_TR_TBC_SHIFT
 7

	)

241 
	#TRB_TR_TBC_MASK
 0x3

	)

242 
	#TRB_TR_BEI
 (1<<9)

	)

243 
	#TRB_TR_TLBPC_SHIFT
 16

	)

244 
	#TRB_TR_TLBPC_MASK
 0xf

	)

245 
	#TRB_TR_FRAMEID_SHIFT
 20

	)

246 
	#TRB_TR_FRAMEID_MASK
 0x7ff

	)

247 
	#TRB_TR_SIA
 (1<<31)

	)

249 
	#TRB_TR_DIR
 (1<<16)

	)

251 
	#TRB_CR_SLOTID_SHIFT
 24

	)

252 
	#TRB_CR_SLOTID_MASK
 0xff

	)

253 
	#TRB_CR_EPID_SHIFT
 16

	)

254 
	#TRB_CR_EPID_MASK
 0x1f

	)

256 
	#TRB_CR_BSR
 (1<<9)

	)

257 
	#TRB_CR_DC
 (1<<9)

	)

259 
	#TRB_LK_TC
 (1<<1)

	)

261 
	#EP_TYPE_MASK
 0x7

	)

262 
	#EP_TYPE_SHIFT
 3

	)

264 
	#EP_STATE_MASK
 0x7

	)

265 
	#EP_DISABLED
 (0<<0)

	)

266 
	#EP_RUNNING
 (1<<0)

	)

267 
	#EP_HALTED
 (2<<0)

	)

268 
	#EP_STOPPED
 (3<<0)

	)

269 
	#EP_ERROR
 (4<<0)

	)

271 
	#SLOT_STATE_MASK
 0x1f

	)

272 
	#SLOT_STATE_SHIFT
 27

	)

273 
	#SLOT_STATE
(
s
Ë(((s)>>
SLOT_STATE_SHIFT
)&
SLOT_STATE_MASK
)

	)

274 
	#SLOT_ENABLED
 0

	)

275 
	#SLOT_DEFAULT
 1

	)

276 
	#SLOT_ADDRESSED
 2

	)

277 
	#SLOT_CONFIGURED
 3

	)

279 
	#SLOT_CONTEXT_ENTRIES_MASK
 0x1f

	)

280 
	#SLOT_CONTEXT_ENTRIES_SHIFT
 27

	)

282 
	eEPTy≥
 {

283 
	mET_INVALID
 = 0,

284 
	mET_ISO_OUT
,

285 
	mET_BULK_OUT
,

286 
	mET_INTR_OUT
,

287 
	mET_CONTROL
,

288 
	mET_ISO_IN
,

289 
	mET_BULK_IN
,

290 
	mET_INTR_IN
,

291 } 
	tEPTy≥
;

293 
	sXHCIRög
 {

294 
dma_addr_t
 
	mba£
;

295 
dma_addr_t
 
	mdequeue
;

296 
boﬁ
 
	mccs
;

297 } 
	tXHCIRög
;

299 
	sXHCIP‹t
 {

300 
USBP‹t
 
	mp‹t
;

301 
uöt32_t
 
	mp‹tsc
;

302 } 
	tXHCIP‹t
;

304 
	gXHCISèã
;

305 
XHCISèã
 
	tXHCISèã
;

307 
	sXHCITøns„r
 {

308 
XHCISèã
 *
	mxhci
;

309 
USBPackë
 
	m∑ckë
;

310 
boﬁ
 
	mru¬ög_async
;

311 
boﬁ
 
	mru¬ög_ªåy
;

312 
boﬁ
 
	mˇn˚Œed
;

313 
boﬁ
 
	mcom∂ëe
;

314 
boﬁ
 
	mbackgrounded
;

315 
	miso_pkts
;

316 
	m¶Ÿid
;

317 
	mïid
;

318 
boﬁ
 
	mö_x„r
;

319 
boﬁ
 
	miso_x„r
;

320 
boﬁ
 
	mbg_x„r
;

322 
	måb_cou¡
;

323 
	måb_Ælo˚d
;

324 
XHCITRB
 *
	måbs
;

326 
	md©a_Àngth
;

327 
	md©a_Ælo˚d
;

328 
uöt8_t
 *
	md©a
;

330 
TRBCCode
 
	m°©us
;

332 
	mpkts
;

333 
	mpktsize
;

334 
	mcur_pkt
;

335 } 
	tXHCITøns„r
;

337 
	sXHCIEPC⁄ãxt
 {

338 
XHCIRög
 
	mrög
;

339 
	m√xt_x„r
;

340 
	mcomp_x„r
;

341 
XHCITøns„r
 
	må™s„rs
[
TD_QUEUE
];

342 
XHCITøns„r
 *
	mªåy
;

343 
boﬁ
 
	mbg_ru¬ög
;

344 
boﬁ
 
	mbg_upd©ög
;

345 
	m√xt_bg
;

346 
XHCITøns„r
 
	mbg_å™s„rs
[
BG_XFERS
];

347 
EPTy≥
 
	mty≥
;

348 
dma_addr_t
 
	mp˘x
;

349 
	mmax_psize
;

350 
boﬁ
 
	mhas_bg
;

351 
uöt32_t
 
	m°©e
;

352 } 
	tXHCIEPC⁄ãxt
;

354 
	sXHCISlŸ
 {

355 
boﬁ
 
	míabÀd
;

356 
dma_addr_t
 
	m˘x
;

357 
	mp‹t
;

358 
	mdevaddr
;

359 
XHCIEPC⁄ãxt
 * 
	mïs
[31];

360 } 
	tXHCISlŸ
;

362 
	sXHCIEvít
 {

363 
TRBTy≥
 
	mty≥
;

364 
TRBCCode
 
	mccode
;

365 
uöt64_t
 
	m±r
;

366 
uöt32_t
 
	mÀngth
;

367 
uöt32_t
 
	mÊags
;

368 
uöt8_t
 
	m¶Ÿid
;

369 
uöt8_t
 
	mïid
;

370 } 
	tXHCIEvít
;

372 
	sXHCISèã
 {

373 
PCIDevi˚
 
	mpci_dev
;

374 
USBBus
 
	mbus
;

375 
qemu_úq
 
	múq
;

376 
Mem‹yRegi⁄
 
	mmem
;

377 c⁄° *
	m«me
;

378 
uöt32_t
 
	mmsi
;

379 
	mdevaddr
;

382 
uöt32_t
 
	musbcmd
;

383 
uöt32_t
 
	musb°s
;

384 
uöt32_t
 
	mdn˘æ
;

385 
uöt32_t
 
	m¸¸_low
;

386 
uöt32_t
 
	m¸¸_high
;

387 
uöt32_t
 
	mdcbØp_low
;

388 
uöt32_t
 
	mdcbØp_high
;

389 
uöt32_t
 
	mc⁄fig
;

391 
XHCIP‹t
 
	mp‹ts
[
MAXPORTS
];

392 
XHCISlŸ
 
	m¶Ÿs
[
MAXSLOTS
];

395 
uöt32_t
 
	mmfödex
;

397 
uöt32_t
 
	mim™
;

398 
uöt32_t
 
	mimod
;

399 
uöt32_t
 
	mî°sz
;

400 
uöt32_t
 
	mî°ba_low
;

401 
uöt32_t
 
	mî°ba_high
;

402 
uöt32_t
 
	mîdp_low
;

403 
uöt32_t
 
	mîdp_high
;

405 
dma_addr_t
 
	mî_°¨t
;

406 
uöt32_t
 
	mî_size
;

407 
boﬁ
 
	mî_pcs
;

408 
	mî_ï_idx
;

409 
boﬁ
 
	mî_fuŒ
;

411 
XHCIEvít
 
	mev_buf„r
[
EV_QUEUE
];

412 
	mev_buf„r_put
;

413 
	mev_buf„r_gë
;

415 
XHCIRög
 
	mcmd_rög
;

418 
	sXHCIEvRögSeg
 {

419 
uöt32_t
 
	maddr_low
;

420 
uöt32_t
 
	maddr_high
;

421 
uöt32_t
 
	msize
;

422 
uöt32_t
 
	mrsvd
;

423 } 
	tXHCIEvRögSeg
;

425 c⁄° *
	gTRBTy≥_«mes
[] = {

426 [
TRB_RESERVED
] = "TRB_RESERVED",

427 [
TR_NORMAL
] = "TR_NORMAL",

428 [
TR_SETUP
] = "TR_SETUP",

429 [
TR_DATA
] = "TR_DATA",

430 [
TR_STATUS
] = "TR_STATUS",

431 [
TR_ISOCH
] = "TR_ISOCH",

432 [
TR_LINK
] = "TR_LINK",

433 [
TR_EVDATA
] = "TR_EVDATA",

434 [
TR_NOOP
] = "TR_NOOP",

435 [
CR_ENABLE_SLOT
] = "CR_ENABLE_SLOT",

436 [
CR_DISABLE_SLOT
] = "CR_DISABLE_SLOT",

437 [
CR_ADDRESS_DEVICE
] = "CR_ADDRESS_DEVICE",

438 [
CR_CONFIGURE_ENDPOINT
] = "CR_CONFIGURE_ENDPOINT",

439 [
CR_EVALUATE_CONTEXT
] = "CR_EVALUATE_CONTEXT",

440 [
CR_RESET_ENDPOINT
] = "CR_RESET_ENDPOINT",

441 [
CR_STOP_ENDPOINT
] = "CR_STOP_ENDPOINT",

442 [
CR_SET_TR_DEQUEUE
] = "CR_SET_TR_DEQUEUE",

443 [
CR_RESET_DEVICE
] = "CR_RESET_DEVICE",

444 [
CR_FORCE_EVENT
] = "CR_FORCE_EVENT",

445 [
CR_NEGOTIATE_BW
] = "CR_NEGOTIATE_BW",

446 [
CR_SET_LATENCY_TOLERANCE
] = "CR_SET_LATENCY_TOLERANCE",

447 [
CR_GET_PORT_BANDWIDTH
] = "CR_GET_PORT_BANDWIDTH",

448 [
CR_FORCE_HEADER
] = "CR_FORCE_HEADER",

449 [
CR_NOOP
] = "CR_NOOP",

450 [
ER_TRANSFER
] = "ER_TRANSFER",

451 [
ER_COMMAND_COMPLETE
] = "ER_COMMAND_COMPLETE",

452 [
ER_PORT_STATUS_CHANGE
] = "ER_PORT_STATUS_CHANGE",

453 [
ER_BANDWIDTH_REQUEST
] = "ER_BANDWIDTH_REQUEST",

454 [
ER_DOORBELL
] = "ER_DOORBELL",

455 [
ER_HOST_CONTROLLER
] = "ER_HOST_CONTROLLER",

456 [
ER_DEVICE_NOTIFICATION
] = "ER_DEVICE_NOTIFICATION",

457 [
ER_MFINDEX_WRAP
] = "ER_MFINDEX_WRAP",

458 [
CR_VENDOR_VIA_CHALLENGE_RESPONSE
] = "CR_VENDOR_VIA_CHALLENGE_RESPONSE",

459 [
CR_VENDOR_NEC_FIRMWARE_REVISION
] = "CR_VENDOR_NEC_FIRMWARE_REVISION",

460 [
CR_VENDOR_NEC_CHALLENGE_RESPONSE
] = "CR_VENDOR_NEC_CHALLENGE_RESPONSE",

463 c⁄° *
	$lookup_«me
(
uöt32_t
 
ödex
, c⁄° **
li°
, uöt32_à
Œí
)

465 i‡(
ödex
 >
Œí
 || 
li°
[ödex] =
NULL
) {

468  
li°
[
ödex
];

469 
	}
}

471 c⁄° *
	$åb_«me
(
XHCITRB
 *
åb
)

473  
	`lookup_«me
(
	`TRB_TYPE
(*
åb
), 
TRBTy≥_«mes
,

474 
	`ARRAY_SIZE
(
TRBTy≥_«mes
));

475 
	}
}

477 
xhci_kick_ï
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

478 
ïid
);

480 
ölöe
 
dma_addr_t
 
	$xhci_addr64
(
uöt32_t
 
low
, uöt32_à
high
)

482 i‡((
dma_addr_t
) == 4) {

483  
low
;

485  
low
 | (((
dma_addr_t
)
high
 << 16) << 16);

487 
	}
}

489 
ölöe
 
dma_addr_t
 
	$xhci_mask64
(
uöt64_t
 
addr
)

491 i‡((
dma_addr_t
) == 4) {

492  
addr
 & 0xffffffff;

494  
addr
;

496 
	}
}

498 
	$xhci_úq_upd©e
(
XHCISèã
 *
xhci
)

500 
Àvñ
 = 0;

502 i‡(
xhci
->
im™
 & 
IMAN_IP
 && xhci->im™ & 
IMAN_IE
 &&

503 
xhci
->
usbcmd
 & 
USBCMD_INTE
) {

504 
Àvñ
 = 1;

507 i‡(
xhci
->
msi
 && 
	`msi_íabÀd
(&xhci->
pci_dev
)) {

508 i‡(
Àvñ
) {

509 
	`åa˚_usb_xhci_úq_msi
(0);

510 
	`msi_nŸify
(&
xhci
->
pci_dev
, 0);

513 
	`åa˚_usb_xhci_úq_ötx
(
Àvñ
);

514 
	`qemu_£t_úq
(
xhci
->
úq
, 
Àvñ
);

516 
	}
}

518 
ölöe
 
	$xhci_ru¬ög
(
XHCISèã
 *
xhci
)

520  !(
xhci
->
usb°s
 & 
USBSTS_HCH
Ë&& !xhci->
î_fuŒ
;

521 
	}
}

523 
	$xhci_dõ
(
XHCISèã
 *
xhci
)

525 
xhci
->
usb°s
 |
USBSTS_HCE
;

526 
	`Ârötf
(
°dîr
, "xhci:ásserted controllerÉrror\n");

527 
	}
}

529 
	$xhci_wrôe_evít
(
XHCISèã
 *
xhci
, 
XHCIEvít
 *
evít
)

531 
XHCITRB
 
ev_åb
;

532 
dma_addr_t
 
addr
;

534 
ev_åb
.
∑ømëî
 = 
	`˝u_to_À64
(
evít
->
±r
);

535 
ev_åb
.
°©us
 = 
	`˝u_to_À32
(
evít
->
Àngth
 | (evít->
ccode
 << 24));

536 
ev_åb
.
c⁄åﬁ
 = (
evít
->
¶Ÿid
 << 24Ë| (evít->
ïid
 << 16) |

537 
evít
->
Êags
 | (evít->
ty≥
 << 
TRB_TYPE_SHIFT
);

538 i‡(
xhci
->
î_pcs
) {

539 
ev_åb
.
c⁄åﬁ
 |
TRB_C
;

541 
ev_åb
.
c⁄åﬁ
 = 
	`˝u_to_À32
(ev_trb.control);

543 
	`åa˚_usb_xhci_queue_evít
(
xhci
->
î_ï_idx
, 
	`åb_«me
(&
ev_åb
),

544 
ev_åb
.
∑ømëî
,Év_åb.
°©us
,Év_åb.
c⁄åﬁ
);

546 
addr
 = 
xhci
->
î_°¨t
 + 
TRB_SIZE
*xhci->
î_ï_idx
;

547 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
addr
, &
ev_åb
, 
TRB_SIZE
);

549 
xhci
->
î_ï_idx
++;

550 i‡(
xhci
->
î_ï_idx
 >xhci->
î_size
) {

551 
xhci
->
î_ï_idx
 = 0;

552 
xhci
->
î_pcs
 = !xhci->er_pcs;

554 
	}
}

556 
	$xhci_evíts_upd©e
(
XHCISèã
 *
xhci
)

558 
dma_addr_t
 
îdp
;

559 
dp_idx
;

560 
boﬁ
 
do_úq
 = 0;

562 i‡(
xhci
->
usb°s
 & 
USBSTS_HCH
) {

566 
îdp
 = 
	`xhci_addr64
(
xhci
->
îdp_low
, xhci->
îdp_high
);

567 i‡(
îdp
 < 
xhci
->
î_°¨t
 ||

568 
îdp
 >(
xhci
->
î_°¨t
 + 
TRB_SIZE
*xhci->
î_size
)) {

569 
	`Ârötf
(
°dîr
, "xhci: ERDP ouào‡bounds: "
DMA_ADDR_FMT
"\n", 
îdp
);

570 
	`Ârötf
(
°dîr
, "xhci: ERáà"
DMA_ADDR_FMT
"Üen %d\n",

571 
xhci
->
î_°¨t
, xhci->
î_size
);

572 
	`xhci_dõ
(
xhci
);

575 
dp_idx
 = (
îdp
 - 
xhci
->
î_°¨t
Ë/ 
TRB_SIZE
;

576 
	`as£π
(
dp_idx
 < 
xhci
->
î_size
);

581 i‡(
xhci
->
î_fuŒ
) {

582 
î_‰ì
 = 
dp_idx
 - 
xhci
->
î_ï_idx
;

583 i‡(
î_‰ì
 <= 0) {

584 
î_‰ì
 +
xhci
->
î_size
;

586 i‡(
î_‰ì
 < (
xhci
->
î_size
/2)) {

587 
	`DPRINTF
("xhci_events_update():ÉventÑing still "

593 
xhci
->
ev_buf„r_put
 !xhci->
ev_buf„r_gë
) {

594 
	`as£π
(
xhci
->
î_fuŒ
);

595 i‡(((
xhci
->
î_ï_idx
+1Ë% xhci->
î_size
Ë=
dp_idx
) {

596 
	`DPRINTF
("xhci_events_update():ÉventÑing fullágain\n");

597 #i‚de‡
ER_FULL_HACK


598 
XHCIEvít
 
fuŒ
 = {
ER_HOST_CONTROLLER
, 
CC_EVENT_RING_FULL_ERROR
};

599 
	`xhci_wrôe_evít
(
xhci
, &
fuŒ
);

601 
do_úq
 = 1;

604 
XHCIEvít
 *
evít
 = &
xhci
->
ev_buf„r
[xhci->
ev_buf„r_gë
];

605 
	`xhci_wrôe_evít
(
xhci
, 
evít
);

606 
xhci
->
ev_buf„r_gë
++;

607 
do_úq
 = 1;

608 i‡(
xhci
->
ev_buf„r_gë
 =
EV_QUEUE
) {

609 
xhci
->
ev_buf„r_gë
 = 0;

613 i‡(
do_úq
) {

614 
xhci
->
îdp_low
 |
ERDP_EHB
;

615 
xhci
->
im™
 |
IMAN_IP
;

616 
xhci
->
usb°s
 |
USBSTS_EINT
;

617 
	`xhci_úq_upd©e
(
xhci
);

620 i‡(
xhci
->
î_fuŒ
 && xhci->
ev_buf„r_put
 =xhci->
ev_buf„r_gë
) {

621 
	`DPRINTF
("xhci_events_update():ÉventÑingÇoÜonger full\n");

622 
xhci
->
î_fuŒ
 = 0;

625 
	}
}

627 
	$xhci_evít
(
XHCISèã
 *
xhci
, 
XHCIEvít
 *
evít
)

629 
dma_addr_t
 
îdp
;

630 
dp_idx
;

632 i‡(
xhci
->
î_fuŒ
) {

633 
	`DPRINTF
("xhci_event(): ER full, queueing\n");

634 i‡(((
xhci
->
ev_buf„r_put
+1Ë% 
EV_QUEUE
Ë=xhci->
ev_buf„r_gë
) {

635 
	`Ârötf
(
°dîr
, "xhci:Évent queue full, droppingÉvent!\n");

638 
xhci
->
ev_buf„r
[xhci->
ev_buf„r_put
++] = *
evít
;

639 i‡(
xhci
->
ev_buf„r_put
 =
EV_QUEUE
) {

640 
xhci
->
ev_buf„r_put
 = 0;

645 
îdp
 = 
	`xhci_addr64
(
xhci
->
îdp_low
, xhci->
îdp_high
);

646 i‡(
îdp
 < 
xhci
->
î_°¨t
 ||

647 
îdp
 >(
xhci
->
î_°¨t
 + 
TRB_SIZE
*xhci->
î_size
)) {

648 
	`Ârötf
(
°dîr
, "xhci: ERDP ouào‡bounds: "
DMA_ADDR_FMT
"\n", 
îdp
);

649 
	`Ârötf
(
°dîr
, "xhci: ERáà"
DMA_ADDR_FMT
"Üen %d\n",

650 
xhci
->
î_°¨t
, xhci->
î_size
);

651 
	`xhci_dõ
(
xhci
);

655 
dp_idx
 = (
îdp
 - 
xhci
->
î_°¨t
Ë/ 
TRB_SIZE
;

656 
	`as£π
(
dp_idx
 < 
xhci
->
î_size
);

658 i‡((
xhci
->
î_ï_idx
+1Ë% xhci->
î_size
 =
dp_idx
) {

659 
	`DPRINTF
("xhci_event(): ER full, queueing\n");

660 #i‚de‡
ER_FULL_HACK


661 
XHCIEvít
 
fuŒ
 = {
ER_HOST_CONTROLLER
, 
CC_EVENT_RING_FULL_ERROR
};

662 
	`xhci_wrôe_evít
(
xhci
, &
fuŒ
);

664 
xhci
->
î_fuŒ
 = 1;

665 i‡(((
xhci
->
ev_buf„r_put
+1Ë% 
EV_QUEUE
Ë=xhci->
ev_buf„r_gë
) {

666 
	`Ârötf
(
°dîr
, "xhci:Évent queue full, droppingÉvent!\n");

669 
xhci
->
ev_buf„r
[xhci->
ev_buf„r_put
++] = *
evít
;

670 i‡(
xhci
->
ev_buf„r_put
 =
EV_QUEUE
) {

671 
xhci
->
ev_buf„r_put
 = 0;

674 
	`xhci_wrôe_evít
(
xhci
, 
evít
);

677 
xhci
->
îdp_low
 |
ERDP_EHB
;

678 
xhci
->
im™
 |
IMAN_IP
;

679 
xhci
->
usb°s
 |
USBSTS_EINT
;

681 
	`xhci_úq_upd©e
(
xhci
);

682 
	}
}

684 
	$xhci_rög_öô
(
XHCISèã
 *
xhci
, 
XHCIRög
 *
rög
,

685 
dma_addr_t
 
ba£
)

687 
rög
->
ba£
 = base;

688 
rög
->
dequeue
 = 
ba£
;

689 
rög
->
ccs
 = 1;

690 
	}
}

692 
TRBTy≥
 
	$xhci_rög_„tch
(
XHCISèã
 *
xhci
, 
XHCIRög
 *
rög
, 
XHCITRB
 *
åb
,

693 
dma_addr_t
 *
addr
)

696 
TRBTy≥
 
ty≥
;

697 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
rög
->
dequeue
, 
åb
, 
TRB_SIZE
);

698 
åb
->
addr
 = 
rög
->
dequeue
;

699 
åb
->
ccs
 = 
rög
->ccs;

700 
	`À64_to_˝us
(&
åb
->
∑ømëî
);

701 
	`À32_to_˝us
(&
åb
->
°©us
);

702 
	`À32_to_˝us
(&
åb
->
c⁄åﬁ
);

704 
	`åa˚_usb_xhci_„tch_åb
(
rög
->
dequeue
, 
	`åb_«me
(
åb
),

705 
åb
->
∑ømëî
,Årb->
°©us
,Årb->
c⁄åﬁ
);

707 i‡((
åb
->
c⁄åﬁ
 & 
TRB_C
Ë!
rög
->
ccs
) {

711 
ty≥
 = 
	`TRB_TYPE
(*
åb
);

713 i‡(
ty≥
 !
TR_LINK
) {

714 i‡(
addr
) {

715 *
addr
 = 
rög
->
dequeue
;

717 
rög
->
dequeue
 +
TRB_SIZE
;

718  
ty≥
;

720 
rög
->
dequeue
 = 
	`xhci_mask64
(
åb
->
∑ømëî
);

721 i‡(
åb
->
c⁄åﬁ
 & 
TRB_LK_TC
) {

722 
rög
->
ccs
 = !ring->ccs;

726 
	}
}

728 
	$xhci_rög_chaö_Àngth
(
XHCISèã
 *
xhci
, c⁄° 
XHCIRög
 *
rög
)

730 
XHCITRB
 
åb
;

731 
Àngth
 = 0;

732 
dma_addr_t
 
dequeue
 = 
rög
->dequeue;

733 
boﬁ
 
ccs
 = 
rög
->ccs;

735 
boﬁ
 
c⁄åﬁ_td_£t
 = 0;

738 
TRBTy≥
 
ty≥
;

739 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
dequeue
, &
åb
, 
TRB_SIZE
);

740 
	`À64_to_˝us
(&
åb
.
∑ømëî
);

741 
	`À32_to_˝us
(&
åb
.
°©us
);

742 
	`À32_to_˝us
(&
åb
.
c⁄åﬁ
);

744 i‡((
åb
.
c⁄åﬁ
 & 
TRB_C
Ë!
ccs
) {

745  -
Àngth
;

748 
ty≥
 = 
	`TRB_TYPE
(
åb
);

750 i‡(
ty≥
 =
TR_LINK
) {

751 
dequeue
 = 
	`xhci_mask64
(
åb
.
∑ømëî
);

752 i‡(
åb
.
c⁄åﬁ
 & 
TRB_LK_TC
) {

753 
ccs
 = !ccs;

758 
Àngth
 += 1;

759 
dequeue
 +
TRB_SIZE
;

761 i‡(
ty≥
 =
TR_SETUP
) {

762 
c⁄åﬁ_td_£t
 = 1;

763 } i‡(
ty≥
 =
TR_STATUS
) {

764 
c⁄åﬁ_td_£t
 = 0;

767 i‡(!
c⁄åﬁ_td_£t
 && !(
åb
.
c⁄åﬁ
 & 
TRB_TR_CH
)) {

768  
Àngth
;

771 
	}
}

773 
	$xhci_î_ª£t
(
XHCISèã
 *
xhci
)

775 
XHCIEvRögSeg
 
£g
;

778 i‡(
xhci
->
î°sz
 != 1) {

779 
	`Ârötf
(
°dîr
, "xhci: invÆid vÆuêf‹ ERSTSZ: %d\n", 
xhci
->
î°sz
);

780 
	`xhci_dõ
(
xhci
);

783 
dma_addr_t
 
î°ba
 = 
	`xhci_addr64
(
xhci
->
î°ba_low
, xhci->
î°ba_high
);

784 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
î°ba
, &
£g
, (seg));

785 
	`À32_to_˝us
(&
£g
.
addr_low
);

786 
	`À32_to_˝us
(&
£g
.
addr_high
);

787 
	`À32_to_˝us
(&
£g
.
size
);

788 i‡(
£g
.
size
 < 16 || seg.size > 4096) {

789 
	`Ârötf
(
°dîr
, "xhci: invÆid vÆuêf‹ segmíàsize: %d\n", 
£g
.
size
);

790 
	`xhci_dõ
(
xhci
);

793 
xhci
->
î_°¨t
 = 
	`xhci_addr64
(
£g
.
addr_low
, seg.
addr_high
);

794 
xhci
->
î_size
 = 
£g
.
size
;

796 
xhci
->
î_ï_idx
 = 0;

797 
xhci
->
î_pcs
 = 1;

798 
xhci
->
î_fuŒ
 = 0;

800 
	`DPRINTF
("xhci:Évíàrög:" 
DMA_ADDR_FMT
 " [%d]\n",

801 
xhci
->
î_°¨t
, xhci->
î_size
);

802 
	}
}

804 
	$xhci_run
(
XHCISèã
 *
xhci
)

806 
	`åa˚_usb_xhci_run
();

807 
xhci
->
usb°s
 &~
USBSTS_HCH
;

808 
	}
}

810 
	$xhci_°›
(
XHCISèã
 *
xhci
)

812 
	`åa˚_usb_xhci_°›
();

813 
xhci
->
usb°s
 |
USBSTS_HCH
;

814 
xhci
->
¸¸_low
 &~
CRCR_CRR
;

815 
	}
}

817 
	$xhci_£t_ï_°©e
(
XHCISèã
 *
xhci
, 
XHCIEPC⁄ãxt
 *
ï˘x
,

818 
uöt32_t
 
°©e
)

820 
uöt32_t
 
˘x
[5];

821 i‡(
ï˘x
->
°©e
 == state) {

825 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
ï˘x
->
p˘x
, 
˘x
, (ctx));

826 
˘x
[0] &~
EP_STATE_MASK
;

827 
˘x
[0] |
°©e
;

828 
˘x
[2] = 
ï˘x
->
rög
.
dequeue
 |Ép˘x->rög.
ccs
;

829 
˘x
[3] = (
ï˘x
->
rög
.
dequeue
 >> 16) >> 16;

830 
	`DPRINTF
("xhci: sëÉp˘x: " 
DMA_ADDR_FMT
 " state=%d dequeue=%08x%08x\n",

831 
ï˘x
->
p˘x
, 
°©e
, 
˘x
[3], ctx[2]);

832 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
ï˘x
->
p˘x
, 
˘x
, (ctx));

833 
ï˘x
->
°©e
 = state;

834 
	}
}

836 
TRBCCode
 
	$xhci_íabÀ_ï
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

837 
ïid
, 
dma_addr_t
 
p˘x
,

838 
uöt32_t
 *
˘x
)

840 
XHCISlŸ
 *
¶Ÿ
;

841 
XHCIEPC⁄ãxt
 *
ï˘x
;

842 
dma_addr_t
 
dequeue
;

843 
i
;

845 
	`åa˚_usb_xhci_ï_íabÀ
(
¶Ÿid
, 
ïid
);

846 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

847 
	`as£π
(
ïid
 >= 1 &&Épid <= 31);

849 
¶Ÿ
 = &
xhci
->
¶Ÿs
[
¶Ÿid
-1];

850 i‡(
¶Ÿ
->
ïs
[
ïid
-1]) {

851 
	`Ârötf
(
°dîr
, "xhci: slŸ %dÉ∞%dáÃódyÉ«bÀd!\n", 
¶Ÿid
, 
ïid
);

852  
CC_TRB_ERROR
;

855 
ï˘x
 = 
	`g_mÆloc
((
XHCIEPC⁄ãxt
));

856 
	`mem£t
(
ï˘x
, 0, (
XHCIEPC⁄ãxt
));

858 
¶Ÿ
->
ïs
[
ïid
-1] = 
ï˘x
;

860 
dequeue
 = 
	`xhci_addr64
(
˘x
[2] & ~0xf, ctx[3]);

861 
	`xhci_rög_öô
(
xhci
, &
ï˘x
->
rög
, 
dequeue
);

862 
ï˘x
->
rög
.
ccs
 = 
˘x
[2] & 1;

864 
ï˘x
->
ty≥
 = (
˘x
[1] >> 
EP_TYPE_SHIFT
Ë& 
EP_TYPE_MASK
;

865 
	`DPRINTF
("xhci:Éndpoöà%d.%dÅy≥ i†%d\n", 
ïid
/2,Épid%2, 
ï˘x
->
ty≥
);

866 
ï˘x
->
p˘x
 =Öctx;

867 
ï˘x
->
max_psize
 = 
˘x
[1]>>16;

868 
ï˘x
->
max_psize
 *1+((
˘x
[1]>>8)&0xff);

869 
ï˘x
->
has_bg
 = 
Ál£
;

870 i‡(
ï˘x
->
ty≥
 =
ET_ISO_IN
) {

871 
ï˘x
->
has_bg
 = 
åue
;

873 
	`DPRINTF
("xhci:Éndpoint %d.%d maxÅransaction (burst) size is %d\n",

874 
ïid
/2,Épid%2, 
ï˘x
->
max_psize
);

875 
i
 = 0; i < 
	`ARRAY_SIZE
(
ï˘x
->
å™s„rs
); i++) {

876 
	`usb_∑ckë_öô
(&
ï˘x
->
å™s„rs
[
i
].
∑ckë
);

879 
ï˘x
->
°©e
 = 
EP_RUNNING
;

880 
˘x
[0] &~
EP_STATE_MASK
;

881 
˘x
[0] |
EP_RUNNING
;

883  
CC_SUCCESS
;

884 
	}
}

886 
	$xhci_ï_nuke_x„rs
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

887 
ïid
)

889 
XHCISlŸ
 *
¶Ÿ
;

890 
XHCIEPC⁄ãxt
 *
ï˘x
;

891 
i
, 
x„ri
, 
kûÀd
 = 0;

892 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

893 
	`as£π
(
ïid
 >= 1 &&Épid <= 31);

895 
	`DPRINTF
("xhci_ï_nuke_x„rs(%d, %d)\n", 
¶Ÿid
, 
ïid
);

897 
¶Ÿ
 = &
xhci
->
¶Ÿs
[
¶Ÿid
-1];

899 i‡(!
¶Ÿ
->
ïs
[
ïid
-1]) {

903 
ï˘x
 = 
¶Ÿ
->
ïs
[
ïid
-1];

905 
x„ri
 = 
ï˘x
->
√xt_x„r
;

906 
i
 = 0; i < 
TD_QUEUE
; i++) {

907 
XHCITøns„r
 *
t
 = &
ï˘x
->
å™s„rs
[
x„ri
];

908 i‡(
t
->
ru¬ög_async
) {

909 
	`usb_ˇn˚l_∑ckë
(&
t
->
∑ckë
);

910 
t
->
ru¬ög_async
 = 0;

911 
t
->
ˇn˚Œed
 = 1;

912 
	`DPRINTF
("xhci: c™˚ŒögÅøns„∏%d, waôög f‹ iàtÿcom∂ëe...\n", 
i
);

913 
kûÀd
++;

915 i‡(
t
->
ru¬ög_ªåy
) {

916 
t
->
ru¬ög_ªåy
 = 0;

917 
ï˘x
->
ªåy
 = 
NULL
;

919 i‡(
t
->
backgrounded
) {

920 
t
->
backgrounded
 = 0;

922 i‡(
t
->
åbs
) {

923 
	`g_‰ì
(
t
->
åbs
);

925 i‡(
t
->
d©a
) {

926 
	`g_‰ì
(
t
->
d©a
);

929 
t
->
åbs
 = 
NULL
;

930 
t
->
d©a
 = 
NULL
;

931 
t
->
åb_cou¡
 =Å->
åb_Ælo˚d
 = 0;

932 
t
->
d©a_Àngth
 =Å->
d©a_Ælo˚d
 = 0;

933 
x„ri
 = (x„rò+ 1Ë% 
TD_QUEUE
;

935 i‡(
ï˘x
->
has_bg
) {

936 
x„ri
 = 
ï˘x
->
√xt_bg
;

937 
i
 = 0; i < 
BG_XFERS
; i++) {

938 
XHCITøns„r
 *
t
 = &
ï˘x
->
bg_å™s„rs
[
x„ri
];

939 i‡(
t
->
ru¬ög_async
) {

940 
	`usb_ˇn˚l_∑ckë
(&
t
->
∑ckë
);

941 
t
->
ru¬ög_async
 = 0;

942 
t
->
ˇn˚Œed
 = 1;

943 
	`DPRINTF
("xhci: c™˚Œög bgÅøns„∏%d, waôög f‹ iàtÿcom∂ëe...\n", 
i
);

944 
kûÀd
++;

946 i‡(
t
->
d©a
) {

947 
	`g_‰ì
(
t
->
d©a
);

950 
t
->
d©a
 = 
NULL
;

951 
x„ri
 = (x„rò+ 1Ë% 
BG_XFERS
;

954  
kûÀd
;

955 
	}
}

957 
TRBCCode
 
	$xhci_dißbÀ_ï
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

958 
ïid
)

960 
XHCISlŸ
 *
¶Ÿ
;

961 
XHCIEPC⁄ãxt
 *
ï˘x
;

963 
	`åa˚_usb_xhci_ï_dißbÀ
(
¶Ÿid
, 
ïid
);

964 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

965 
	`as£π
(
ïid
 >= 1 &&Épid <= 31);

967 
¶Ÿ
 = &
xhci
->
¶Ÿs
[
¶Ÿid
-1];

969 i‡(!
¶Ÿ
->
ïs
[
ïid
-1]) {

970 
	`DPRINTF
("xhci: slŸ %dÉ∞%dáÃódy dißbÀd\n", 
¶Ÿid
, 
ïid
);

971  
CC_SUCCESS
;

974 
	`xhci_ï_nuke_x„rs
(
xhci
, 
¶Ÿid
, 
ïid
);

976 
ï˘x
 = 
¶Ÿ
->
ïs
[
ïid
-1];

978 
	`xhci_£t_ï_°©e
(
xhci
, 
ï˘x
, 
EP_DISABLED
);

980 
	`g_‰ì
(
ï˘x
);

981 
¶Ÿ
->
ïs
[
ïid
-1] = 
NULL
;

983  
CC_SUCCESS
;

984 
	}
}

986 
TRBCCode
 
	$xhci_°›_ï
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

987 
ïid
)

989 
XHCISlŸ
 *
¶Ÿ
;

990 
XHCIEPC⁄ãxt
 *
ï˘x
;

992 
	`åa˚_usb_xhci_ï_°›
(
¶Ÿid
, 
ïid
);

993 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

995 i‡(
ïid
 < 1 ||Épid > 31) {

996 
	`Ârötf
(
°dîr
, "xhci: badÉ∞%d\n", 
ïid
);

997  
CC_TRB_ERROR
;

1000 
¶Ÿ
 = &
xhci
->
¶Ÿs
[
¶Ÿid
-1];

1002 i‡(!
¶Ÿ
->
ïs
[
ïid
-1]) {

1003 
	`DPRINTF
("xhci: slŸ %dÉ∞%dÇŸÉ«bÀd\n", 
¶Ÿid
, 
ïid
);

1004  
CC_EP_NOT_ENABLED_ERROR
;

1007 i‡(
	`xhci_ï_nuke_x„rs
(
xhci
, 
¶Ÿid
, 
ïid
) > 0) {

1008 
	`Ârötf
(
°dîr
, "xhci: FIXME:Éndpoint stopped w/ xfersÑunning, "

1012 
ï˘x
 = 
¶Ÿ
->
ïs
[
ïid
-1];

1014 
	`xhci_£t_ï_°©e
(
xhci
, 
ï˘x
, 
EP_STOPPED
);

1016  
CC_SUCCESS
;

1017 
	}
}

1019 
TRBCCode
 
	$xhci_ª£t_ï
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

1020 
ïid
)

1022 
XHCISlŸ
 *
¶Ÿ
;

1023 
XHCIEPC⁄ãxt
 *
ï˘x
;

1024 
USBDevi˚
 *
dev
;

1026 
	`åa˚_usb_xhci_ï_ª£t
(
¶Ÿid
, 
ïid
);

1027 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

1029 i‡(
ïid
 < 1 ||Épid > 31) {

1030 
	`Ârötf
(
°dîr
, "xhci: badÉ∞%d\n", 
ïid
);

1031  
CC_TRB_ERROR
;

1034 
¶Ÿ
 = &
xhci
->
¶Ÿs
[
¶Ÿid
-1];

1036 i‡(!
¶Ÿ
->
ïs
[
ïid
-1]) {

1037 
	`DPRINTF
("xhci: slŸ %dÉ∞%dÇŸÉ«bÀd\n", 
¶Ÿid
, 
ïid
);

1038  
CC_EP_NOT_ENABLED_ERROR
;

1041 
ï˘x
 = 
¶Ÿ
->
ïs
[
ïid
-1];

1043 i‡(
ï˘x
->
°©e
 !
EP_HALTED
) {

1044 
	`Ârötf
(
°dîr
, "xhci:Ñeset EP while EP %dÇot halted (%d)\n",

1045 
ïid
, 
ï˘x
->
°©e
);

1046  
CC_CONTEXT_STATE_ERROR
;

1049 i‡(
	`xhci_ï_nuke_x„rs
(
xhci
, 
¶Ÿid
, 
ïid
) > 0) {

1050 
	`Ârötf
(
°dîr
, "xhci: FIXME:ÉndpointÑeset w/ xfersÑunning, "

1054 
uöt8_t
 
ï
 = 
ïid
>>1;

1056 i‡(
ïid
 & 1) {

1057 
ï
 |= 0x80;

1060 
dev
 = 
xhci
->
p‹ts
[xhci->
¶Ÿs
[
¶Ÿid
-1].
p‹t
-1].port.dev;

1061 i‡(!
dev
) {

1062  
CC_USB_TRANSACTION_ERROR
;

1065 
	`xhci_£t_ï_°©e
(
xhci
, 
ï˘x
, 
EP_STOPPED
);

1067  
CC_SUCCESS
;

1068 
	}
}

1070 
TRBCCode
 
	$xhci_£t_ï_dequeue
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

1071 
ïid
, 
uöt64_t
 
pdequeue
)

1073 
XHCISlŸ
 *
¶Ÿ
;

1074 
XHCIEPC⁄ãxt
 *
ï˘x
;

1075 
dma_addr_t
 
dequeue
;

1077 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

1079 i‡(
ïid
 < 1 ||Épid > 31) {

1080 
	`Ârötf
(
°dîr
, "xhci: badÉ∞%d\n", 
ïid
);

1081  
CC_TRB_ERROR
;

1084 
	`DPRINTF
("xhci_£t_ï_dequeue(%d, %d, %016"
PRIx64
")\n", 
¶Ÿid
, 
ïid
, 
pdequeue
);

1085 
dequeue
 = 
	`xhci_mask64
(
pdequeue
);

1087 
¶Ÿ
 = &
xhci
->
¶Ÿs
[
¶Ÿid
-1];

1089 i‡(!
¶Ÿ
->
ïs
[
ïid
-1]) {

1090 
	`DPRINTF
("xhci: slŸ %dÉ∞%dÇŸÉ«bÀd\n", 
¶Ÿid
, 
ïid
);

1091  
CC_EP_NOT_ENABLED_ERROR
;

1094 
ï˘x
 = 
¶Ÿ
->
ïs
[
ïid
-1];

1097 i‡(
ï˘x
->
°©e
 !
EP_STOPPED
) {

1098 
	`Ârötf
(
°dîr
, "xhci: së EP dequeuêpoöã∏whûêEP %dÇŸ st›≥d\n", 
ïid
);

1099  
CC_CONTEXT_STATE_ERROR
;

1102 
	`xhci_rög_öô
(
xhci
, &
ï˘x
->
rög
, 
dequeue
 & ~0xF);

1103 
ï˘x
->
rög
.
ccs
 = 
dequeue
 & 1;

1105 
	`xhci_£t_ï_°©e
(
xhci
, 
ï˘x
, 
EP_STOPPED
);

1107  
CC_SUCCESS
;

1108 
	}
}

1110 
	$xhci_x„r_d©a
(
XHCITøns„r
 *
x„r
, 
uöt8_t
 *
d©a
,

1111 
Àngth
, 
boﬁ
 
ö_x„r
, boﬁ 
out_x„r
,

1112 
boﬁ
 
ªp‹t
)

1114 
i
;

1115 
uöt32_t
 
edéa
 = 0;

1116 
å™s„ºed
 = 0;

1117 
À·
 = 
Àngth
;

1118 
boﬁ
 
ªp‹ãd
 = 0;

1119 
boﬁ
 
sh‹çkt
 = 0;

1120 
XHCIEvít
 
evít
 = {
ER_TRANSFER
, 
CC_SUCCESS
};

1121 
XHCISèã
 *
xhci
 = 
x„r
->xhci;

1123 
	`DPRINTF
("xhci_xfer_data(len=%d, in_xfer=%d, out_xfer=%d,Ñeport=%d)\n",

1124 
Àngth
, 
ö_x„r
, 
out_x„r
, 
ªp‹t
);

1126 
	`as£π
(!(
ö_x„r
 && 
out_x„r
));

1128 
i
 = 0; i < 
x„r
->
åb_cou¡
; i++) {

1129 
XHCITRB
 *
åb
 = &
x„r
->
åbs
[
i
];

1130 
dma_addr_t
 
addr
;

1131 
chunk
 = 0;

1133 
	`TRB_TYPE
(*
åb
)) {

1134 
TR_DATA
:

1135 i‡((!(
åb
->
c⁄åﬁ
 & 
TRB_TR_DIR
)Ë!(!
ö_x„r
)) {

1136 
	`Ârötf
(
°dîr
, "xhci: data direction mismatch for TR_DATA\n");

1137 
	`xhci_dõ
(
xhci
);

1138  
å™s„ºed
;

1141 
TR_NORMAL
:

1142 
TR_ISOCH
:

1143 
addr
 = 
	`xhci_mask64
(
åb
->
∑ømëî
);

1144 
chunk
 = 
åb
->
°©us
 & 0x1ffff;

1145 i‡(
chunk
 > 
À·
) {

1146 
chunk
 = 
À·
;

1147 
sh‹çkt
 = 1;

1149 i‡(
ö_x„r
 || 
out_x„r
) {

1150 i‡(
åb
->
c⁄åﬁ
 & 
TRB_TR_IDT
) {

1151 
uöt64_t
 
id©a
;

1152 i‡(
chunk
 > 8 || 
ö_x„r
) {

1153 
	`Ârötf
(
°dîr
, "xhci: invalid immediate data TRB\n");

1154 
	`xhci_dõ
(
xhci
);

1155  
å™s„ºed
;

1157 
id©a
 = 
	`À64_to_˝u
(
åb
->
∑ømëî
);

1158 
	`mem˝y
(
d©a
, &
id©a
, 
chunk
);

1160 
	`DPRINTF
("xhci_xfer_data:Ñ/w(%d) %d bytesát "

1161 
DMA_ADDR_FMT
 "\n", 
ö_x„r
, 
chunk
, 
addr
);

1162 i‡(
ö_x„r
) {

1163 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
addr
, 
d©a
, 
chunk
);

1165 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
addr
, 
d©a
, 
chunk
);

1167 #ifde‡
DEBUG_DATA


1168 
cou¡
 = 
chunk
;

1169 
i
;

1170 i‡(
cou¡
 > 16) {

1171 
cou¡
 = 16;

1173 
	`DPRINTF
(" ::");

1174 
i
 = 0; i < 
cou¡
; i++) {

1175 
	`DPRINTF
(" %02x", 
d©a
[
i
]);

1177 
	`DPRINTF
("\n");

1181 
À·
 -
chunk
;

1182 
d©a
 +
chunk
;

1183 
edéa
 +
chunk
;

1184 
å™s„ºed
 +
chunk
;

1186 
TR_STATUS
:

1187 
ªp‹ãd
 = 0;

1188 
sh‹çkt
 = 0;

1192 i‡(
ªp‹t
 && !
ªp‹ãd
 && (
åb
->
c⁄åﬁ
 & 
TRB_TR_IOC
 ||

1193 (
sh‹çkt
 && (
åb
->
c⁄åﬁ
 & 
TRB_TR_ISP
)))) {

1194 
evít
.
¶Ÿid
 = 
x„r
->slotid;

1195 
evít
.
ïid
 = 
x„r
->epid;

1196 
evít
.
Àngth
 = (
åb
->
°©us
 & 0x1ffffË- 
chunk
;

1197 
evít
.
Êags
 = 0;

1198 
evít
.
±r
 = 
åb
->
addr
;

1199 i‡(
x„r
->
°©us
 =
CC_SUCCESS
) {

1200 
evít
.
ccode
 = 
sh‹çkt
 ? 
CC_SHORT_PACKET
 : 
CC_SUCCESS
;

1202 
evít
.
ccode
 = 
x„r
->
°©us
;

1204 i‡(
	`TRB_TYPE
(*
åb
Ë=
TR_EVDATA
) {

1205 
evít
.
±r
 = 
åb
->
∑ømëî
;

1206 
evít
.
Êags
 |
TRB_EV_ED
;

1207 
evít
.
Àngth
 = 
edéa
 & 0xffffff;

1208 
	`DPRINTF
("xhci_x„r_d©a: EDTLA=%d\n", 
evít
.
Àngth
);

1209 
edéa
 = 0;

1211 
	`xhci_evít
(
xhci
, &
evít
);

1212 
ªp‹ãd
 = 1;

1215  
å™s„ºed
;

1216 
	}
}

1218 
	$xhci_°Æl_ï
(
XHCITøns„r
 *
x„r
)

1220 
XHCISèã
 *
xhci
 = 
x„r
->xhci;

1221 
XHCISlŸ
 *
¶Ÿ
 = &
xhci
->
¶Ÿs
[
x„r
->
¶Ÿid
-1];

1222 
XHCIEPC⁄ãxt
 *
ï˘x
 = 
¶Ÿ
->
ïs
[
x„r
->
ïid
-1];

1224 
ï˘x
->
rög
.
dequeue
 = 
x„r
->
åbs
[0].
addr
;

1225 
ï˘x
->
rög
.
ccs
 = 
x„r
->
åbs
[0].ccs;

1226 
	`xhci_£t_ï_°©e
(
xhci
, 
ï˘x
, 
EP_HALTED
);

1227 
	`DPRINTF
("xhci: sèŒed slŸ %dÉ∞%d\n", 
x„r
->
¶Ÿid
, x„r->
ïid
);

1228 
	`DPRINTF
("xhci: wû»c⁄töuê© "
DMA_ADDR_FMT
"\n", 
ï˘x
->
rög
.
dequeue
);

1229 
	}
}

1231 
xhci_submô
(
XHCISèã
 *
xhci
, 
XHCITøns„r
 *
x„r
,

1232 
XHCIEPC⁄ãxt
 *
ï˘x
);

1234 
	$xhci_bg_upd©e
(
XHCISèã
 *
xhci
, 
XHCIEPC⁄ãxt
 *
ï˘x
)

1236 i‡(
ï˘x
->
bg_upd©ög
) {

1239 
	`DPRINTF
("xhci_bg_upd©e(%p, %p)\n", 
xhci
, 
ï˘x
);

1240 
	`as£π
(
ï˘x
->
has_bg
);

1241 
	`DPRINTF
("xhci: fg=%d bg=%d\n", 
ï˘x
->
comp_x„r
,Ép˘x->
√xt_bg
);

1242 
ï˘x
->
bg_upd©ög
 = 1;

1243 
ï˘x
->
å™s„rs
[ï˘x->
comp_x„r
].
backgrounded
 &&

1244 
ï˘x
->
bg_å™s„rs
[ï˘x->
√xt_bg
].
com∂ëe
) {

1245 
XHCITøns„r
 *
fg
 = &
ï˘x
->
å™s„rs
[ï˘x->
comp_x„r
];

1246 
XHCITøns„r
 *
bg
 = &
ï˘x
->
bg_å™s„rs
[ï˘x->
√xt_bg
];

1248 
	`DPRINTF
("xhci: completing fg %d from bg %d.%d (stat: %d)\n",

1249 
ï˘x
->
comp_x„r
,Ép˘x->
√xt_bg
, 
bg
->
cur_pkt
,

1250 
bg
->
usbx„r
->
iso_∑ckë_desc
[bg->
cur_pkt
].
°©us


1253 
	`as£π
(
ï˘x
->
ty≥
 =
ET_ISO_IN
);

1254 
	`as£π
(
bg
->
iso_x„r
);

1255 
	`as£π
(
bg
->
ö_x„r
);

1256 
uöt8_t
 *
p
 = 
bg
->
d©a
 + bg->
cur_pkt
 * bg->
pktsize
;

1258 
Àn
 = 
bg
->
usbx„r
->
iso_∑ckë_desc
[bg->
cur_pkt
].
a˘uÆ_Àngth
;

1259 
fg
->
°©us
 = 
	`libusb_to_ccode
(
bg
->
usbx„r
->
iso_∑ckë_desc
[bg->
cur_pkt
].status);

1261 
Àn
 = 0;

1262 
	`FIXME
();

1264 
fg
->
com∂ëe
 = 1;

1265 
fg
->
backgrounded
 = 0;

1267 i‡(
fg
->
°©us
 =
CC_STALL_ERROR
) {

1268 
	`xhci_°Æl_ï
(
fg
);

1271 
	`xhci_x„r_d©a
(
fg
, 
p
, 
Àn
, 1, 0, 1);

1273 
ï˘x
->
comp_x„r
++;

1274 i‡(
ï˘x
->
comp_x„r
 =
TD_QUEUE
) {

1275 
ï˘x
->
comp_x„r
 = 0;

1277 
	`DPRINTF
("√xàfg x„r: %d\n", 
ï˘x
->
comp_x„r
);

1278 
bg
->
cur_pkt
++;

1279 i‡(
bg
->
cur_pkt
 =bg->
pkts
) {

1280 
bg
->
com∂ëe
 = 0;

1281 i‡(
	`xhci_submô
(
xhci
, 
bg
, 
ï˘x
) < 0) {

1282 
	`Ârötf
(
°dîr
, "xhci: bgÑesubmit failed\n");

1284 
ï˘x
->
√xt_bg
++;

1285 i‡(
ï˘x
->
√xt_bg
 =
BG_XFERS
) {

1286 
ï˘x
->
√xt_bg
 = 0;

1288 
	`DPRINTF
("√xàbg x„r: %d\n", 
ï˘x
->
√xt_bg
);

1290 
	`xhci_kick_ï
(
xhci
, 
fg
->
¶Ÿid
, fg->
ïid
);

1293 
ï˘x
->
bg_upd©ög
 = 0;

1294 
	}
}

1297 
	$xhci_x„r_cb
(
libusb_å™s„r
 *
å™s„r
)

1299 
XHCISèã
 *
xhci
;

1300 
XHCITøns„r
 *
x„r
;

1302 
x„r
 = (
XHCITøns„r
 *)
å™s„r
->
u£r_d©a
;

1303 
xhci
 = 
x„r
->xhci;

1305 
	`DPRINTF
("xhci_x„r_cb(¶Ÿ=%d,Ép=%d, sètus=%d)\n", 
x„r
->
¶Ÿid
,

1306 
x„r
->
ïid
, 
å™s„r
->
°©us
);

1308 
	`as£π
(
x„r
->
¶Ÿid
 >1 && x„r->¶Ÿid <
MAXSLOTS
);

1309 
	`as£π
(
x„r
->
ïid
 >= 1 && xfer->epid <= 31);

1311 i‡(
x„r
->
ˇn˚Œed
) {

1312 
	`DPRINTF
("xhci:Åransfer cancelled,ÇotÑeportingánything\n");

1313 
x„r
->
ru¬ög
 = 0;

1317 
XHCIEPC⁄ãxt
 *
ï˘x
;

1318 
XHCISlŸ
 *
¶Ÿ
;

1319 
¶Ÿ
 = &
xhci
->
¶Ÿs
[
x„r
->
¶Ÿid
-1];

1320 
	`as£π
(
¶Ÿ
->
ïs
[
x„r
->
ïid
-1]);

1321 
ï˘x
 = 
¶Ÿ
->
ïs
[
x„r
->
ïid
-1];

1323 i‡(
x„r
->
bg_x„r
) {

1324 
	`DPRINTF
("xhci: backgroundÅransfer, updating\n");

1325 
x„r
->
com∂ëe
 = 1;

1326 
x„r
->
ru¬ög
 = 0;

1327 
	`xhci_bg_upd©e
(
xhci
, 
ï˘x
);

1331 i‡(
x„r
->
iso_x„r
) {

1332 
å™s„r
->
°©us
 =Åøns„r->
iso_∑ckë_desc
[0].status;

1333 
å™s„r
->
a˘uÆ_Àngth
 =Åøns„r->
iso_∑ckë_desc
[0].actual_length;

1336 
x„r
->
°©us
 = 
	`libusb_to_ccode
(
å™s„r
->status);

1338 
x„r
->
com∂ëe
 = 1;

1339 
x„r
->
ru¬ög
 = 0;

1341 i‡(
å™s„r
->
°©us
 =
LIBUSB_TRANSFER_STALL
)

1342 
	`xhci_°Æl_ï
(
xhci
, 
ï˘x
, 
x„r
);

1344 
	`DPRINTF
("xhci:Åøns„∏a˘uÆÜígth = %d\n", 
å™s„r
->
a˘uÆ_Àngth
);

1346 i‡(
x„r
->
ö_x„r
) {

1347 i‡(
x„r
->
ïid
 == 1) {

1348 
	`xhci_x„r_d©a
(
xhci
, 
x„r
, x„r->
d©a
 + 8,

1349 
å™s„r
->
a˘uÆ_Àngth
, 1, 0, 1);

1351 
	`xhci_x„r_d©a
(
xhci
, 
x„r
, x„r->
d©a
,

1352 
å™s„r
->
a˘uÆ_Àngth
, 1, 0, 1);

1355 
	`xhci_x„r_d©a
(
xhci
, 
x„r
, 
NULL
, 
å™s„r
->
a˘uÆ_Àngth
, 0, 0, 1);

1358 
	`xhci_kick_ï
(
xhci
, 
x„r
->
¶Ÿid
, x„r->
ïid
);

1359 
	}
}

1361 
	$xhci_hÀ_c⁄åﬁ
(
XHCISèã
 *
xhci
, 
XHCITøns„r
 *
x„r
,

1362 
uöt8_t
 
bmReque°Ty≥
, uöt8_à
bReque°
,

1363 
uöt16_t
 
wVÆue
, uöt16_à
wIndex
, uöt16_à
wLígth
)

1365 
uöt16_t
 
ty≥_ªq
 = (
bmReque°Ty≥
 << 8Ë| 
bReque°
;

1367 
ty≥_ªq
) {

1368 0x0000 | 
USB_REQ_SET_CONFIGURATION
:

1369 
	`DPRINTF
("xhci: HLE switch configuration\n");

1370  
	`xhci_swôch_c⁄fig
(
xhci
, 
x„r
->
¶Ÿid
, 
wVÆue
) == 0;

1371 0x0100 | 
USB_REQ_SET_INTERFACE
:

1372 
	`DPRINTF
("xhci: HLE set interfaceáltsetting\n");

1373  
	`xhci_£t_iÁ˚_Æt
(
xhci
, 
x„r
->
¶Ÿid
, 
wIndex
, 
wVÆue
) == 0;

1374 0x0200 | 
USB_REQ_CLEAR_FEATURE
:

1375 i‡(
wVÆue
 == 0) {

1376 
	`DPRINTF
("xhci: HLE clear halt\n");

1377  
	`xhci_˛ór_hÆt
(
xhci
, 
x„r
->
¶Ÿid
, 
wIndex
);

1379 0x0000 | 
USB_REQ_SET_ADDRESS
:

1380 
	`Ârötf
(
°dîr
, "xhci: warn: illegal SET_ADDRESSÑequest\n");

1385 
	}
}

1388 
	$xhci_£tup_∑ckë
(
XHCITøns„r
 *
x„r
, 
USBDevi˚
 *
dev
)

1390 
USBEndpoöt
 *
ï
;

1391 
dú
;

1393 
dú
 = 
x„r
->
ö_x„r
 ? 
USB_TOKEN_IN
 : 
USB_TOKEN_OUT
;

1394 
ï
 = 
	`usb_ï_gë
(
dev
, 
dú
, 
x„r
->
ïid
 >> 1);

1395 
	`usb_∑ckë_£tup
(&
x„r
->
∑ckë
, 
dú
, 
ï
, x„r->
åbs
[0].
addr
);

1396 
	`usb_∑ckë_addbuf
(&
x„r
->
∑ckë
, x„r->
d©a
, x„r->
d©a_Àngth
);

1397 
	`DPRINTF
("xhci: setupÖacketÖid 0x%xáddr %dÉp %d\n",

1398 
x„r
->
∑ckë
.
pid
, 
dev
->
addr
, 
ï
->
ƒ
);

1400 
	}
}

1402 
	$xhci_com∂ëe_∑ckë
(
XHCITøns„r
 *
x„r
, 
ªt
)

1404 i‡(
ªt
 =
USB_RET_ASYNC
) {

1405 
	`åa˚_usb_xhci_x„r_async
(
x„r
);

1406 
x„r
->
ru¬ög_async
 = 1;

1407 
x„r
->
ru¬ög_ªåy
 = 0;

1408 
x„r
->
com∂ëe
 = 0;

1409 
x„r
->
ˇn˚Œed
 = 0;

1411 } i‡(
ªt
 =
USB_RET_NAK
) {

1412 
	`åa˚_usb_xhci_x„r_«k
(
x„r
);

1413 
x„r
->
ru¬ög_async
 = 0;

1414 
x„r
->
ru¬ög_ªåy
 = 1;

1415 
x„r
->
com∂ëe
 = 0;

1416 
x„r
->
ˇn˚Œed
 = 0;

1419 
x„r
->
ru¬ög_async
 = 0;

1420 
x„r
->
ru¬ög_ªåy
 = 0;

1421 
x„r
->
com∂ëe
 = 1;

1424 i‡(
ªt
 >= 0) {

1425 
x„r
->
°©us
 = 
CC_SUCCESS
;

1426 
	`xhci_x„r_d©a
(
x„r
, x„r->
d©a
, 
ªt
, x„r->
ö_x„r
, 0, 1);

1427 
	`åa˚_usb_xhci_x„r_suc˚ss
(
x„r
, 
ªt
);

1432 
	`åa˚_usb_xhci_x„r_îr‹
(
x„r
, 
ªt
);

1433 
ªt
) {

1434 
USB_RET_NODEV
:

1435 
x„r
->
°©us
 = 
CC_USB_TRANSACTION_ERROR
;

1436 
	`xhci_x„r_d©a
(
x„r
, x„r->
d©a
, 0, x„r->
ö_x„r
, 0, 1);

1437 
	`xhci_°Æl_ï
(
x„r
);

1439 
USB_RET_STALL
:

1440 
x„r
->
°©us
 = 
CC_STALL_ERROR
;

1441 
	`xhci_x„r_d©a
(
x„r
, x„r->
d©a
, 0, x„r->
ö_x„r
, 0, 1);

1442 
	`xhci_°Æl_ï
(
x„r
);

1445 
	`Ârötf
(
°dîr
, "%s: FIXME:Ñë = %d\n", 
__FUNCTION__
, 
ªt
);

1446 
	`FIXME
();

1449 
	}
}

1451 
USBDevi˚
 *
	$xhci_föd_devi˚
(
XHCIP‹t
 *
p‹t
, 
uöt8_t
 
addr
)

1453 i‡(!(
p‹t
->
p‹tsc
 & 
PORTSC_PED
)) {

1454  
NULL
;

1456  
	`usb_föd_devi˚
(&
p‹t
->p‹t, 
addr
);

1457 
	}
}

1459 
	$xhci_fúe_˘l_å™s„r
(
XHCISèã
 *
xhci
, 
XHCITøns„r
 *
x„r
)

1461 
XHCITRB
 *
åb_£tup
, *
åb_°©us
;

1462 
uöt8_t
 
bmReque°Ty≥
;

1463 
uöt16_t
 
wLígth
;

1464 
XHCIP‹t
 *
p‹t
;

1465 
USBDevi˚
 *
dev
;

1466 
ªt
;

1468 
åb_£tup
 = &
x„r
->
åbs
[0];

1469 
åb_°©us
 = &
x„r
->
åbs
[x„r->
åb_cou¡
-1];

1471 
	`åa˚_usb_xhci_x„r_°¨t
(
x„r
, x„r->
¶Ÿid
, x„r->
ïid
,

1472 
åb_£tup
->
∑ømëî
 >> 48);

1475 i‡(
	`TRB_TYPE
(*
åb_°©us
Ë=
TR_EVDATA
 && 
x„r
->
åb_cou¡
 > 2) {

1476 
åb_°©us
--;

1480 i‡(
	`TRB_TYPE
(*
åb_£tup
Ë!
TR_SETUP
) {

1481 
	`Ârötf
(
°dîr
, "xhci:Ép0 first TDÇot SETUP: %d\n",

1482 
	`TRB_TYPE
(*
åb_£tup
));

1485 i‡(
	`TRB_TYPE
(*
åb_°©us
Ë!
TR_STATUS
) {

1486 
	`Ârötf
(
°dîr
, "xhci:Ép0Üast TDÇot STATUS: %d\n",

1487 
	`TRB_TYPE
(*
åb_°©us
));

1490 i‡(!(
åb_£tup
->
c⁄åﬁ
 & 
TRB_TR_IDT
)) {

1491 
	`Ârötf
(
°dîr
, "xhci: Setup TRB doesn't have IDT set\n");

1494 i‡((
åb_£tup
->
°©us
 & 0x1ffff) != 8) {

1495 
	`Ârötf
(
°dîr
, "xhci: Setup TRB has badÜength (%d)\n",

1496 (
åb_£tup
->
°©us
 & 0x1ffff));

1500 
bmReque°Ty≥
 = 
åb_£tup
->
∑ømëî
;

1501 
wLígth
 = 
åb_£tup
->
∑ømëî
 >> 48;

1503 i‡(
x„r
->
d©a
 && x„r->
d©a_Ælo˚d
 < 
wLígth
) {

1504 
x„r
->
d©a_Ælo˚d
 = 0;

1505 
	`g_‰ì
(
x„r
->
d©a
);

1506 
x„r
->
d©a
 = 
NULL
;

1508 i‡(!
x„r
->
d©a
) {

1509 
	`DPRINTF
("xhci:áŒo¯%d byã†d©a\n", 
wLígth
);

1510 
x„r
->
d©a
 = 
	`g_mÆloc
(
wLígth
+1);

1511 
x„r
->
d©a_Ælo˚d
 = 
wLígth
;

1513 
x„r
->
d©a_Àngth
 = 
wLígth
;

1515 
p‹t
 = &
xhci
->
p‹ts
[xhci->
¶Ÿs
[
x„r
->
¶Ÿid
-1].port-1];

1516 
dev
 = 
	`xhci_föd_devi˚
(
p‹t
, 
xhci
->
¶Ÿs
[
x„r
->
¶Ÿid
-1].
devaddr
);

1517 i‡(!
dev
) {

1518 
	`Ârötf
(
°dîr
, "xhci: slŸ %dÖ‹à%d ha†nÿdevi˚\n", 
x„r
->
¶Ÿid
,

1519 
xhci
->
¶Ÿs
[
x„r
->
¶Ÿid
-1].
p‹t
);

1523 
x„r
->
ö_x„r
 = 
bmReque°Ty≥
 & 
USB_DIR_IN
;

1524 
x„r
->
iso_x„r
 = 
Ál£
;

1526 
	`xhci_£tup_∑ckë
(
x„r
, 
dev
);

1527 
x„r
->
∑ckë
.
∑ømëî
 = 
åb_£tup
->parameter;

1528 i‡(!
x„r
->
ö_x„r
) {

1529 
	`xhci_x„r_d©a
(
x„r
, x„r->
d©a
, 
wLígth
, 0, 1, 0);

1532 
ªt
 = 
	`usb_h™dÀ_∑ckë
(
dev
, &
x„r
->
∑ckë
);

1534 
	`xhci_com∂ëe_∑ckë
(
x„r
, 
ªt
);

1535 i‡(!
x„r
->
ru¬ög_async
 && !x„r->
ru¬ög_ªåy
) {

1536 
	`xhci_kick_ï
(
xhci
, 
x„r
->
¶Ÿid
, x„r->
ïid
);

1539 
	}
}

1541 
	$xhci_submô
(
XHCISèã
 *
xhci
, 
XHCITøns„r
 *
x„r
, 
XHCIEPC⁄ãxt
 *
ï˘x
)

1543 
XHCIP‹t
 *
p‹t
;

1544 
USBDevi˚
 *
dev
;

1545 
ªt
;

1547 
	`DPRINTF
("xhci_submô(¶Ÿid=%d,ïid=%d)\n", 
x„r
->
¶Ÿid
, x„r->
ïid
);

1549 
x„r
->
ö_x„r
 = 
ï˘x
->
ty≥
>>2;

1551 i‡(
x„r
->
d©a
 && x„r->
d©a_Ælo˚d
 < x„r->
d©a_Àngth
) {

1552 
x„r
->
d©a_Ælo˚d
 = 0;

1553 
	`g_‰ì
(
x„r
->
d©a
);

1554 
x„r
->
d©a
 = 
NULL
;

1556 i‡(!
x„r
->
d©a
 && x„r->
d©a_Àngth
) {

1557 
	`DPRINTF
("xhci:áŒo¯%d byã†d©a\n", 
x„r
->
d©a_Àngth
);

1558 
x„r
->
d©a
 = 
	`g_mÆloc
(x„r->
d©a_Àngth
);

1559 
x„r
->
d©a_Ælo˚d
 = x„r->
d©a_Àngth
;

1561 i‡(
ï˘x
->
ty≥
 =
ET_ISO_IN
 ||Ép˘x->ty≥ =
ET_ISO_OUT
) {

1562 i‡(!
x„r
->
bg_x„r
) {

1563 
x„r
->
pkts
 = 1;

1566 
x„r
->
pkts
 = 0;

1569 
p‹t
 = &
xhci
->
p‹ts
[xhci->
¶Ÿs
[
x„r
->
¶Ÿid
-1].port-1];

1570 
dev
 = 
	`xhci_föd_devi˚
(
p‹t
, 
xhci
->
¶Ÿs
[
x„r
->
¶Ÿid
-1].
devaddr
);

1571 i‡(!
dev
) {

1572 
	`Ârötf
(
°dîr
, "xhci: slŸ %dÖ‹à%d ha†nÿdevi˚\n", 
x„r
->
¶Ÿid
,

1573 
xhci
->
¶Ÿs
[
x„r
->
¶Ÿid
-1].
p‹t
);

1577 
	`xhci_£tup_∑ckë
(
x„r
, 
dev
);

1579 
ï˘x
->
ty≥
) {

1580 
ET_INTR_OUT
:

1581 
ET_INTR_IN
:

1582 
ET_BULK_OUT
:

1583 
ET_BULK_IN
:

1585 
ET_ISO_OUT
:

1586 
ET_ISO_IN
:

1587 
	`FIXME
();

1590 
	`Ârötf
(
°dîr
, "xhci: unknown or unhandled EP "

1592 
ï˘x
->
ty≥
, 
x„r
->
ö_x„r
, x„r->
ïid
);

1596 i‡(!
x„r
->
ö_x„r
) {

1597 
	`xhci_x„r_d©a
(
x„r
, x„r->
d©a
, x„r->
d©a_Àngth
, 0, 1, 0);

1599 
ªt
 = 
	`usb_h™dÀ_∑ckë
(
dev
, &
x„r
->
∑ckë
);

1601 
	`xhci_com∂ëe_∑ckë
(
x„r
, 
ªt
);

1602 i‡(!
x„r
->
ru¬ög_async
 && !x„r->
ru¬ög_ªåy
) {

1603 
	`xhci_kick_ï
(
xhci
, 
x„r
->
¶Ÿid
, x„r->
ïid
);

1606 
	}
}

1608 
	$xhci_fúe_å™s„r
(
XHCISèã
 *
xhci
, 
XHCITøns„r
 *
x„r
, 
XHCIEPC⁄ãxt
 *
ï˘x
)

1610 
i
;

1611 
Àngth
 = 0;

1612 
XHCITRB
 *
åb
;

1614 
i
 = 0; i < 
x„r
->
åb_cou¡
; i++) {

1615 
åb
 = &
x„r
->
åbs
[
i
];

1616 i‡(
	`TRB_TYPE
(*
åb
Ë=
TR_NORMAL
 || TRB_TYPE(*åbË=
TR_ISOCH
) {

1617 
Àngth
 +
åb
->
°©us
 & 0x1ffff;

1621 
	`åa˚_usb_xhci_x„r_°¨t
(
x„r
, x„r->
¶Ÿid
, x„r->
ïid
, 
Àngth
);

1623 i‡(!
ï˘x
->
has_bg
) {

1624 
x„r
->
d©a_Àngth
 = 
Àngth
;

1625 
x„r
->
backgrounded
 = 0;

1626  
	`xhci_submô
(
xhci
, 
x„r
, 
ï˘x
);

1628 i‡(!
ï˘x
->
bg_ru¬ög
) {

1629 
i
 = 0; i < 
BG_XFERS
; i++) {

1630 
XHCITøns„r
 *
t
 = &
ï˘x
->
bg_å™s„rs
[
i
];

1631 
t
->
xhci
 = xhci;

1632 
t
->
ïid
 = 
x„r
->epid;

1633 
t
->
¶Ÿid
 = 
x„r
->slotid;

1634 
t
->
pkts
 = 
BG_PKTS
;

1635 
t
->
pktsize
 = 
ï˘x
->
max_psize
;

1636 
t
->
d©a_Àngth
 =Å->
pkts
 *Å->
pktsize
;

1637 
t
->
bg_x„r
 = 1;

1638 i‡(
	`xhci_submô
(
xhci
, 
t
, 
ï˘x
) < 0) {

1639 
	`Ârötf
(
°dîr
, "xhci: bg submit failed\n");

1643 
ï˘x
->
bg_ru¬ög
 = 1;

1645 
x„r
->
backgrounded
 = 1;

1646 
	`xhci_bg_upd©e
(
xhci
, 
ï˘x
);

1649 
	}
}

1651 
	$xhci_kick_ï
(
XHCISèã
 *
xhci
, 
¶Ÿid
, 
ïid
)

1653 
XHCIEPC⁄ãxt
 *
ï˘x
;

1654 
Àngth
;

1655 
i
;

1657 
	`åa˚_usb_xhci_ï_kick
(
¶Ÿid
, 
ïid
);

1658 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

1659 
	`as£π
(
ïid
 >= 1 &&Épid <= 31);

1661 i‡(!
xhci
->
¶Ÿs
[
¶Ÿid
-1].
íabÀd
) {

1662 
	`Ârötf
(
°dîr
, "xhci: xhci_kick_ï f‹ dißbÀd slŸ %d\n", 
¶Ÿid
);

1665 
ï˘x
 = 
xhci
->
¶Ÿs
[
¶Ÿid
-1].
ïs
[
ïid
-1];

1666 i‡(!
ï˘x
) {

1667 
	`Ârötf
(
°dîr
, "xhci: xhci_kick_ep for disabledÉndpoint %d,%d\n",

1668 
ïid
, 
¶Ÿid
);

1672 i‡(
ï˘x
->
ªåy
) {

1674 
XHCITøns„r
 *
x„r
 = 
ï˘x
->
ªåy
;

1675 
ªsu…
;

1677 
	`åa˚_usb_xhci_x„r_ªåy
(
x„r
);

1678 
	`as£π
(
x„r
->
ru¬ög_ªåy
);

1679 
	`xhci_£tup_∑ckë
(
x„r
, x„r->
∑ckë
.
ï
->
dev
);

1680 
ªsu…
 = 
	`usb_h™dÀ_∑ckë
(
x„r
->
∑ckë
.
ï
->
dev
, &xfer->packet);

1681 i‡(
ªsu…
 =
USB_RET_NAK
) {

1684 
	`xhci_com∂ëe_∑ckë
(
x„r
, 
ªsu…
);

1685 
	`as£π
(!
x„r
->
ru¬ög_ªåy
);

1686 
ï˘x
->
ªåy
 = 
NULL
;

1689 i‡(
ï˘x
->
°©e
 =
EP_HALTED
) {

1690 
	`DPRINTF
("xhci:Ép halted,ÇotÑunning schedule\n");

1694 
	`xhci_£t_ï_°©e
(
xhci
, 
ï˘x
, 
EP_RUNNING
);

1697 
XHCITøns„r
 *
x„r
 = &
ï˘x
->
å™s„rs
[ï˘x->
√xt_x„r
];

1698 i‡(
x„r
->
ru¬ög_async
 || x„r->
ru¬ög_ªåy
 || x„r->
backgrounded
) {

1701 
Àngth
 = 
	`xhci_rög_chaö_Àngth
(
xhci
, &
ï˘x
->
rög
);

1702 i‡(
Àngth
 < 0) {

1704 } i‡(
Àngth
 == 0) {

1707 i‡(
x„r
->
åbs
 && x„r->
åb_Ælo˚d
 < 
Àngth
) {

1708 
x„r
->
åb_cou¡
 = 0;

1709 
x„r
->
åb_Ælo˚d
 = 0;

1710 
	`g_‰ì
(
x„r
->
åbs
);

1711 
x„r
->
åbs
 = 
NULL
;

1713 i‡(!
x„r
->
åbs
) {

1714 
x„r
->
åbs
 = 
	`g_mÆloc
((
XHCITRB
Ë* 
Àngth
);

1715 
x„r
->
åb_Ælo˚d
 = 
Àngth
;

1717 
x„r
->
åb_cou¡
 = 
Àngth
;

1719 
i
 = 0; i < 
Àngth
; i++) {

1720 
	`as£π
(
	`xhci_rög_„tch
(
xhci
, &
ï˘x
->
rög
, &
x„r
->
åbs
[
i
], 
NULL
));

1722 
x„r
->
xhci
 = xhci;

1723 
x„r
->
ïid
 =Épid;

1724 
x„r
->
¶Ÿid
 = slotid;

1726 i‡(
ïid
 == 1) {

1727 i‡(
	`xhci_fúe_˘l_å™s„r
(
xhci
, 
x„r
) >= 0) {

1728 
ï˘x
->
√xt_x„r
 = (ï˘x->√xt_x„∏+ 1Ë% 
TD_QUEUE
;

1730 
	`Ârötf
(
°dîr
, "xhci:Érror firing CTLÅransfer\n");

1733 i‡(
	`xhci_fúe_å™s„r
(
xhci
, 
x„r
, 
ï˘x
) >= 0) {

1734 
ï˘x
->
√xt_x„r
 = (ï˘x->√xt_x„∏+ 1Ë% 
TD_QUEUE
;

1736 
	`Ârötf
(
°dîr
, "xhci:Érror firing dataÅransfer\n");

1740 i‡(
ï˘x
->
°©e
 =
EP_HALTED
) {

1743 i‡(
x„r
->
ru¬ög_ªåy
) {

1744 
	`DPRINTF
("xhci: xferÇacked, stopping schedule\n");

1745 
ï˘x
->
ªåy
 = 
x„r
;

1749 
	}
}

1751 
TRBCCode
 
	$xhci_íabÀ_¶Ÿ
(
XHCISèã
 *
xhci
, 
¶Ÿid
)

1753 
	`åa˚_usb_xhci_¶Ÿ_íabÀ
(
¶Ÿid
);

1754 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

1755 
xhci
->
¶Ÿs
[
¶Ÿid
-1].
íabÀd
 = 1;

1756 
xhci
->
¶Ÿs
[
¶Ÿid
-1].
p‹t
 = 0;

1757 
	`mem£t
(
xhci
->
¶Ÿs
[
¶Ÿid
-1].
ïs
, 0, (
XHCIEPC⁄ãxt
*)*31);

1759  
CC_SUCCESS
;

1760 
	}
}

1762 
TRBCCode
 
	$xhci_dißbÀ_¶Ÿ
(
XHCISèã
 *
xhci
, 
¶Ÿid
)

1764 
i
;

1766 
	`åa˚_usb_xhci_¶Ÿ_dißbÀ
(
¶Ÿid
);

1767 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

1769 
i
 = 1; i <= 31; i++) {

1770 i‡(
xhci
->
¶Ÿs
[
¶Ÿid
-1].
ïs
[
i
-1]) {

1771 
	`xhci_dißbÀ_ï
(
xhci
, 
¶Ÿid
, 
i
);

1775 
xhci
->
¶Ÿs
[
¶Ÿid
-1].
íabÀd
 = 0;

1776  
CC_SUCCESS
;

1777 
	}
}

1779 
TRBCCode
 
	$xhci_addªss_¶Ÿ
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

1780 
uöt64_t
 
pi˘x
, 
boﬁ
 
b§
)

1782 
XHCISlŸ
 *
¶Ÿ
;

1783 
USBDevi˚
 *
dev
;

1784 
dma_addr_t
 
i˘x
, 
o˘x
, 
dcbØp
;

1785 
uöt64_t
 
po˘x
;

1786 
uöt32_t
 
i˘l_˘x
[2];

1787 
uöt32_t
 
¶Ÿ_˘x
[4];

1788 
uöt32_t
 
ï0_˘x
[5];

1789 
p‹t
;

1790 
i
;

1791 
TRBCCode
 
ªs
;

1793 
	`åa˚_usb_xhci_¶Ÿ_addªss
(
¶Ÿid
);

1794 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

1796 
dcbØp
 = 
	`xhci_addr64
(
xhci
->
dcbØp_low
, xhci->
dcbØp_high
);

1797 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
dcbØp
 + 8*
¶Ÿid
, &
po˘x
, (poctx));

1798 
i˘x
 = 
	`xhci_mask64
(
pi˘x
);

1799 
o˘x
 = 
	`xhci_mask64
(
	`À64_to_˝u
(
po˘x
));

1801 
	`DPRINTF
("xhci: i≈uàc⁄ãxà© "
DMA_ADDR_FMT
"\n", 
i˘x
);

1802 
	`DPRINTF
("xhci: ouçuàc⁄ãxà© "
DMA_ADDR_FMT
"\n", 
o˘x
);

1804 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
i˘x
, 
i˘l_˘x
, (ictl_ctx));

1806 i‡(
i˘l_˘x
[0] != 0x0 || ictl_ctx[1] != 0x3) {

1807 
	`Ârötf
(
°dîr
, "xhci: invalid input context control %08x %08x\n",

1808 
i˘l_˘x
[0], ictl_ctx[1]);

1809  
CC_TRB_ERROR
;

1812 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
i˘x
+32, 
¶Ÿ_˘x
, (slot_ctx));

1813 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
i˘x
+64, 
ï0_˘x
, (ep0_ctx));

1815 
	`DPRINTF
("xhci: input slot context: %08x %08x %08x %08x\n",

1816 
¶Ÿ_˘x
[0], slot_ctx[1], slot_ctx[2], slot_ctx[3]);

1818 
	`DPRINTF
("xhci: inputÉp0 context: %08x %08x %08x %08x %08x\n",

1819 
ï0_˘x
[0],Ép0_ctx[1],Ép0_ctx[2],Ép0_ctx[3],Ép0_ctx[4]);

1821 
p‹t
 = (
¶Ÿ_˘x
[1]>>16) & 0xFF;

1822 
dev
 = 
xhci
->
p‹ts
[
p‹t
-1].port.dev;

1824 i‡(
p‹t
 < 1 ||Ö‹à> 
MAXPORTS
) {

1825 
	`Ârötf
(
°dîr
, "xhci: badÖ‹à%d\n", 
p‹t
);

1826  
CC_TRB_ERROR
;

1827 } i‡(!
dev
) {

1828 
	`Ârötf
(
°dîr
, "xhci:Ö‹à%dÇŸ c⁄√˘ed\n", 
p‹t
);

1829  
CC_USB_TRANSACTION_ERROR
;

1832 
i
 = 0; i < 
MAXSLOTS
; i++) {

1833 i‡(
xhci
->
¶Ÿs
[
i
].
p‹t
 ==Öort) {

1834 
	`Ârötf
(
°dîr
, "xhci:Öort %dálreadyássignedÅo slot %d\n",

1835 
p‹t
, 
i
+1);

1836  
CC_TRB_ERROR
;

1840 
¶Ÿ
 = &
xhci
->
¶Ÿs
[
¶Ÿid
-1];

1841 
¶Ÿ
->
p‹t
 =Öort;

1842 
¶Ÿ
->
˘x
 = 
o˘x
;

1844 i‡(
b§
) {

1845 
¶Ÿ_˘x
[3] = 
SLOT_DEFAULT
 << 
SLOT_STATE_SHIFT
;

1847 
¶Ÿ
->
devaddr
 = 
xhci
->devaddr++;

1848 
¶Ÿ_˘x
[3] = (
SLOT_ADDRESSED
 << 
SLOT_STATE_SHIFT
Ë| 
¶Ÿ
->
devaddr
;

1849 
	`DPRINTF
("xhci: devi˚áddªs†i†%d\n", 
¶Ÿ
->
devaddr
);

1850 
	`usb_devi˚_h™dÀ_c⁄åﬁ
(
dev
, 
NULL
,

1851 
Devi˚OutReque°
 | 
USB_REQ_SET_ADDRESS
,

1852 
¶Ÿ
->
devaddr
, 0, 0, 
NULL
);

1855 
ªs
 = 
	`xhci_íabÀ_ï
(
xhci
, 
¶Ÿid
, 1, 
o˘x
+32, 
ï0_˘x
);

1857 
	`DPRINTF
("xhci: output slot context: %08x %08x %08x %08x\n",

1858 
¶Ÿ_˘x
[0], slot_ctx[1], slot_ctx[2], slot_ctx[3]);

1859 
	`DPRINTF
("xhci: outputÉp0 context: %08x %08x %08x %08x %08x\n",

1860 
ï0_˘x
[0],Ép0_ctx[1],Ép0_ctx[2],Ép0_ctx[3],Ép0_ctx[4]);

1862 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
o˘x
, 
¶Ÿ_˘x
, (slot_ctx));

1863 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
o˘x
+32, 
ï0_˘x
, (ep0_ctx));

1865  
ªs
;

1866 
	}
}

1869 
TRBCCode
 
	$xhci_c⁄figuª_¶Ÿ
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

1870 
uöt64_t
 
pi˘x
, 
boﬁ
 
dc
)

1872 
dma_addr_t
 
i˘x
, 
o˘x
;

1873 
uöt32_t
 
i˘l_˘x
[2];

1874 
uöt32_t
 
¶Ÿ_˘x
[4];

1875 
uöt32_t
 
i¶Ÿ_˘x
[4];

1876 
uöt32_t
 
ï_˘x
[5];

1877 
i
;

1878 
TRBCCode
 
ªs
;

1880 
	`åa˚_usb_xhci_¶Ÿ_c⁄figuª
(
¶Ÿid
);

1881 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

1883 
i˘x
 = 
	`xhci_mask64
(
pi˘x
);

1884 
o˘x
 = 
xhci
->
¶Ÿs
[
¶Ÿid
-1].
˘x
;

1886 
	`DPRINTF
("xhci: i≈uàc⁄ãxà© "
DMA_ADDR_FMT
"\n", 
i˘x
);

1887 
	`DPRINTF
("xhci: ouçuàc⁄ãxà© "
DMA_ADDR_FMT
"\n", 
o˘x
);

1889 i‡(
dc
) {

1890 
i
 = 2; i <= 31; i++) {

1891 i‡(
xhci
->
¶Ÿs
[
¶Ÿid
-1].
ïs
[
i
-1]) {

1892 
	`xhci_dißbÀ_ï
(
xhci
, 
¶Ÿid
, 
i
);

1896 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
o˘x
, 
¶Ÿ_˘x
, (slot_ctx));

1897 
¶Ÿ_˘x
[3] &~(
SLOT_STATE_MASK
 << 
SLOT_STATE_SHIFT
);

1898 
¶Ÿ_˘x
[3] |
SLOT_ADDRESSED
 << 
SLOT_STATE_SHIFT
;

1899 
	`DPRINTF
("xhci: output slot context: %08x %08x %08x %08x\n",

1900 
¶Ÿ_˘x
[0], slot_ctx[1], slot_ctx[2], slot_ctx[3]);

1901 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
o˘x
, 
¶Ÿ_˘x
, (slot_ctx));

1903  
CC_SUCCESS
;

1906 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
i˘x
, 
i˘l_˘x
, (ictl_ctx));

1908 i‡((
i˘l_˘x
[0] & 0x3) != 0x0 || (ictl_ctx[1] & 0x3) != 0x1) {

1909 
	`Ârötf
(
°dîr
, "xhci: invalid input context control %08x %08x\n",

1910 
i˘l_˘x
[0], ictl_ctx[1]);

1911  
CC_TRB_ERROR
;

1914 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
i˘x
+32, 
i¶Ÿ_˘x
, (islot_ctx));

1915 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
o˘x
, 
¶Ÿ_˘x
, (slot_ctx));

1917 i‡(
	`SLOT_STATE
(
¶Ÿ_˘x
[3]Ë< 
SLOT_ADDRESSED
) {

1918 
	`Ârötf
(
°dîr
, "xhci: invÆid slŸ sèã %08x\n", 
¶Ÿ_˘x
[3]);

1919  
CC_CONTEXT_STATE_ERROR
;

1922 
i
 = 2; i <= 31; i++) {

1923 i‡(
i˘l_˘x
[0] & (1<<
i
)) {

1924 
	`xhci_dißbÀ_ï
(
xhci
, 
¶Ÿid
, 
i
);

1926 i‡(
i˘l_˘x
[1] & (1<<
i
)) {

1927 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
i˘x
+32+(32*
i
), 
ï_˘x
,

1928 (
ï_˘x
));

1929 
	`DPRINTF
("xhci: inputÉp%d.%d context: %08x %08x %08x %08x %08x\n",

1930 
i
/2, i%2, 
ï_˘x
[0],Ép_ctx[1],Ép_ctx[2],

1931 
ï_˘x
[3],Ép_ctx[4]);

1932 
	`xhci_dißbÀ_ï
(
xhci
, 
¶Ÿid
, 
i
);

1933 
ªs
 = 
	`xhci_íabÀ_ï
(
xhci
, 
¶Ÿid
, 
i
, 
o˘x
+(32*i), 
ï_˘x
);

1934 i‡(
ªs
 !
CC_SUCCESS
) {

1935  
ªs
;

1937 
	`DPRINTF
("xhci: outputÉp%d.%d context: %08x %08x %08x %08x %08x\n",

1938 
i
/2, i%2, 
ï_˘x
[0],Ép_ctx[1],Ép_ctx[2],

1939 
ï_˘x
[3],Ép_ctx[4]);

1940 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
o˘x
+(32*
i
), 
ï_˘x
, (ep_ctx));

1944 
¶Ÿ_˘x
[3] &~(
SLOT_STATE_MASK
 << 
SLOT_STATE_SHIFT
);

1945 
¶Ÿ_˘x
[3] |
SLOT_CONFIGURED
 << 
SLOT_STATE_SHIFT
;

1946 
¶Ÿ_˘x
[0] &~(
SLOT_CONTEXT_ENTRIES_MASK
 << 
SLOT_CONTEXT_ENTRIES_SHIFT
);

1947 
¶Ÿ_˘x
[0] |
i¶Ÿ_˘x
[0] & (
SLOT_CONTEXT_ENTRIES_MASK
 <<

1948 
SLOT_CONTEXT_ENTRIES_SHIFT
);

1949 
	`DPRINTF
("xhci: output slot context: %08x %08x %08x %08x\n",

1950 
¶Ÿ_˘x
[0], slot_ctx[1], slot_ctx[2], slot_ctx[3]);

1952 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
o˘x
, 
¶Ÿ_˘x
, (slot_ctx));

1954  
CC_SUCCESS
;

1955 
	}
}

1958 
TRBCCode
 
	$xhci_evÆu©e_¶Ÿ
(
XHCISèã
 *
xhci
, 
¶Ÿid
,

1959 
uöt64_t
 
pi˘x
)

1961 
dma_addr_t
 
i˘x
, 
o˘x
;

1962 
uöt32_t
 
i˘l_˘x
[2];

1963 
uöt32_t
 
õp0_˘x
[5];

1964 
uöt32_t
 
ï0_˘x
[5];

1965 
uöt32_t
 
i¶Ÿ_˘x
[4];

1966 
uöt32_t
 
¶Ÿ_˘x
[4];

1968 
	`åa˚_usb_xhci_¶Ÿ_evÆu©e
(
¶Ÿid
);

1969 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

1971 
i˘x
 = 
	`xhci_mask64
(
pi˘x
);

1972 
o˘x
 = 
xhci
->
¶Ÿs
[
¶Ÿid
-1].
˘x
;

1974 
	`DPRINTF
("xhci: i≈uàc⁄ãxà© "
DMA_ADDR_FMT
"\n", 
i˘x
);

1975 
	`DPRINTF
("xhci: ouçuàc⁄ãxà© "
DMA_ADDR_FMT
"\n", 
o˘x
);

1977 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
i˘x
, 
i˘l_˘x
, (ictl_ctx));

1979 i‡(
i˘l_˘x
[0] != 0x0 || ictl_ctx[1] & ~0x3) {

1980 
	`Ârötf
(
°dîr
, "xhci: invalid input context control %08x %08x\n",

1981 
i˘l_˘x
[0], ictl_ctx[1]);

1982  
CC_TRB_ERROR
;

1985 i‡(
i˘l_˘x
[1] & 0x1) {

1986 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
i˘x
+32, 
i¶Ÿ_˘x
, (islot_ctx));

1988 
	`DPRINTF
("xhci: input slot context: %08x %08x %08x %08x\n",

1989 
i¶Ÿ_˘x
[0], islot_ctx[1], islot_ctx[2], islot_ctx[3]);

1991 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
o˘x
, 
¶Ÿ_˘x
, (slot_ctx));

1993 
¶Ÿ_˘x
[1] &= ~0xFFFF;

1994 
¶Ÿ_˘x
[1] |
i¶Ÿ_˘x
[1] & 0xFFFF;

1995 
¶Ÿ_˘x
[2] &= ~0xFF00000;

1996 
¶Ÿ_˘x
[2] |
i¶Ÿ_˘x
[2] & 0xFF000000;

1998 
	`DPRINTF
("xhci: output slot context: %08x %08x %08x %08x\n",

1999 
¶Ÿ_˘x
[0], slot_ctx[1], slot_ctx[2], slot_ctx[3]);

2001 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
o˘x
, 
¶Ÿ_˘x
, (slot_ctx));

2004 i‡(
i˘l_˘x
[1] & 0x2) {

2005 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
i˘x
+64, 
õp0_˘x
, (iep0_ctx));

2007 
	`DPRINTF
("xhci: inputÉp0 context: %08x %08x %08x %08x %08x\n",

2008 
õp0_˘x
[0], iep0_ctx[1], iep0_ctx[2],

2009 
õp0_˘x
[3], iep0_ctx[4]);

2011 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
o˘x
+32, 
ï0_˘x
, (ep0_ctx));

2013 
ï0_˘x
[1] &= ~0xFFFF0000;

2014 
ï0_˘x
[1] |
õp0_˘x
[1] & 0xFFFF0000;

2016 
	`DPRINTF
("xhci: outputÉp0 context: %08x %08x %08x %08x %08x\n",

2017 
ï0_˘x
[0],Ép0_ctx[1],Ép0_ctx[2],Ép0_ctx[3],Ép0_ctx[4]);

2019 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
o˘x
+32, 
ï0_˘x
, (ep0_ctx));

2022  
CC_SUCCESS
;

2023 
	}
}

2025 
TRBCCode
 
	$xhci_ª£t_¶Ÿ
(
XHCISèã
 *
xhci
, 
¶Ÿid
)

2027 
uöt32_t
 
¶Ÿ_˘x
[4];

2028 
dma_addr_t
 
o˘x
;

2029 
i
;

2031 
	`åa˚_usb_xhci_¶Ÿ_ª£t
(
¶Ÿid
);

2032 
	`as£π
(
¶Ÿid
 >1 && slŸid <
MAXSLOTS
);

2034 
o˘x
 = 
xhci
->
¶Ÿs
[
¶Ÿid
-1].
˘x
;

2036 
	`DPRINTF
("xhci: ouçuàc⁄ãxà© "
DMA_ADDR_FMT
"\n", 
o˘x
);

2038 
i
 = 2; i <= 31; i++) {

2039 i‡(
xhci
->
¶Ÿs
[
¶Ÿid
-1].
ïs
[
i
-1]) {

2040 
	`xhci_dißbÀ_ï
(
xhci
, 
¶Ÿid
, 
i
);

2044 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
o˘x
, 
¶Ÿ_˘x
, (slot_ctx));

2045 
¶Ÿ_˘x
[3] &~(
SLOT_STATE_MASK
 << 
SLOT_STATE_SHIFT
);

2046 
¶Ÿ_˘x
[3] |
SLOT_DEFAULT
 << 
SLOT_STATE_SHIFT
;

2047 
	`DPRINTF
("xhci: output slot context: %08x %08x %08x %08x\n",

2048 
¶Ÿ_˘x
[0], slot_ctx[1], slot_ctx[2], slot_ctx[3]);

2049 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
o˘x
, 
¶Ÿ_˘x
, (slot_ctx));

2051  
CC_SUCCESS
;

2052 
	}
}

2054 
	$xhci_gë_¶Ÿ
(
XHCISèã
 *
xhci
, 
XHCIEvít
 *
evít
, 
XHCITRB
 *
åb
)

2056 
¶Ÿid
;

2057 
¶Ÿid
 = (
åb
->
c⁄åﬁ
 >> 
TRB_CR_SLOTID_SHIFT
Ë& 
TRB_CR_SLOTID_MASK
;

2058 i‡(
¶Ÿid
 < 1 || slŸid > 
MAXSLOTS
) {

2059 
	`Ârötf
(
°dîr
, "xhci: bad slŸ id %d\n", 
¶Ÿid
);

2060 
evít
->
ccode
 = 
CC_TRB_ERROR
;

2062 } i‡(!
xhci
->
¶Ÿs
[
¶Ÿid
-1].
íabÀd
) {

2063 
	`Ârötf
(
°dîr
, "xhci: slŸ id %dÇŸÉ«bÀd\n", 
¶Ÿid
);

2064 
evít
->
ccode
 = 
CC_SLOT_NOT_ENABLED_ERROR
;

2067  
¶Ÿid
;

2068 
	}
}

2070 
TRBCCode
 
	$xhci_gë_p‹t_b™dwidth
(
XHCISèã
 *
xhci
, 
uöt64_t
 
p˘x
)

2072 
dma_addr_t
 
˘x
;

2073 
uöt8_t
 
bw_˘x
[
MAXPORTS
+1];

2075 
	`DPRINTF
("xhci_get_port_bandwidth()\n");

2077 
˘x
 = 
	`xhci_mask64
(
p˘x
);

2079 
	`DPRINTF
("xhci: b™dwidth c⁄ãxà© "
DMA_ADDR_FMT
"\n", 
˘x
);

2082 
bw_˘x
[0] = 0;

2083 
	`mem£t
(&
bw_˘x
[1], 80, 
MAXPORTS
);

2084 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
˘x
, 
bw_˘x
, (bw_ctx));

2086  
CC_SUCCESS
;

2087 
	}
}

2089 
uöt32_t
 
	$rŸl
(
uöt32_t
 
v
, 
cou¡
)

2091 
cou¡
 &= 31;

2092  (
v
 << 
cou¡
) | (v >> (32 - count));

2093 
	}
}

2096 
uöt32_t
 
	$xhci_√c_chÆÀnge
(
uöt32_t
 
hi
, uöt32_à
lo
)

2098 
uöt32_t
 
vÆ
;

2099 
vÆ
 = 
	`rŸl
(
lo
 - 0x49434878, 32 - ((
hi
>>8) & 0x1F));

2100 
vÆ
 +
	`rŸl
(
lo
 + 0x49434878, 
hi
 & 0x1F);

2101 
vÆ
 -
	`rŸl
(
hi
 ^ 0x49434878, (
lo
 >> 16) & 0x1F);

2102  ~
vÆ
;

2103 
	}
}

2105 
	$xhci_vü_chÆÀnge
(
XHCISèã
 *
xhci
, 
uöt64_t
 
addr
)

2107 
uöt32_t
 
buf
[8];

2108 
uöt32_t
 
obuf
[8];

2109 
dma_addr_t
 
∑ddr
 = 
	`xhci_mask64
(
addr
);

2111 
	`pci_dma_ªad
(&
xhci
->
pci_dev
, 
∑ddr
, &
buf
, 32);

2113 
	`mem˝y
(
obuf
, 
buf
, (obuf));

2115 i‡((
buf
[0] & 0xff) == 2) {

2116 
obuf
[0] = 0x49932000 + 0x54dc200 * 
buf
[2] + 0x7429b578 * buf[3];

2117 
obuf
[0] |(
buf
[2] * buf[3]) & 0xff;

2118 
obuf
[1] = 0x0132bb37 + 0xe89 * 
buf
[2] + 0xf09 * buf[3];

2119 
obuf
[2] = 0x0066c2e9 + 0x2091 * 
buf
[2] + 0x19bd * buf[3];

2120 
obuf
[3] = 0xd5281342 + 0x2cc9691 * 
buf
[2] + 0x2367662 * buf[3];

2121 
obuf
[4] = 0x0123c75¯+ 0x1595 * 
buf
[2] + 0x19ec * buf[3];

2122 
obuf
[5] = 0x00f695dê+ 0x26fd * 
buf
[2] + 0x3e9 * buf[3];

2123 
obuf
[6] = obuf[2] ^ obuf[3] ^ 0x29472956;

2124 
obuf
[7] = obuf[2] ^ obuf[3] ^ 0x65866593;

2127 
	`pci_dma_wrôe
(&
xhci
->
pci_dev
, 
∑ddr
, &
obuf
, 32);

2128 
	}
}

2130 
	$xhci_¥o˚ss_comm™ds
(
XHCISèã
 *
xhci
)

2132 
XHCITRB
 
åb
;

2133 
TRBTy≥
 
ty≥
;

2134 
XHCIEvít
 
evít
 = {
ER_COMMAND_COMPLETE
, 
CC_SUCCESS
};

2135 
dma_addr_t
 
addr
;

2136 
i
, 
¶Ÿid
 = 0;

2138 
	`DPRINTF
("xhci_process_commands()\n");

2139 i‡(!
	`xhci_ru¬ög
(
xhci
)) {

2140 
	`DPRINTF
("xhci_process_commands() called while xHC stopped orÖaused\n");

2144 
xhci
->
¸¸_low
 |
CRCR_CRR
;

2146 (
ty≥
 = 
	`xhci_rög_„tch
(
xhci
, &xhci->
cmd_rög
, &
åb
, &
addr
))) {

2147 
evít
.
±r
 = 
addr
;

2148 
ty≥
) {

2149 
CR_ENABLE_SLOT
:

2150 
i
 = 0; i < 
MAXSLOTS
; i++) {

2151 i‡(!
xhci
->
¶Ÿs
[
i
].
íabÀd
) {

2155 i‡(
i
 >
MAXSLOTS
) {

2156 
	`Ârötf
(
°dîr
, "xhci:Ço device slotsávailable\n");

2157 
evít
.
ccode
 = 
CC_NO_SLOTS_ERROR
;

2159 
¶Ÿid
 = 
i
+1;

2160 
evít
.
ccode
 = 
	`xhci_íabÀ_¶Ÿ
(
xhci
, 
¶Ÿid
);

2163 
CR_DISABLE_SLOT
:

2164 
¶Ÿid
 = 
	`xhci_gë_¶Ÿ
(
xhci
, &
evít
, &
åb
);

2165 i‡(
¶Ÿid
) {

2166 
evít
.
ccode
 = 
	`xhci_dißbÀ_¶Ÿ
(
xhci
, 
¶Ÿid
);

2169 
CR_ADDRESS_DEVICE
:

2170 
¶Ÿid
 = 
	`xhci_gë_¶Ÿ
(
xhci
, &
evít
, &
åb
);

2171 i‡(
¶Ÿid
) {

2172 
evít
.
ccode
 = 
	`xhci_addªss_¶Ÿ
(
xhci
, 
¶Ÿid
, 
åb
.
∑ømëî
,

2173 
åb
.
c⁄åﬁ
 & 
TRB_CR_BSR
);

2176 
CR_CONFIGURE_ENDPOINT
:

2177 
¶Ÿid
 = 
	`xhci_gë_¶Ÿ
(
xhci
, &
evít
, &
åb
);

2178 i‡(
¶Ÿid
) {

2179 
evít
.
ccode
 = 
	`xhci_c⁄figuª_¶Ÿ
(
xhci
, 
¶Ÿid
, 
åb
.
∑ømëî
,

2180 
åb
.
c⁄åﬁ
 & 
TRB_CR_DC
);

2183 
CR_EVALUATE_CONTEXT
:

2184 
¶Ÿid
 = 
	`xhci_gë_¶Ÿ
(
xhci
, &
evít
, &
åb
);

2185 i‡(
¶Ÿid
) {

2186 
evít
.
ccode
 = 
	`xhci_evÆu©e_¶Ÿ
(
xhci
, 
¶Ÿid
, 
åb
.
∑ømëî
);

2189 
CR_STOP_ENDPOINT
:

2190 
¶Ÿid
 = 
	`xhci_gë_¶Ÿ
(
xhci
, &
evít
, &
åb
);

2191 i‡(
¶Ÿid
) {

2192 
ïid
 = (
åb
.
c⁄åﬁ
 >> 
TRB_CR_EPID_SHIFT
)

2193 & 
TRB_CR_EPID_MASK
;

2194 
evít
.
ccode
 = 
	`xhci_°›_ï
(
xhci
, 
¶Ÿid
, 
ïid
);

2197 
CR_RESET_ENDPOINT
:

2198 
¶Ÿid
 = 
	`xhci_gë_¶Ÿ
(
xhci
, &
evít
, &
åb
);

2199 i‡(
¶Ÿid
) {

2200 
ïid
 = (
åb
.
c⁄åﬁ
 >> 
TRB_CR_EPID_SHIFT
)

2201 & 
TRB_CR_EPID_MASK
;

2202 
evít
.
ccode
 = 
	`xhci_ª£t_ï
(
xhci
, 
¶Ÿid
, 
ïid
);

2205 
CR_SET_TR_DEQUEUE
:

2206 
¶Ÿid
 = 
	`xhci_gë_¶Ÿ
(
xhci
, &
evít
, &
åb
);

2207 i‡(
¶Ÿid
) {

2208 
ïid
 = (
åb
.
c⁄åﬁ
 >> 
TRB_CR_EPID_SHIFT
)

2209 & 
TRB_CR_EPID_MASK
;

2210 
evít
.
ccode
 = 
	`xhci_£t_ï_dequeue
(
xhci
, 
¶Ÿid
, 
ïid
,

2211 
åb
.
∑ømëî
);

2214 
CR_RESET_DEVICE
:

2215 
¶Ÿid
 = 
	`xhci_gë_¶Ÿ
(
xhci
, &
evít
, &
åb
);

2216 i‡(
¶Ÿid
) {

2217 
evít
.
ccode
 = 
	`xhci_ª£t_¶Ÿ
(
xhci
, 
¶Ÿid
);

2220 
CR_GET_PORT_BANDWIDTH
:

2221 
evít
.
ccode
 = 
	`xhci_gë_p‹t_b™dwidth
(
xhci
, 
åb
.
∑ømëî
);

2223 
CR_VENDOR_VIA_CHALLENGE_RESPONSE
:

2224 
	`xhci_vü_chÆÀnge
(
xhci
, 
åb
.
∑ømëî
);

2226 
CR_VENDOR_NEC_FIRMWARE_REVISION
:

2227 
evít
.
ty≥
 = 48;

2228 
evít
.
Àngth
 = 0x3025;

2230 
CR_VENDOR_NEC_CHALLENGE_RESPONSE
:

2232 
uöt32_t
 
chi
 = 
åb
.
∑ømëî
 >> 32;

2233 
uöt32_t
 
˛o
 = 
åb
.
∑ømëî
;

2234 
uöt32_t
 
vÆ
 = 
	`xhci_√c_chÆÀnge
(
chi
, 
˛o
);

2235 
evít
.
Àngth
 = 
vÆ
 & 0xFFFF;

2236 
evít
.
ïid
 = 
vÆ
 >> 16;

2237 
¶Ÿid
 = 
vÆ
 >> 24;

2238 
evít
.
ty≥
 = 48;

2242 
	`Ârötf
(
°dîr
, "xhci: unim∂emíãd comm™d %d\n", 
ty≥
);

2243 
evít
.
ccode
 = 
CC_TRB_ERROR
;

2246 
evít
.
¶Ÿid
 = slotid;

2247 
	`xhci_evít
(
xhci
, &
evít
);

2249 
	}
}

2251 
	$xhci_upd©e_p‹t
(
XHCISèã
 *
xhci
, 
XHCIP‹t
 *
p‹t
, 
is_dëach
)

2253 
ƒ
 = 
p‹t
->p‹t.
ödex
 + 1;

2255 
p‹t
->
p‹tsc
 = 
PORTSC_PP
;

2256 i‡(
p‹t
->p‹t.
dev
 &&Ö‹t->p‹t.dev->
©èched
 && !
is_dëach
) {

2257 
p‹t
->
p‹tsc
 |
PORTSC_CCS
;

2258 
p‹t
->p‹t.
dev
->
•ìd
) {

2259 
USB_SPEED_LOW
:

2260 
p‹t
->
p‹tsc
 |
PORTSC_SPEED_LOW
;

2262 
USB_SPEED_FULL
:

2263 
p‹t
->
p‹tsc
 |
PORTSC_SPEED_FULL
;

2265 
USB_SPEED_HIGH
:

2266 
p‹t
->
p‹tsc
 |
PORTSC_SPEED_HIGH
;

2271 i‡(
	`xhci_ru¬ög
(
xhci
)) {

2272 
p‹t
->
p‹tsc
 |
PORTSC_CSC
;

2273 
XHCIEvít
 
ev
 = { 
ER_PORT_STATUS_CHANGE
, 
CC_SUCCESS
, 
ƒ
 << 24};

2274 
	`xhci_evít
(
xhci
, &
ev
);

2275 
	`DPRINTF
("xhci:Ö‹àch™gêevíàf‹Ö‹à%d\n", 
ƒ
);

2277 
	}
}

2279 
	$xhci_ª£t
(
Devi˚Sèã
 *
dev
)

2281 
XHCISèã
 *
xhci
 = 
	`DO_UPCAST
(XHCISèã, 
pci_dev
.
qdev
, 
dev
);

2282 
i
;

2284 
	`åa˚_usb_xhci_ª£t
();

2285 i‡(!(
xhci
->
usb°s
 & 
USBSTS_HCH
)) {

2286 
	`Ârötf
(
°dîr
, "xhci:Ñeset whileÑunning!\n");

2289 
xhci
->
usbcmd
 = 0;

2290 
xhci
->
usb°s
 = 
USBSTS_HCH
;

2291 
xhci
->
dn˘æ
 = 0;

2292 
xhci
->
¸¸_low
 = 0;

2293 
xhci
->
¸¸_high
 = 0;

2294 
xhci
->
dcbØp_low
 = 0;

2295 
xhci
->
dcbØp_high
 = 0;

2296 
xhci
->
c⁄fig
 = 0;

2297 
xhci
->
devaddr
 = 2;

2299 
i
 = 0; i < 
MAXSLOTS
; i++) {

2300 
	`xhci_dißbÀ_¶Ÿ
(
xhci
, 
i
+1);

2303 
i
 = 0; i < 
MAXPORTS
; i++) {

2304 
	`xhci_upd©e_p‹t
(
xhci
, xhci->
p‹ts
 + 
i
, 0);

2307 
xhci
->
mfödex
 = 0;

2308 
xhci
->
im™
 = 0;

2309 
xhci
->
imod
 = 0;

2310 
xhci
->
î°sz
 = 0;

2311 
xhci
->
î°ba_low
 = 0;

2312 
xhci
->
î°ba_high
 = 0;

2313 
xhci
->
îdp_low
 = 0;

2314 
xhci
->
îdp_high
 = 0;

2316 
xhci
->
î_ï_idx
 = 0;

2317 
xhci
->
î_pcs
 = 1;

2318 
xhci
->
î_fuŒ
 = 0;

2319 
xhci
->
ev_buf„r_put
 = 0;

2320 
xhci
->
ev_buf„r_gë
 = 0;

2321 
	}
}

2323 
uöt32_t
 
	$xhci_ˇp_ªad
(
XHCISèã
 *
xhci
, 
uöt32_t
 
ªg
)

2325 
uöt32_t
 
ªt
;

2327 
ªg
) {

2329 
ªt
 = 0x01000000 | 
LEN_CAP
;

2332 
ªt
 = (
MAXPORTS
<<24Ë| (
MAXINTRS
<<8Ë| 
MAXSLOTS
;

2335 
ªt
 = 0x0000000f;

2338 
ªt
 = 0x00000000;

2341 i‡((
dma_addr_t
) == 4) {

2342 
ªt
 = 0x00081000;

2344 
ªt
 = 0x00081001;

2348 
ªt
 = 
OFF_DOORBELL
;

2351 
ªt
 = 
OFF_RUNTIME
;

2356 
ªt
 = 0x02000402;

2359 
ªt
 = 0x20425455;

2362 
ªt
 = 0x00000001 | (
USB2_PORTS
<<8);

2365 
ªt
 = 0x00000000;

2368 
ªt
 = 0x03000002;

2371 
ªt
 = 0x20425455;

2374 
ªt
 = 0x00000000 | (
USB2_PORTS
+1Ë| (
USB3_PORTS
<<8);

2377 
ªt
 = 0x00000000;

2380 
	`Ârötf
(
°dîr
, "xhci_ˇp_ªad:Ñeg %d unim∂emíãd\n", 
ªg
);

2381 
ªt
 = 0;

2384 
	`åa˚_usb_xhci_ˇp_ªad
(
ªg
, 
ªt
);

2385  
ªt
;

2386 
	}
}

2388 
uöt32_t
 
	$xhci_p‹t_ªad
(
XHCISèã
 *
xhci
, 
uöt32_t
 
ªg
)

2390 
uöt32_t
 
p‹t
 = 
ªg
 >> 4;

2391 
uöt32_t
 
ªt
;

2393 i‡(
p‹t
 >
MAXPORTS
) {

2394 
	`Ârötf
(
°dîr
, "xhci_p‹t_ªad:Ö‹à%d ouào‡bounds\n", 
p‹t
);

2395 
ªt
 = 0;

2396 
out
;

2399 
ªg
 & 0xf) {

2401 
ªt
 = 
xhci
->
p‹ts
[
p‹t
].
p‹tsc
;

2405 
ªt
 = 0;

2409 
	`Ârötf
(
°dîr
, "xhci_port_read (port %d):Ñeg 0x%x unimplemented\n",

2410 
p‹t
, 
ªg
);

2411 
ªt
 = 0;

2414 
out
:

2415 
	`åa˚_usb_xhci_p‹t_ªad
(
p‹t
, 
ªg
 & 0x0f, 
ªt
);

2416  
ªt
;

2417 
	}
}

2419 
	$xhci_p‹t_wrôe
(
XHCISèã
 *
xhci
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

2421 
uöt32_t
 
p‹t
 = 
ªg
 >> 4;

2422 
uöt32_t
 
p‹tsc
;

2424 
	`åa˚_usb_xhci_p‹t_wrôe
(
p‹t
, 
ªg
 & 0x0f, 
vÆ
);

2426 i‡(
p‹t
 >
MAXPORTS
) {

2427 
	`Ârötf
(
°dîr
, "xhci_p‹t_ªad:Ö‹à%d ouào‡bounds\n", 
p‹t
);

2431 
ªg
 & 0xf) {

2433 
p‹tsc
 = 
xhci
->
p‹ts
[
p‹t
].portsc;

2435 
p‹tsc
 &~(
vÆ
 & (
PORTSC_CSC
|
PORTSC_PEC
|
PORTSC_WRC
|
PORTSC_OCC
|

2436 
PORTSC_PRC
|
PORTSC_PLC
|
PORTSC_CEC
));

2437 i‡(
vÆ
 & 
PORTSC_LWS
) {

2439 
p‹tsc
 &~(
PORTSC_PLS_MASK
 << 
PORTSC_PLS_SHIFT
);

2440 
p‹tsc
 |
vÆ
 & (
PORTSC_PLS_MASK
 << 
PORTSC_PLS_SHIFT
);

2443 
p‹tsc
 &~(
PORTSC_PP
|
PORTSC_WCE
|
PORTSC_WDE
|
PORTSC_WOE
);

2444 
p‹tsc
 |(
vÆ
 & (
PORTSC_PP
|
PORTSC_WCE
|
PORTSC_WDE
|
PORTSC_WOE
));

2446 i‡(
vÆ
 & 
PORTSC_PR
) {

2447 
	`DPRINTF
("xhci:Ö‹à%dÑe£t\n", 
p‹t
);

2448 
	`usb_devi˚_ª£t
(
xhci
->
p‹ts
[
p‹t
].p‹t.
dev
);

2449 
p‹tsc
 |
PORTSC_PRC
 | 
PORTSC_PED
;

2451 
xhci
->
p‹ts
[
p‹t
].
p‹tsc
 =Öortsc;

2456 
	`Ârötf
(
°dîr
, "xhci_port_write (port %d):Ñeg 0x%x unimplemented\n",

2457 
p‹t
, 
ªg
);

2459 
	}
}

2461 
uöt32_t
 
	$xhci_›î_ªad
(
XHCISèã
 *
xhci
, 
uöt32_t
 
ªg
)

2463 
uöt32_t
 
ªt
;

2465 i‡(
ªg
 >= 0x400) {

2466  
	`xhci_p‹t_ªad
(
xhci
, 
ªg
 - 0x400);

2469 
ªg
) {

2471 
ªt
 = 
xhci
->
usbcmd
;

2474 
ªt
 = 
xhci
->
usb°s
;

2477 
ªt
 = 1;

2480 
ªt
 = 
xhci
->
dn˘æ
;

2483 
ªt
 = 
xhci
->
¸¸_low
 & ~0xe;

2486 
ªt
 = 
xhci
->
¸¸_high
;

2489 
ªt
 = 
xhci
->
dcbØp_low
;

2492 
ªt
 = 
xhci
->
dcbØp_high
;

2495 
ªt
 = 
xhci
->
c⁄fig
;

2498 
	`Ârötf
(
°dîr
, "xhci_›î_ªad:Ñeg 0x%x unim∂emíãd\n", 
ªg
);

2499 
ªt
 = 0;

2502 
	`åa˚_usb_xhci_›î_ªad
(
ªg
, 
ªt
);

2503  
ªt
;

2504 
	}
}

2506 
	$xhci_›î_wrôe
(
XHCISèã
 *
xhci
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

2508 i‡(
ªg
 >= 0x400) {

2509 
	`xhci_p‹t_wrôe
(
xhci
, 
ªg
 - 0x400, 
vÆ
);

2513 
	`åa˚_usb_xhci_›î_wrôe
(
ªg
, 
vÆ
);

2515 
ªg
) {

2517 i‡((
vÆ
 & 
USBCMD_RS
Ë&& !(
xhci
->
usbcmd
 & USBCMD_RS)) {

2518 
	`xhci_run
(
xhci
);

2519 } i‡(!(
vÆ
 & 
USBCMD_RS
Ë&& (
xhci
->
usbcmd
 & USBCMD_RS)) {

2520 
	`xhci_°›
(
xhci
);

2522 
xhci
->
usbcmd
 = 
vÆ
 & 0xc0f;

2523 i‡(
vÆ
 & 
USBCMD_HCRST
) {

2524 
	`xhci_ª£t
(&
xhci
->
pci_dev
.
qdev
);

2526 
	`xhci_úq_upd©e
(
xhci
);

2531 
xhci
->
usb°s
 &~(
vÆ
 & (
USBSTS_HSE
|
USBSTS_EINT
|
USBSTS_PCD
|
USBSTS_SRE
));

2532 
	`xhci_úq_upd©e
(
xhci
);

2536 
xhci
->
dn˘æ
 = 
vÆ
 & 0xffff;

2539 
xhci
->
¸¸_low
 = (
vÆ
 & 0xffffffcfË| (xhci->¸¸_low & 
CRCR_CRR
);

2542 
xhci
->
¸¸_high
 = 
vÆ
;

2543 i‡(
xhci
->
¸¸_low
 & (
CRCR_CA
|
CRCR_CS
Ë&& (xhci->¸¸_low & 
CRCR_CRR
)) {

2544 
XHCIEvít
 
evít
 = {
ER_COMMAND_COMPLETE
, 
CC_COMMAND_RING_STOPPED
};

2545 
xhci
->
¸¸_low
 &~
CRCR_CRR
;

2546 
	`xhci_evít
(
xhci
, &
evít
);

2547 
	`DPRINTF
("xhci: comm™dÑög st›≥d (CRCR=%08x)\n", 
xhci
->
¸¸_low
);

2549 
dma_addr_t
 
ba£
 = 
	`xhci_addr64
(
xhci
->
¸¸_low
 & ~0x3f, 
vÆ
);

2550 
	`xhci_rög_öô
(
xhci
, &xhci->
cmd_rög
, 
ba£
);

2552 
xhci
->
¸¸_low
 &~(
CRCR_CA
 | 
CRCR_CS
);

2555 
xhci
->
dcbØp_low
 = 
vÆ
 & 0xffffffc0;

2558 
xhci
->
dcbØp_high
 = 
vÆ
;

2561 
xhci
->
c⁄fig
 = 
vÆ
 & 0xff;

2564 
	`Ârötf
(
°dîr
, "xhci_›î_wrôe:Ñeg 0x%x unim∂emíãd\n", 
ªg
);

2566 
	}
}

2568 
uöt32_t
 
	$xhci_ru¡ime_ªad
(
XHCISèã
 *
xhci
, 
uöt32_t
 
ªg
)

2570 
uöt32_t
 
ªt
;

2572 
ªg
) {

2574 
	`Ârötf
(
°dîr
, "xhci_runtime_read: MFINDEXÇot yet implemented\n");

2575 
ªt
 = 
xhci
->
mfödex
;

2578 
ªt
 = 
xhci
->
im™
;

2581 
ªt
 = 
xhci
->
imod
;

2584 
ªt
 = 
xhci
->
î°sz
;

2587 
ªt
 = 
xhci
->
î°ba_low
;

2590 
ªt
 = 
xhci
->
î°ba_high
;

2593 
ªt
 = 
xhci
->
îdp_low
;

2596 
ªt
 = 
xhci
->
îdp_high
;

2599 
	`Ârötf
(
°dîr
, "xhci_ru¡ime_ªad:Ñeg 0x%x unim∂emíãd\n", 
ªg
);

2600 
ªt
 = 0;

2603 
	`åa˚_usb_xhci_ru¡ime_ªad
(
ªg
, 
ªt
);

2604  
ªt
;

2605 
	}
}

2607 
	$xhci_ru¡ime_wrôe
(
XHCISèã
 *
xhci
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

2609 
	`åa˚_usb_xhci_ru¡ime_ªad
(
ªg
, 
vÆ
);

2611 
ªg
) {

2613 i‡(
vÆ
 & 
IMAN_IP
) {

2614 
xhci
->
im™
 &~
IMAN_IP
;

2616 
xhci
->
im™
 &~
IMAN_IE
;

2617 
xhci
->
im™
 |
vÆ
 & 
IMAN_IE
;

2618 
	`xhci_úq_upd©e
(
xhci
);

2621 
xhci
->
imod
 = 
vÆ
;

2624 
xhci
->
î°sz
 = 
vÆ
 & 0xffff;

2629 
xhci
->
î°ba_low
 = 
vÆ
 & 0xfffffff0;

2632 
xhci
->
î°ba_high
 = 
vÆ
;

2633 
	`xhci_î_ª£t
(
xhci
);

2636 i‡(
vÆ
 & 
ERDP_EHB
) {

2637 
xhci
->
îdp_low
 &~
ERDP_EHB
;

2639 
xhci
->
îdp_low
 = (
vÆ
 & ~
ERDP_EHB
) | (xhci->erdp_low & ERDP_EHB);

2642 
xhci
->
îdp_high
 = 
vÆ
;

2643 
	`xhci_evíts_upd©e
(
xhci
);

2646 
	`Ârötf
(
°dîr
, "xhci_›î_wrôe:Ñeg 0x%x unim∂emíãd\n", 
ªg
);

2648 
	}
}

2650 
uöt32_t
 
	$xhci_do‹bñl_ªad
(
XHCISèã
 *
xhci
, 
uöt32_t
 
ªg
)

2653 
	`åa˚_usb_xhci_do‹bñl_ªad
(
ªg
, 0);

2655 
	}
}

2657 
	$xhci_do‹bñl_wrôe
(
XHCISèã
 *
xhci
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

2659 
	`åa˚_usb_xhci_do‹bñl_wrôe
(
ªg
, 
vÆ
);

2661 i‡(!
	`xhci_ru¬ög
(
xhci
)) {

2662 
	`Ârötf
(
°dîr
, "xhci: wrote doorbell while xHC stopped orÖaused\n");

2666 
ªg
 >>= 2;

2668 i‡(
ªg
 == 0) {

2669 i‡(
vÆ
 == 0) {

2670 
	`xhci_¥o˚ss_comm™ds
(
xhci
);

2672 
	`Ârötf
(
°dîr
, "xhci: bad do‹bñ»0 wrôe: 0x%x\n", 
vÆ
);

2675 i‡(
ªg
 > 
MAXSLOTS
) {

2676 
	`Ârötf
(
°dîr
, "xhci: bad do‹bñ»%d\n", 
ªg
);

2677 } i‡(
vÆ
 > 31) {

2678 
	`Ârötf
(
°dîr
, "xhci: bad do‹bñ»%d wrôe: 0x%x\n", 
ªg
, 
vÆ
);

2680 
	`xhci_kick_ï
(
xhci
, 
ªg
, 
vÆ
);

2683 
	}
}

2685 
uöt64_t
 
	$xhci_mem_ªad
(*
±r
, 
èrgë_phys_addr_t
 
addr
,

2686 
size
)

2688 
XHCISèã
 *
xhci
 = 
±r
;

2691 i‡(
addr
 & 3) {

2692 
	`Ârötf
(
°dîr
, "xhci_mem_read: Mis-alignedÑead\n");

2696 i‡(
addr
 < 
LEN_CAP
) {

2697  
	`xhci_ˇp_ªad
(
xhci
, 
addr
);

2698 } i‡(
addr
 >
OFF_OPER
 &&ádd∏< (OFF_OPER + 
LEN_OPER
)) {

2699  
	`xhci_›î_ªad
(
xhci
, 
addr
 - 
OFF_OPER
);

2700 } i‡(
addr
 >
OFF_RUNTIME
 &&ádd∏< (OFF_RUNTIME + 
LEN_RUNTIME
)) {

2701  
	`xhci_ru¡ime_ªad
(
xhci
, 
addr
 - 
OFF_RUNTIME
);

2702 } i‡(
addr
 >
OFF_DOORBELL
 &&ádd∏< (OFF_DOORBELL + 
LEN_DOORBELL
)) {

2703  
	`xhci_do‹bñl_ªad
(
xhci
, 
addr
 - 
OFF_DOORBELL
);

2705 
	`Ârötf
(
°dîr
, "xhci_mem_ªad: Bad off£à%x\n", ()
addr
);

2708 
	}
}

2710 
	$xhci_mem_wrôe
(*
±r
, 
èrgë_phys_addr_t
 
addr
,

2711 
uöt64_t
 
vÆ
, 
size
)

2713 
XHCISèã
 *
xhci
 = 
±r
;

2716 i‡(
addr
 & 3) {

2717 
	`Ârötf
(
°dîr
, "xhci_mem_write: Mis-aligned write\n");

2721 i‡(
addr
 >
OFF_OPER
 &&ádd∏< (OFF_OPER + 
LEN_OPER
)) {

2722 
	`xhci_›î_wrôe
(
xhci
, 
addr
 - 
OFF_OPER
, 
vÆ
);

2723 } i‡(
addr
 >
OFF_RUNTIME
 &&ádd∏< (OFF_RUNTIME + 
LEN_RUNTIME
)) {

2724 
	`xhci_ru¡ime_wrôe
(
xhci
, 
addr
 - 
OFF_RUNTIME
, 
vÆ
);

2725 } i‡(
addr
 >
OFF_DOORBELL
 &&ádd∏< (OFF_DOORBELL + 
LEN_DOORBELL
)) {

2726 
	`xhci_do‹bñl_wrôe
(
xhci
, 
addr
 - 
OFF_DOORBELL
, 
vÆ
);

2728 
	`Ârötf
(
°dîr
, "xhci_mem_wrôe: Bad off£à%x\n", ()
addr
);

2730 
	}
}

2732 c⁄° 
Mem‹yRegi⁄Ops
 
	gxhci_mem_›s
 = {

2733 .
ªad
 = 
xhci_mem_ªad
,

2734 .
	gwrôe
 = 
xhci_mem_wrôe
,

2735 .
	gvÆid
.
	gmö_ac˚ss_size
 = 4,

2736 .
	gvÆid
.
	gmax_ac˚ss_size
 = 4,

2737 .
	gídü¬ess
 = 
DEVICE_LITTLE_ENDIAN
,

2740 
	$xhci_©èch
(
USBP‹t
 *
usbp‹t
)

2742 
XHCISèã
 *
xhci
 = 
usbp‹t
->
›aque
;

2743 
XHCIP‹t
 *
p‹t
 = &
xhci
->
p‹ts
[
usbp‹t
->
ödex
];

2745 
	`xhci_upd©e_p‹t
(
xhci
, 
p‹t
, 0);

2746 
	}
}

2748 
	$xhci_dëach
(
USBP‹t
 *
usbp‹t
)

2750 
XHCISèã
 *
xhci
 = 
usbp‹t
->
›aque
;

2751 
XHCIP‹t
 *
p‹t
 = &
xhci
->
p‹ts
[
usbp‹t
->
ödex
];

2753 
	`xhci_upd©e_p‹t
(
xhci
, 
p‹t
, 1);

2754 
	}
}

2756 
	$xhci_wakeup
(
USBP‹t
 *
usbp‹t
)

2758 
XHCISèã
 *
xhci
 = 
usbp‹t
->
›aque
;

2759 
XHCIP‹t
 *
p‹t
 = &
xhci
->
p‹ts
[
usbp‹t
->
ödex
];

2760 
ƒ
 = 
p‹t
->p‹t.
ödex
 + 1;

2761 
XHCIEvít
 
ev
 = { 
ER_PORT_STATUS_CHANGE
, 
CC_SUCCESS
, 
ƒ
 << 24};

2762 
uöt32_t
 
∂s
;

2764 
∂s
 = (
p‹t
->
p‹tsc
 >> 
PORTSC_PLS_SHIFT
Ë& 
PORTSC_PLS_MASK
;

2765 i‡(
∂s
 != 3) {

2768 
p‹t
->
p‹tsc
 |0x‡<< 
PORTSC_PLS_SHIFT
;

2769 i‡(
p‹t
->
p‹tsc
 & 
PORTSC_PLC
) {

2772 
p‹t
->
p‹tsc
 |
PORTSC_PLC
;

2773 
	`xhci_evít
(
xhci
, &
ev
);

2774 
	}
}

2776 
	$xhci_com∂ëe
(
USBP‹t
 *
p‹t
, 
USBPackë
 *
∑ckë
)

2778 
XHCITøns„r
 *
x„r
 = 
	`c⁄èöî_of
(
∑ckë
, XHCITransfer,Öacket);

2780 
	`xhci_com∂ëe_∑ckë
(
x„r
, 
∑ckë
->
ªsu…
);

2781 
	`xhci_kick_ï
(
x„r
->
xhci
, x„r->
¶Ÿid
, x„r->
ïid
);

2782 
	}
}

2784 
	$xhci_chûd_dëach
(
USBP‹t
 *
p‹t
, 
USBDevi˚
 *
chûd
)

2786 
	`FIXME
();

2787 
	}
}

2789 
USBP‹tOps
 
	gxhci_p‹t_›s
 = {

2790 .
©èch
 = 
xhci_©èch
,

2791 .
	gdëach
 = 
xhci_dëach
,

2792 .
	gwakeup
 = 
xhci_wakeup
,

2793 .
	gcom∂ëe
 = 
xhci_com∂ëe
,

2794 .
	gchûd_dëach
 = 
xhci_chûd_dëach
,

2797 
	$xhci_föd_¶Ÿid
(
XHCISèã
 *
xhci
, 
USBDevi˚
 *
dev
)

2799 
XHCISlŸ
 *
¶Ÿ
;

2800 
¶Ÿid
;

2802 
¶Ÿid
 = 1; slŸid <
MAXSLOTS
; slotid++) {

2803 
¶Ÿ
 = &
xhci
->
¶Ÿs
[
¶Ÿid
-1];

2804 i‡(
¶Ÿ
->
devaddr
 =
dev
->
addr
) {

2805  
¶Ÿid
;

2809 
	}
}

2811 
	$xhci_föd_ïid
(
USBEndpoöt
 *
ï
)

2813 i‡(
ï
->
ƒ
 == 0) {

2816 i‡(
ï
->
pid
 =
USB_TOKEN_IN
) {

2817  
ï
->
ƒ
 * 2 + 1;

2819  
ï
->
ƒ
 * 2;

2821 
	}
}

2823 
	$xhci_wakeup_ídpoöt
(
USBBus
 *
bus
, 
USBEndpoöt
 *
ï
)

2825 
XHCISèã
 *
xhci
 = 
	`c⁄èöî_of
(
bus
, XHCIState, bus);

2826 
¶Ÿid
;

2828 
	`DPRINTF
("%s\n", 
__func__
);

2829 
¶Ÿid
 = 
	`xhci_föd_¶Ÿid
(
xhci
, 
ï
->
dev
);

2830 i‡(
¶Ÿid
 =0 || !
xhci
->
¶Ÿs
[¶Ÿid-1].
íabÀd
) {

2831 
	`DPRINTF
("%s: o›s,Çÿ¶Ÿ f‹ dev %d\n", 
__func__
, 
ï
->
dev
->
addr
);

2834 
	`xhci_kick_ï
(
xhci
, 
¶Ÿid
, 
	`xhci_föd_ïid
(
ï
));

2835 
	}
}

2837 
USBBusOps
 
	gxhci_bus_›s
 = {

2838 .
wakeup_ídpoöt
 = 
xhci_wakeup_ídpoöt
,

2841 
	$usb_xhci_öô
(
XHCISèã
 *
xhci
, 
Devi˚Sèã
 *
dev
)

2843 
i
;

2845 
xhci
->
usb°s
 = 
USBSTS_HCH
;

2847 
	`usb_bus_√w
(&
xhci
->
bus
, &
xhci_bus_›s
, &xhci->
pci_dev
.
qdev
);

2849 
i
 = 0; i < 
MAXPORTS
; i++) {

2850 
	`mem£t
(&
xhci
->
p‹ts
[
i
], 0, (xhci->ports[i]));

2851 
	`usb_ªgi°î_p‹t
(&
xhci
->
bus
, &xhci->
p‹ts
[
i
].
p‹t
, xhci, i,

2852 &
xhci_p‹t_›s
,

2853 
USB_SPEED_MASK_LOW
 |

2854 
USB_SPEED_MASK_FULL
 |

2855 
USB_SPEED_MASK_HIGH
);

2857 
i
 = 0; i < 
MAXSLOTS
; i++) {

2858 
xhci
->
¶Ÿs
[
i
].
íabÀd
 = 0;

2860 
	}
}

2862 
	$usb_xhci_öô‚
(
PCIDevi˚
 *
dev
)

2864 
ªt
;

2866 
XHCISèã
 *
xhci
 = 
	`DO_UPCAST
(XHCISèã, 
pci_dev
, 
dev
);

2868 
xhci
->
pci_dev
.
c⁄fig
[
PCI_CLASS_PROG
] = 0x30;

2869 
xhci
->
pci_dev
.
c⁄fig
[
PCI_INTERRUPT_PIN
] = 0x01;

2870 
xhci
->
pci_dev
.
c⁄fig
[
PCI_CACHE_LINE_SIZE
] = 0x10;

2871 
xhci
->
pci_dev
.
c⁄fig
[0x60] = 0x30;

2873 
	`usb_xhci_öô
(
xhci
, &
dev
->
qdev
);

2875 
xhci
->
úq
 = xhci->
pci_dev
.irq[0];

2877 
	`mem‹y_ªgi⁄_öô_io
(&
xhci
->
mem
, &
xhci_mem_›s
, xhci,

2878 "xhci", 
LEN_REGS
);

2879 
	`pci_ªgi°î_b¨
(&
xhci
->
pci_dev
, 0,

2880 
PCI_BASE_ADDRESS_SPACE_MEMORY
|
PCI_BASE_ADDRESS_MEM_TYPE_64
,

2881 &
xhci
->
mem
);

2883 
ªt
 = 
	`pcõ_ˇp_öô
(&
xhci
->
pci_dev
, 0xa0, 
PCI_EXP_TYPE_ENDPOINT
, 0);

2884 
	`as£π
(
ªt
 >= 0);

2886 i‡(
xhci
->
msi
) {

2887 
ªt
 = 
	`msi_öô
(&
xhci
->
pci_dev
, 0x70, 1, 
åue
, 
Ál£
);

2888 
	`as£π
(
ªt
 >= 0);

2892 
	}
}

2894 
	$xhci_wrôe_c⁄fig
(
PCIDevi˚
 *
dev
, 
uöt32_t
 
addr
, uöt32_à
vÆ
,

2895 
Àn
)

2897 
XHCISèã
 *
xhci
 = 
	`DO_UPCAST
(XHCISèã, 
pci_dev
, 
dev
);

2899 
	`pci_deÁu…_wrôe_c⁄fig
(
dev
, 
addr
, 
vÆ
, 
Àn
);

2900 i‡(
xhci
->
msi
) {

2901 
	`msi_wrôe_c⁄fig
(
dev
, 
addr
, 
vÆ
, 
Àn
);

2903 
	}
}

2905 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_xhci
 = {

2906 .
«me
 = "xhci",

2907 .
	gunmigøèbÀ
 = 1,

2910 
Pr›îty
 
	gxhci_¥›îtõs
[] = {

2911 
DEFINE_PROP_UINT32
("msi", 
XHCISèã
, 
msi
, 0),

2912 
DEFINE_PROP_END_OF_LIST
(),

2915 
	$xhci_˛ass_öô
(
Obje˘Cœss
 *
kœss
, *
d©a
)

2917 
PCIDevi˚Cœss
 *
k
 = 
	`PCI_DEVICE_CLASS
(
kœss
);

2918 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

2920 
dc
->
vmsd
 = &
vm°©e_xhci
;

2921 
dc
->
¥›s
 = 
xhci_¥›îtõs
;

2922 
dc
->
ª£t
 = 
xhci_ª£t
;

2923 
k
->
öô
 = 
usb_xhci_öô‚
;

2924 
k
->
víd‹_id
 = 
PCI_VENDOR_ID_NEC
;

2925 
k
->
devi˚_id
 = 
PCI_DEVICE_ID_NEC_UPD720200
;

2926 
k
->
˛ass_id
 = 
PCI_CLASS_SERIAL_USB
;

2927 
k
->
ªvisi⁄
 = 0x03;

2928 
k
->
is_ex¥ess
 = 1;

2929 
k
->
c⁄fig_wrôe
 = 
xhci_wrôe_c⁄fig
;

2930 
	}
}

2932 
Ty≥Info
 
	gxhci_öfo
 = {

2933 .
«me
 = "nec-usb-xhci",

2934 .
	g∑ª¡
 = 
TYPE_PCI_DEVICE
,

2935 .
	gö°™˚_size
 = (
XHCISèã
),

2936 .
	g˛ass_öô
 = 
xhci_˛ass_öô
,

2939 
	$xhci_ªgi°î_ty≥s
()

2941 
	`ty≥_ªgi°î_°©ic
(&
xhci_öfo
);

2942 
	}
}

2944 
ty≥_öô
(
xhci_ªgi°î_ty≥s
)

	@host-bsd.c

27 
	~"qemu-comm⁄.h
"

28 
	~"m⁄ô‹.h
"

29 
	~"hw/usb.h
"

32 #unde‡
USB_SPEED_HIGH


33 #unde‡
USB_SPEED_FULL


34 #unde‡
USB_SPEED_LOW


36 
	~<sys/io˘l.h
>

37 #i‚de‡
__Døg⁄Fly__


38 
	~<dev/usb/usb.h
>

40 
	~<bus/usb/usb.h
>

48 
	#UGEN_DEBUG_LEVEL
 0

	)

51 
	tUSBSˇnFunc
(*
	t›aque
, 
	tbus_num
, 
	taddr
, 
	t˛ass_id
,

52 
	tvíd‹_id
, 
	t¥odu˘_id
,

53 c⁄° *
	t¥odu˘_«me
, 
	t•ìd
);

54 
usb_ho°_föd_devi˚
(*
pbus_num
, *
∑ddr
,

55 c⁄° *
dev«me
);

57 
	sUSBHo°Devi˚
 {

58 
USBDevi˚
 
	mdev
;

59 
	mï_fd
[
USB_MAX_ENDPOINTS
];

60 
	mdevfd
;

61 
	mdev∑th
[32];

62 } 
	tUSBHo°Devi˚
;

65 
	$ísuª_ï_›í
(
USBHo°Devi˚
 *
dev
, 
ï
, 
mode
)

67 
buf
[32];

68 
fd
;

71 
ï
 = 
	`UE_GET_ADDR
(ep);

73 i‡(
dev
->
ï_fd
[
ï
] < 0) {

74 #i‡
	`deföed
(
__FªeBSD__
Ë|| deföed(
__Døg⁄Fly__
)

75 
	`¢¥ötf
(
buf
, (bufË- 1, "%s.%d", 
dev
->
dev∑th
, 
ï
);

77 
	`¢¥ötf
(
buf
, (bufË- 1, "%s.%02d", 
dev
->
dev∑th
, 
ï
);

82 
fd
 = 
	`›í
(
buf
, 
O_RDWR
);

83 i‡(
fd
 < 0 && 
î∫o
 =
ENXIO
)

84 
fd
 = 
	`›í
(
buf
, 
mode
);

85 i‡(
fd
 < 0) {

86 #ifde‡
DEBUG


87 
	`¥ötf
("ensure_ep_open: failedÅo open deviceÉndpoint %s: %s\n",

88 
buf
, 
	`°ªº‹
(
î∫o
));

91 
dev
->
ï_fd
[
ï
] = 
fd
;

94  
dev
->
ï_fd
[
ï
];

95 
	}
}

97 
	$ísuª_ïs_˛o£d
(
USBHo°Devi˚
 *
dev
)

99 
ïnum
 = 1;

101 i‡(!
dev
)

104 
ïnum
 < 
USB_MAX_ENDPOINTS
) {

105 i‡(
dev
->
ï_fd
[
ïnum
] >= 0) {

106 
	`˛o£
(
dev
->
ï_fd
[
ïnum
]);

107 
dev
->
ï_fd
[
ïnum
] = -1;

109 
ïnum
++;

111 
	}
}

113 
	$usb_ho°_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

116 
USBHo°Devi˚
 *
s
 = (USBHo°Devi˚ *)
dev
;

118 
	}
}

124 
	$usb_ho°_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
,

125 
USBPackë
 *
p
,

126 
ªque°
,

127 
vÆue
,

128 
ödex
,

129 
Àngth
,

130 
uöt8_t
 *
d©a
)

132 
USBHo°Devi˚
 *
s
 = (USBHo°Devi˚ *)
dev
;

133 
usb_˘l_ªque°
 
ªq
;

134 
usb_Æt_öãrÁ˚
 
aiÁ˚
;

135 
ªt
, 
timeout
 = 50;

137 i‡((
ªque°
 >> 8Ë=
UT_WRITE_DEVICE
 &&

138 (
ªque°
 & 0xffË=
UR_SET_ADDRESS
) {

141 
dev
->
addr
 = 
vÆue
;

143 } i‡((
ªque°
 >> 8Ë=
UT_WRITE_DEVICE
 &&

144 (
ªque°
 & 0xffË=
UR_SET_CONFIG
) {

146 
	`ísuª_ïs_˛o£d
(
s
);

148 
ªt
 = 
	`io˘l
(
s
->
devfd
, 
USB_SET_CONFIG
, &
vÆue
);

149 i‡(
ªt
 < 0) {

150 #ifde‡
DEBUG


151 
	`¥ötf
("handle_control: failedÅo set configuration - %s\n",

152 
	`°ªº‹
(
î∫o
));

154  
USB_RET_STALL
;

158 } i‡((
ªque°
 >> 8Ë=
UT_WRITE_INTERFACE
 &&

159 (
ªque°
 & 0xffË=
UR_SET_INTERFACE
) {

161 
aiÁ˚
.
uai_öãrÁ˚_ödex
 = 
ödex
;

162 
aiÁ˚
.
uai_Æt_no
 = 
vÆue
;

164 
	`ísuª_ïs_˛o£d
(
s
);

165 
ªt
 = 
	`io˘l
(
s
->
devfd
, 
USB_SET_ALTINTERFACE
, &
aiÁ˚
);

166 i‡(
ªt
 < 0) {

167 #ifde‡
DEBUG


168 
	`¥ötf
("handle_control: failedÅo setálternate interface - %s\n",

169 
	`°ªº‹
(
î∫o
));

171  
USB_RET_STALL
;

176 
ªq
.
u¸_ªque°
.
bmReque°Ty≥
 = 
ªque°
 >> 8;

177 
ªq
.
u¸_ªque°
.
bReque°
 = 
ªque°
 & 0xff;

178 
	`USETW
(
ªq
.
u¸_ªque°
.
wVÆue
, 
vÆue
);

179 
	`USETW
(
ªq
.
u¸_ªque°
.
wIndex
, 
ödex
);

180 
	`USETW
(
ªq
.
u¸_ªque°
.
wLígth
, 
Àngth
);

181 
ªq
.
u¸_d©a
 = 
d©a
;

182 
ªq
.
u¸_Êags
 = 
USBD_SHORT_XFER_OK
;

184 
ªt
 = 
	`io˘l
(
s
->
devfd
, 
USB_SET_TIMEOUT
, &
timeout
);

185 #i‡
	`deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
)

186 i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

188 i‡(
ªt
 < 0) {

190 #ifde‡
DEBUG


191 
	`¥ötf
("handle_control: settingÅimeout failed - %s\n",

192 
	`°ªº‹
(
î∫o
));

196 
ªt
 = 
	`io˘l
(
s
->
devfd
, 
USB_DO_REQUEST
, &
ªq
);

199 i‡(
ªt
 < 0) {

200 #ifde‡
DEBUG


201 
	`¥ötf
("handle_control:ÉrroráfterÑequest - %s\n",

202 
	`°ªº‹
(
î∫o
));

204  
USB_RET_NAK
;

206  
ªq
.
u¸_a˘Àn
;

209 
	}
}

211 
	$usb_ho°_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

213 
USBHo°Devi˚
 *
s
 = (USBHo°Devi˚ *)
dev
;

214 
ªt
, 
fd
, 
mode
;

215 
⁄e
 = 1, 
sh‹çackë
 = 0, 
timeout
 = 50;

216 
sig£t_t
 
√w_mask
, 
ﬁd_mask
;

217 
uöt8_t
 
devï
 = 
p
->
ï
->
ƒ
;

220 
	`sigem±y£t
(&
√w_mask
);

221 
	`sigadd£t
(&
√w_mask
, 
SIGALRM
);

222 
	`sig¥ocmask
(
SIG_BLOCK
, &
√w_mask
, &
ﬁd_mask
);

224 i‡(
p
->
pid
 =
USB_TOKEN_IN
) {

225 
devï
 |= 0x80;

226 
mode
 = 
O_RDONLY
;

227 
sh‹çackë
 = 1;

229 
mode
 = 
O_WRONLY
;

232 
fd
 = 
	`ísuª_ï_›í
(
s
, 
devï
, 
mode
);

233 i‡(
fd
 < 0) {

234 
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁd_mask
, 
NULL
);

235  
USB_RET_NODEV
;

238 i‡(
	`io˘l
(
fd
, 
USB_SET_TIMEOUT
, &
timeout
) < 0) {

239 #ifde‡
DEBUG


240 
	`¥ötf
("handle_data: failedÅo setÅimeout - %s\n",

241 
	`°ªº‹
(
î∫o
));

245 i‡(
sh‹çackë
) {

246 i‡(
	`io˘l
(
fd
, 
USB_SET_SHORT_XFER
, &
⁄e
) < 0) {

247 #ifde‡
DEBUG


248 
	`¥ötf
("handle_data: failedÅo set short xfer mode - %s\n",

249 
	`°ªº‹
(
î∫o
));

251 
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁd_mask
, 
NULL
);

255 i‡(
p
->
pid
 =
USB_TOKEN_IN
)

256 
ªt
 = 
	`ªadv
(
fd
, 
p
->
iov
.iov,Ö->iov.
niov
);

258 
ªt
 = 
	`wrôev
(
fd
, 
p
->
iov
.iov,Ö->iov.
niov
);

260 
	`sig¥ocmask
(
SIG_SETMASK
, &
ﬁd_mask
, 
NULL
);

262 i‡(
ªt
 < 0) {

263 #ifde‡
DEBUG


264 
	`¥ötf
("handle_data:Érroráfter %s data - %s\n",

265 
pid
 =
USB_TOKEN_IN
 ? "ªadög" : "wrôög", 
	`°ªº‹
(
î∫o
));

267 
î∫o
) {

268 
ETIMEDOUT
:

269 
EINTR
:

270  
USB_RET_NAK
;

272  
USB_RET_STALL
;

275  
ªt
;

277 
	}
}

279 
	$usb_ho°_h™dÀ_de°roy
(
USBDevi˚
 *
›aque
)

281 
USBHo°Devi˚
 *
s
 = (USBHo°Devi˚ *)
›aque
;

282 
i
;

284 
i
 = 0; i < 
USB_MAX_ENDPOINTS
; i++)

285 i‡(
s
->
ï_fd
[
i
] >= 0)

286 
	`˛o£
(
s
->
ï_fd
[
i
]);

288 i‡(
s
->
devfd
 < 0)

291 
	`˛o£
(
s
->
devfd
);

293 
	`g_‰ì
(
s
);

294 
	}
}

296 
	$usb_ho°_öô‚
(
USBDevi˚
 *
dev
)

299 
	}
}

301 
USBDevi˚
 *
	$usb_ho°_devi˚_›í
(
USBBus
 *
gue°_bus
, c⁄° *
dev«me
)

303 
usb_devi˚_öfo
 
bus_öfo
, 
dev_öfo
;

304 
USBDevi˚
 *
d
 = 
NULL
, *
ªt
 = NULL;

305 
USBHo°Devi˚
 *
dev
;

306 
˘Õ©h
[
PATH_MAX
 + 1];

307 
bu•©h
[
PATH_MAX
 + 1];

308 
bfd
, 
dfd
, 
bus
, 
addªss
, 
i
;

309 
ugídebug
 = 
UGEN_DEBUG_LEVEL
;

311 i‡(
	`usb_ho°_föd_devi˚
(&
bus
, &
addªss
, 
dev«me
) < 0) {

312 
Áû
;

315 
	`¢¥ötf
(
bu•©h
, 
PATH_MAX
, "/dev/usb%d", 
bus
);

317 
bfd
 = 
	`›í
(
bu•©h
, 
O_RDWR
);

318 i‡(
bfd
 < 0) {

319 #ifde‡
DEBUG


320 
	`¥ötf
("usb_host_device_open: failedÅo open usb bus - %s\n",

321 
	`°ªº‹
(
î∫o
));

323 
Áû
;

326 
bus_öfo
.
udi_addr
 = 
addªss
;

327 i‡(
	`io˘l
(
bfd
, 
USB_DEVICEINFO
, &
bus_öfo
) < 0) {

328 #ifde‡
DEBUG


329 
	`¥ötf
("usb_host_device_open: failedÅo grab bus information - %s\n",

330 
	`°ªº‹
(
î∫o
));

332 
Áû_bfd
;

335 #i‡
	`deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
Ë|| deföed(
__Døg⁄Fly__
)

336 
	`¢¥ötf
(
˘Õ©h
, 
PATH_MAX
, "/dev/%s", 
bus_öfo
.
udi_dev«mes
[0]);

338 
	`¢¥ötf
(
˘Õ©h
, 
PATH_MAX
, "/dev/%s.00", 
bus_öfo
.
udi_dev«mes
[0]);

341 
dfd
 = 
	`›í
(
˘Õ©h
, 
O_RDWR
);

342 i‡(
dfd
 < 0) {

343 
dfd
 = 
	`›í
(
˘Õ©h
, 
O_RDONLY
);

344 i‡(
dfd
 < 0) {

345 #ifde‡
DEBUG


346 
	`¥ötf
("usb_host_device_open: failedÅo open usb device %s - %s\n",

347 
˘Õ©h
, 
	`°ªº‹
(
î∫o
));

350 
Áû_dfd
;

353 i‡(
	`io˘l
(
dfd
, 
USB_GET_DEVICEINFO
, &
dev_öfo
) < 0) {

354 #ifde‡
DEBUG


355 
	`¥ötf
("usb_host_device_open: failedÅo grab device info - %s\n",

356 
	`°ªº‹
(
î∫o
));

358 
Áû_dfd
;

361 
d
 = 
	`usb_¸óã
(
gue°_bus
, "usb-host");

362 
dev
 = 
	`DO_UPCAST
(
USBHo°Devi˚
, dev, 
d
);

364 i‡(
dev_öfo
.
udi_•ìd
 == 1) {

365 
dev
->dev.
•ìd
 = 
USB_SPEED_LOW
 - 1;

366 
dev
->dev.
•ìdmask
 = 
USB_SPEED_MASK_LOW
;

368 
dev
->dev.
•ìd
 = 
USB_SPEED_FULL
 - 1;

369 
dev
->dev.
•ìdmask
 = 
USB_SPEED_MASK_FULL
;

372 i‡(
	`°∫cmp
(
dev_öfo
.
udi_¥odu˘
, "product", 7) != 0) {

373 
	`p°r˝y
(
dev
->dev.
¥odu˘_desc
, (dev->dev.product_desc),

374 
dev_öfo
.
udi_¥odu˘
);

376 
	`¢¥ötf
(
dev
->dev.
¥odu˘_desc
, (dev->dev.product_desc),

377 "ho°:%s", 
dev«me
);

380 
	`p°r˝y
(
dev
->
dev∑th
, (dev->devpath), "/dev/");

381 
	`p°rˇt
(
dev
->
dev∑th
, (dev->dev∑th), 
dev_öfo
.
udi_dev«mes
[0]);

384 
i
 = 0; i < 
USB_MAX_ENDPOINTS
; i++) {

385 
dev
->
ï_fd
[
i
] = -1;

388 
	`io˘l
(
dfd
, 
USB_SETDEBUG
, &
ugídebug
);

390 
ªt
 = (
USBDevi˚
 *)
dev
;

392 
Áû_dfd
:

393 
	`˛o£
(
dfd
);

394 
Áû_bfd
:

395 
	`˛o£
(
bfd
);

396 
Áû
:

397  
ªt
;

398 
	}
}

400 
	$usb_ho°_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

402 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

404 
uc
->
¥odu˘_desc
 = "USB Host Device";

405 
uc
->
öô
 = 
usb_ho°_öô‚
;

406 
uc
->
h™dÀ_ª£t
 = 
usb_ho°_h™dÀ_ª£t
;

407 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_ho°_h™dÀ_c⁄åﬁ
;

408 
uc
->
h™dÀ_d©a
 = 
usb_ho°_h™dÀ_d©a
;

409 
uc
->
h™dÀ_de°roy
 = 
usb_ho°_h™dÀ_de°roy
;

410 
	}
}

412 
Ty≥Info
 
	gusb_ho°_dev_öfo
 = {

413 .
«me
 = "usb-host",

414 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

415 .
	gö°™˚_size
 = (
USBHo°Devi˚
),

416 .
	g˛ass_öô
 = 
usb_ho°_˛ass_öô‚
,

419 
	$usb_ho°_ªgi°î_ty≥s
()

421 
	`ty≥_ªgi°î_°©ic
(&
usb_ho°_dev_öfo
);

422 
	}
}

424 
	$ty≥_öô
(
usb_ho°_ªgi°î_ty≥s
)

426 
	$usb_ho°_sˇn
(*
›aque
, 
USBSˇnFunc
 *
func
)

428 
usb_devi˚_öfo
 
bus_öfo
;

429 
usb_devi˚_öfo
 
dev_öfo
;

430 
uöt16_t
 
víd‹_id
, 
¥odu˘_id
, 
˛ass_id
, 
•ìd
;

431 
bfd
, 
dfd
, 
bus
, 
addªss
;

432 
busbuf
[20], 
devbuf
[20], 
¥odu˘_«me
[256];

433 
ªt
 = 0;

435 
bus
 = 0; bus < 10; bus++) {

437 
	`¢¥ötf
(
busbuf
, (busbufË- 1, "/dev/usb%d", 
bus
);

438 
bfd
 = 
	`›í
(
busbuf
, 
O_RDWR
);

439 i‡(
bfd
 < 0)

442 
addªss
 = 1;áddress < 127;áddress++) {

444 
bus_öfo
.
udi_addr
 = 
addªss
;

445 i‡(
	`io˘l
(
bfd
, 
USB_DEVICEINFO
, &
bus_öfo
) < 0)

449 i‡(
	`°∫cmp
(
bus_öfo
.
udi_dev«mes
[0], "ugen", 4) != 0)

452 #i‡
	`deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
Ë|| deföed(
__Døg⁄Fly__
)

453 
	`¢¥ötf
(
devbuf
, (devbufË- 1, "/dev/%s", 
bus_öfo
.
udi_dev«mes
[0]);

455 
	`¢¥ötf
(
devbuf
, (devbufË- 1, "/dev/%s.00", 
bus_öfo
.
udi_dev«mes
[0]);

458 
dfd
 = 
	`›í
(
devbuf
, 
O_RDONLY
);

459 i‡(
dfd
 < 0) {

460 #ifde‡
DEBUG


461 
	`¥ötf
("usb_ho°_sˇn: couldn'à›í devi˚ %†- %s\n", 
devbuf
,

462 
	`°ªº‹
(
î∫o
));

467 i‡(
	`io˘l
(
dfd
, 
USB_GET_DEVICEINFO
, &
dev_öfo
) < 0)

468 
	`¥ötf
("usb_host_scan: couldn't get device information for %s - %s\n",

469 
devbuf
, 
	`°ªº‹
(
î∫o
));

473 
víd‹_id
 = 
dev_öfo
.
udi_víd‹No
;

474 
¥odu˘_id
 = 
dev_öfo
.
udi_¥odu˘No
;

475 
˛ass_id
 = 
dev_öfo
.
udi_˛ass
;

476 
•ìd
 = 
dev_öfo
.
udi_•ìd
;

478 i‡(
	`°∫cmp
(
dev_öfo
.
udi_¥odu˘
, "product", 7) != 0)

479 
	`p°r˝y
(
¥odu˘_«me
, (product_name),

480 
dev_öfo
.
udi_¥odu˘
);

482 
¥odu˘_«me
[0] = '\0';

484 
ªt
 = 
	`func
(
›aque
, 
bus
, 
addªss
, 
˛ass_id
, 
víd‹_id
,

485 
¥odu˘_id
, 
¥odu˘_«me
, 
•ìd
);

487 
	`˛o£
(
dfd
);

489 i‡(
ªt
)

490 
the_íd
;

493 
	`˛o£
(
bfd
);

496 
the_íd
:

497  
ªt
;

498 
	}
}

500 
	sFödDevi˚Sèã
 {

501 
	mvíd‹_id
;

502 
	m¥odu˘_id
;

503 
	mbus_num
;

504 
	maddr
;

505 } 
	tFödDevi˚Sèã
;

507 
	$usb_ho°_föd_devi˚_sˇn
(*
›aque
, 
bus_num
, 
addr
,

508 
˛ass_id
,

509 
víd‹_id
, 
¥odu˘_id
,

510 c⁄° *
¥odu˘_«me
, 
•ìd
)

512 
FödDevi˚Sèã
 *
s
 = 
›aque
;

513 i‡(
víd‹_id
 =
s
->vendor_id &&

514 
¥odu˘_id
 =
s
->product_id) {

515 
s
->
bus_num
 = bus_num;

516 
s
->
addr
 =áddr;

521 
	}
}

527 
	$usb_ho°_föd_devi˚
(*
pbus_num
, *
∑ddr
,

528 c⁄° *
dev«me
)

530 c⁄° *
p
;

531 
ªt
;

532 
FödDevi˚Sèã
 
fs
;

534 
p
 = 
	`°rchr
(
dev«me
, '.');

535 i‡(
p
) {

536 *
pbus_num
 = 
	`°πoul
(
dev«me
, 
NULL
, 0);

537 *
∑ddr
 = 
	`°πoul
(
p
 + 1, 
NULL
, 0);

540 
p
 = 
	`°rchr
(
dev«me
, ':');

541 i‡(
p
) {

542 
fs
.
víd‹_id
 = 
	`°πoul
(
dev«me
, 
NULL
, 16);

543 
fs
.
¥odu˘_id
 = 
	`°πoul
(
p
 + 1, 
NULL
, 16);

544 
ªt
 = 
	`usb_ho°_sˇn
(&
fs
, 
usb_ho°_föd_devi˚_sˇn
);

545 i‡(
ªt
) {

546 *
pbus_num
 = 
fs
.
bus_num
;

547 *
∑ddr
 = 
fs
.
addr
;

552 
	}
}

557 
	susb_˛ass_öfo
 {

558 
	m˛ass
;

559 c⁄° *
	m˛ass_«me
;

562 c⁄° 
usb_˛ass_öfo
 
	gusb_˛ass_öfo
[] = {

563 { 
USB_CLASS_AUDIO
, "Audio"},

564 { 
USB_CLASS_COMM
, "Communication"},

565 { 
USB_CLASS_HID
, "HID"},

566 { 
USB_CLASS_HUB
, "Hub" },

567 { 
USB_CLASS_PHYSICAL
, "Physical" },

568 { 
USB_CLASS_PRINTER
, "Printer" },

569 { 
USB_CLASS_MASS_STORAGE
, "Storage" },

570 { 
USB_CLASS_CDC_DATA
, "Data" },

571 { 
USB_CLASS_APP_SPEC
, "Application Specific" },

572 { 
USB_CLASS_VENDOR_SPEC
, "Vendor Specific" },

573 { 
USB_CLASS_STILL_IMAGE
, "Still Image" },

574 { 
USB_CLASS_CSCID
, "Smart Card" },

575 { 
USB_CLASS_CONTENT_SEC
, "Content Security" },

576 { -1, 
NULL
 }

579 c⁄° *
	$usb_˛ass_°r
(
uöt8_t
 
˛ass
)

581 c⁄° 
usb_˛ass_öfo
 *
p
;

582 
p
 = 
usb_˛ass_öfo
;Ö->
˛ass
 != -1;Ö++) {

583 i‡(
p
->
˛ass
 == class)

586  
p
->
˛ass_«me
;

587 
	}
}

589 
	$usb_öfo_devi˚
(
M⁄ô‹
 *
m⁄
, 
bus_num
, 
addr
, 
˛ass_id
,

590 
víd‹_id
, 
¥odu˘_id
,

591 c⁄° *
¥odu˘_«me
,

592 
•ìd
)

594 c⁄° *
˛ass_°r
, *
•ìd_°r
;

596 
•ìd
) {

597 
USB_SPEED_LOW
:

598 
•ìd_°r
 = "1.5";

600 
USB_SPEED_FULL
:

601 
•ìd_°r
 = "12";

603 
USB_SPEED_HIGH
:

604 
•ìd_°r
 = "480";

607 
•ìd_°r
 = "?";

611 
	`m⁄ô‹_¥ötf
(
m⁄
, " Device %d.%d, speed %s Mb/s\n",

612 
bus_num
, 
addr
, 
•ìd_°r
);

613 
˛ass_°r
 = 
	`usb_˛ass_°r
(
˛ass_id
);

614 i‡(
˛ass_°r
)

615 
	`m⁄ô‹_¥ötf
(
m⁄
, " %s:", 
˛ass_°r
);

617 
	`m⁄ô‹_¥ötf
(
m⁄
, " Cœs†%02x:", 
˛ass_id
);

618 
	`m⁄ô‹_¥ötf
(
m⁄
, " USB devi˚ %04x:%04x", 
víd‹_id
, 
¥odu˘_id
);

619 i‡(
¥odu˘_«me
[0] != '\0')

620 
	`m⁄ô‹_¥ötf
(
m⁄
, ", %s", 
¥odu˘_«me
);

621 
	`m⁄ô‹_¥ötf
(
m⁄
, "\n");

622 
	}
}

624 
	$usb_ho°_öfo_devi˚
(*
›aque
,

625 
bus_num
, 
addr
,

626 
˛ass_id
,

627 
víd‹_id
, 
¥odu˘_id
,

628 c⁄° *
¥odu˘_«me
,

629 
•ìd
)

631 
M⁄ô‹
 *
m⁄
 = 
›aque
;

633 
	`usb_öfo_devi˚
(
m⁄
, 
bus_num
, 
addr
, 
˛ass_id
, 
víd‹_id
, 
¥odu˘_id
,

634 
¥odu˘_«me
, 
•ìd
);

636 
	}
}

638 
	$usb_ho°_öfo
(
M⁄ô‹
 *
m⁄
)

640 
	`usb_ho°_sˇn
(
m⁄
, 
usb_ho°_öfo_devi˚
);

641 
	}
}

644 
	$usb_ho°_devi˚_˛o£
(c⁄° *
dev«me
)

647 
	}
}

	@host-linux.c

33 
	~"qemu-comm⁄.h
"

34 
	~"qemu-timî.h
"

35 
	~"m⁄ô‹.h
"

36 
	~"sy£mu.h
"

37 
	~"åa˚.h
"

39 
	~<dúít.h
>

40 
	~<sys/io˘l.h
>

42 
	~<löux/usbdevi˚_fs.h
>

43 
	~<löux/vîsi⁄.h
>

44 
	~"hw/usb.h
"

45 
	~"hw/usb/desc.h
"

48 
	susb_˘æå™s„r
 {

49 
uöt8_t
 
	mbReque°Ty≥
;

50 
uöt8_t
 
	mbReque°
;

51 
uöt16_t
 
	mwVÆue
;

52 
uöt16_t
 
	mwIndex
;

53 
uöt16_t
 
	mwLígth
;

54 
uöt32_t
 
	mtimeout
;

55 *
	md©a
;

58 
	tUSBSˇnFunc
(*
	t›aque
, 
	tbus_num
, 
	taddr
, c⁄° *
	tp‹t
,

59 
	t˛ass_id
, 
	tvíd‹_id
, 
	t¥odu˘_id
,

60 c⁄° *
	t¥odu˘_«me
, 
	t•ìd
);

64 #ifde‡
DEBUG


65 
	#DPRINTF
 
¥ötf


	)

67 
	#DPRINTF
(...)

	)

70 
	#PRODUCT_NAME_SZ
 32

	)

71 
	#MAX_PORTLEN
 16

	)

74 
	#ISO_FRAME_DESC_PER_URB
 32

	)

77 
	#MAX_USBFS_BUFFER_SIZE
 16384

	)

79 
AsyncURB
 
	tAsyncURB
;

81 
	sídp_d©a
 {

82 
uöt8_t
 
	mhÆãd
;

83 
uöt8_t
 
	miso_°¨ãd
;

84 
AsyncURB
 *
	miso_urb
;

85 
	miso_urb_idx
;

86 
	miso_buf„r_u£d
;

87 
	möÊight
;

90 
	sUSBAutoFûãr
 {

91 
uöt32_t
 
	mbus_num
;

92 
uöt32_t
 
	maddr
;

93 *
	mp‹t
;

94 
uöt32_t
 
	mvíd‹_id
;

95 
uöt32_t
 
	m¥odu˘_id
;

98 
	eUSBHo°Devi˚O±i⁄s
 {

99 
	mUSB_HOST_OPT_PIPELINE
,

102 
	sUSBHo°Devi˚
 {

103 
USBDevi˚
 
	mdev
;

104 
	mfd
;

105 
	mhub_fd
;

106 
	mhub_p‹t
;

108 
uöt8_t
 
	mdes¸
[8192];

109 
	mdes¸_Àn
;

110 
	m˛osög
;

111 
uöt32_t
 
	miso_urb_cou¡
;

112 
uöt32_t
 
	m›ti⁄s
;

113 
NŸifõr
 
	mexô
;

114 
QEMUBH
 *
	mbh
;

116 
ídp_d©a
 
	mï_ö
[
USB_MAX_ENDPOINTS
];

117 
ídp_d©a
 
	mï_out
[
USB_MAX_ENDPOINTS
];

118 
QLIST_HEAD
(, 
AsyncURB
Ë
	maurbs
;

121 
	mbus_num
;

122 
	maddr
;

123 
	mp‹t
[
MAX_PORTLEN
];

124 
USBAutoFûãr
 
	mm©ch
;

125 
öt32_t
 
	mboŸödex
;

126 
	m£í
, 
	mîrcou¡
;

128 
QTAILQ_ENTRY
(
USBHo°Devi˚
Ë
	m√xt
;

129 } 
	tUSBHo°Devi˚
;

131 
	$QTAILQ_HEAD
(, 
USBHo°Devi˚
Ë
ho°devs
 = 
	`QTAILQ_HEAD_INITIALIZER
(hostdevs);

133 
	`usb_ho°_˛o£
(
USBHo°Devi˚
 *
dev
);

134 
	`∑r£_fûãr
(c⁄° *
•ec
, 
USBAutoFûãr
 *
f
);

135 
	`usb_ho°_auto_check
(*
unu£d
);

136 
	`usb_ho°_ªad_fûe
(*
löe
, 
size_t
 
löe_size
,

137 c⁄° *
devi˚_fûe
, c⁄° *
devi˚_«me
);

138 
	`usb_löux_upd©e_ídp_èbÀ
(
USBHo°Devi˚
 *
s
);

140 
	$usb_ho°_usbfs_ty≥
(
USBHo°Devi˚
 *
s
, 
USBPackë
 *
p
)

142 c⁄° 
usbfs
[] = {

143 [
USB_ENDPOINT_XFER_CONTROL
] = 
USBDEVFS_URB_TYPE_CONTROL
,

144 [
USB_ENDPOINT_XFER_ISOC
] = 
USBDEVFS_URB_TYPE_ISO
,

145 [
USB_ENDPOINT_XFER_BULK
] = 
USBDEVFS_URB_TYPE_BULK
,

146 [
USB_ENDPOINT_XFER_INT
] = 
USBDEVFS_URB_TYPE_INTERRUPT
,

148 
uöt8_t
 
ty≥
 = 
p
->
ï
->type;

149 
	`as£π
(
ty≥
 < 
	`ARRAY_SIZE
(
usbfs
));

150  
usbfs
[
ty≥
];

151 
	}
}

153 
	$usb_ho°_do_ª£t
(
USBHo°Devi˚
 *
dev
)

155 
timevÆ
 
s
, 
e
;

156 
uöt32_t
 
u£cs
;

157 
ªt
;

159 
	`gëtimeofday
(&
s
, 
NULL
);

160 
ªt
 = 
	`io˘l
(
dev
->
fd
, 
USBDEVFS_RESET
);

161 
	`gëtimeofday
(&
e
, 
NULL
);

162 
u£cs
 = (
e
.
tv_£c
 - 
s
.tv_sec) * 1000000;

163 
u£cs
 +
e
.
tv_u£c
 - 
s
.tv_usec;

164 i‡(
u£cs
 > 1000000) {

166 
	`Ârötf
(
°dîr
, "husb: device %d:%dÑesetÅook %d.%06d seconds\n",

167 
dev
->
bus_num
, dev->
addr
, 
u£cs
 / 1000000, usecs % 1000000);

169  
ªt
;

170 
	}
}

172 
ídp_d©a
 *
	$gë_ídp
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

174 
ídp_d©a
 *
ïs
 = 
pid
 =
USB_TOKEN_IN
 ? 
s
->
ï_ö
 : s->
ï_out
;

175 
	`as£π
(
pid
 =
USB_TOKEN_IN
 ||Öid =
USB_TOKEN_OUT
);

176 
	`as£π
(
ï
 > 0 &&É∞<
USB_MAX_ENDPOINTS
);

177  
ïs
 + 
ï
 - 1;

178 
	}
}

180 
	$is_isoc
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

182  
	`usb_ï_gë_ty≥
(&
s
->
dev
, 
pid
, 
ï
Ë=
USB_ENDPOINT_XFER_ISOC
;

183 
	}
}

185 
	$is_vÆid
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

187  
	`usb_ï_gë_ty≥
(&
s
->
dev
, 
pid
, 
ï
Ë!
USB_ENDPOINT_XFER_INVALID
;

188 
	}
}

190 
	$is_hÆãd
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

192  
	`gë_ídp
(
s
, 
pid
, 
ï
)->
hÆãd
;

193 
	}
}

195 
	$˛ór_hÆt
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

197 
	`åa˚_usb_ho°_ï_˛ór_hÆt
(
s
->
bus_num
, s->
addr
, 
ï
);

198 
	`gë_ídp
(
s
, 
pid
, 
ï
)->
hÆãd
 = 0;

199 
	}
}

201 
	$£t_hÆt
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

203 i‡(
ï
 != 0) {

204 
	`åa˚_usb_ho°_ï_£t_hÆt
(
s
->
bus_num
, s->
addr
, 
ï
);

205 
	`gë_ídp
(
s
, 
pid
, 
ï
)->
hÆãd
 = 1;

207 
	}
}

209 
	$is_iso_°¨ãd
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

211  
	`gë_ídp
(
s
, 
pid
, 
ï
)->
iso_°¨ãd
;

212 
	}
}

214 
	$˛ór_iso_°¨ãd
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

216 
	`åa˚_usb_ho°_iso_°›
(
s
->
bus_num
, s->
addr
, 
ï
);

217 
	`gë_ídp
(
s
, 
pid
, 
ï
)->
iso_°¨ãd
 = 0;

218 
	}
}

220 
	$£t_iso_°¨ãd
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

222 
ídp_d©a
 *
e
 = 
	`gë_ídp
(
s
, 
pid
, 
ï
);

224 
	`åa˚_usb_ho°_iso_°¨t
(
s
->
bus_num
, s->
addr
, 
ï
);

225 i‡(!
e
->
iso_°¨ãd
) {

226 
e
->
iso_°¨ãd
 = 1;

227 
e
->
öÊight
 = 0;

229 
	}
}

231 
	$ch™ge_iso_öÊight
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
, 
vÆue
)

233 
ídp_d©a
 *
e
 = 
	`gë_ídp
(
s
, 
pid
, 
ï
);

235 
e
->
öÊight
 +
vÆue
;

236  
e
->
öÊight
;

237 
	}
}

239 
	$£t_iso_urb
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
, 
AsyncURB
 *
iso_urb
)

241 
	`gë_ídp
(
s
, 
pid
, 
ï
)->
iso_urb
 = iso_urb;

242 
	}
}

244 
AsyncURB
 *
	$gë_iso_urb
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

246  
	`gë_ídp
(
s
, 
pid
, 
ï
)->
iso_urb
;

247 
	}
}

249 
	$£t_iso_urb_idx
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
, 
i
)

251 
	`gë_ídp
(
s
, 
pid
, 
ï
)->
iso_urb_idx
 = 
i
;

252 
	}
}

254 
	$gë_iso_urb_idx
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

256  
	`gë_ídp
(
s
, 
pid
, 
ï
)->
iso_urb_idx
;

257 
	}
}

259 
	$£t_iso_buf„r_u£d
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
, 
i
)

261 
	`gë_ídp
(
s
, 
pid
, 
ï
)->
iso_buf„r_u£d
 = 
i
;

262 
	}
}

264 
	$gë_iso_buf„r_u£d
(
USBHo°Devi˚
 *
s
, 
pid
, 
ï
)

266  
	`gë_ídp
(
s
, 
pid
, 
ï
)->
iso_buf„r_u£d
;

267 
	}
}

274 
	sAsyncURB


276 
usbdevfs_urb
 
	murb
;

277 
usbdevfs_iso_∑ckë_desc
 
	miso˝d
[
ISO_FRAME_DESC_PER_URB
];

278 
USBHo°Devi˚
 *
	mhdev
;

279 
QLIST_ENTRY
(
AsyncURB
Ë
	m√xt
;

282 
USBPackë
 *
	m∑ckë
;

283 
	mm‹e
;

286 
	miso_‰ame_idx
;

289 
AsyncURB
 *
	$async_Æloc
(
USBHo°Devi˚
 *
s
)

291 
AsyncURB
 *
aurb
 = 
	`g_mÆloc0
((AsyncURB));

292 
aurb
->
hdev
 = 
s
;

293 
	`QLIST_INSERT_HEAD
(&
s
->
aurbs
, 
aurb
, 
√xt
);

294  
aurb
;

295 
	}
}

297 
	$async_‰ì
(
AsyncURB
 *
aurb
)

299 
	`QLIST_REMOVE
(
aurb
, 
√xt
);

300 
	`g_‰ì
(
aurb
);

301 
	}
}

303 
	$do_disc⁄√˘
(
USBHo°Devi˚
 *
s
)

305 
	`usb_ho°_˛o£
(
s
);

306 
	`usb_ho°_auto_check
(
NULL
);

307 
	}
}

309 
	$async_com∂ëe
(*
›aque
)

311 
USBHo°Devi˚
 *
s
 = 
›aque
;

312 
AsyncURB
 *
aurb
;

313 
urbs
 = 0;

316 
USBPackë
 *
p
;

318 
r
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_REAPURBNDELAY
, &
aurb
);

319 i‡(
r
 < 0) {

320 i‡(
î∫o
 =
EAGAIN
) {

321 i‡(
urbs
 > 2) {

323 
	`åa˚_usb_ho°_iso_m™y_urbs
(
s
->
bus_num
, s->
addr
, 
urbs
);

327 i‡(
î∫o
 =
ENODEV
) {

328 i‡(!
s
->
˛osög
) {

329 
	`åa˚_usb_ho°_disc⁄√˘
(
s
->
bus_num
, s->
addr
);

330 
	`do_disc⁄√˘
(
s
);

335 
	`≥º‹
("USBDEVFS_REAPURBNDELAY");

339 
	`DPRINTF
("husb:ásync completed.áurb %p status %dálen %d\n",

340 
aurb
,áurb->
urb
.
°©us
,áurb->urb.
a˘uÆ_Àngth
);

344 i‡(
aurb
->
iso_‰ame_idx
 == -1) {

345 
öÊight
;

346 
pid
 = (
aurb
->
urb
.
ídpoöt
 & 
USB_DIR_IN
) ?

347 
USB_TOKEN_IN
 : 
USB_TOKEN_OUT
;

348 
ï
 = 
aurb
->
urb
.
ídpoöt
 & 0xf;

349 i‡(
aurb
->
urb
.
°©us
 =-
EPIPE
) {

350 
	`£t_hÆt
(
s
, 
pid
, 
ï
);

352 
aurb
->
iso_‰ame_idx
 = 0;

353 
urbs
++;

354 
öÊight
 = 
	`ch™ge_iso_öÊight
(
s
, 
pid
, 
ï
, -1);

355 i‡(
öÊight
 =0 && 
	`is_iso_°¨ãd
(
s
, 
pid
, 
ï
)) {

357 
	`åa˚_usb_ho°_iso_out_of_bufs
(
s
->
bus_num
, s->
addr
, 
ï
);

362 
p
 = 
aurb
->
∑ckë
;

363 
	`åa˚_usb_ho°_urb_com∂ëe
(
s
->
bus_num
, s->
addr
, 
aurb
,áurb->
urb
.
°©us
,

364 
aurb
->
urb
.
a˘uÆ_Àngth
,áurb->
m‹e
);

366 i‡(
p
) {

367 
aurb
->
urb
.
°©us
) {

369 
p
->
ªsu…
 +
aurb
->
urb
.
a˘uÆ_Àngth
;

372 -
EPIPE
:

373 
	`£t_hÆt
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
);

374 
p
->
ªsu…
 = 
USB_RET_STALL
;

377 -
EOVERFLOW
:

378 
p
->
ªsu…
 = 
USB_RET_BABBLE
;

382 
p
->
ªsu…
 = 
USB_RET_IOERROR
;

386 i‡(
aurb
->
urb
.
ty≥
 =
USBDEVFS_URB_TYPE_CONTROL
) {

387 
	`åa˚_usb_ho°_ªq_com∂ëe
(
s
->
bus_num
, s->
addr
, 
p
,Ö->
ªsu…
);

388 
	`usb_gíîic_async_˘æ_com∂ëe
(&
s
->
dev
, 
p
);

389 } i‡(!
aurb
->
m‹e
) {

390 
	`åa˚_usb_ho°_ªq_com∂ëe
(
s
->
bus_num
, s->
addr
, 
p
,Ö->
ªsu…
);

391 
	`usb_∑ckë_com∂ëe
(&
s
->
dev
, 
p
);

395 
	`async_‰ì
(
aurb
);

397 
	}
}

399 
	$usb_ho°_async_ˇn˚l
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

401 
USBHo°Devi˚
 *
s
 = 
	`DO_UPCAST
(USBHo°Devi˚, 
dev
, dev);

402 
AsyncURB
 *
aurb
;

404 
	`åa˚_usb_ho°_ªq_ˇn˚Àd
(
s
->
bus_num
, s->
addr
, 
p
);

406 
	`QLIST_FOREACH
(
aurb
, &
s
->
aurbs
, 
√xt
) {

407 i‡(
p
 !
aurb
->
∑ckë
) {

411 
	`åa˚_usb_ho°_urb_ˇn˚Àd
(
s
->
bus_num
, s->
addr
, 
aurb
);

414 
aurb
->
∑ckë
 = 
NULL
;

416 
r
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_DISCARDURB
, 
aurb
);

417 i‡(
r
 < 0) {

418 
	`DPRINTF
("husb:ásync. disˇrd urb faûedÉºnÿ%d\n", 
î∫o
);

421 
	}
}

423 
	$usb_ho°_›í_devi˚
(
bus
, 
addr
)

425 c⁄° *
usbfs
 = 
NULL
;

426 
fûíame
[32];

427 
°©
 
°
;

428 
fd
, 
rc
;

430 
rc
 = 
	`°©
("/dev/bus/usb", &
°
);

431 i‡(
rc
 =0 && 
	`S_ISDIR
(
°
.
°_mode
)) {

433 
usbfs
 = "/dev/bus/usb";

436 
usbfs
 = "/proc/bus/usb";

439 
	`¢¥ötf
(
fûíame
, (filename), "%s/%03d/%03d",

440 
usbfs
, 
bus
, 
addr
);

441 
fd
 = 
	`›í
(
fûíame
, 
O_RDWR
 | 
O_NONBLOCK
);

442 i‡(
fd
 < 0) {

443 
	`Ârötf
(
°dîr
, "husb: o≥¿%s: %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

445  
fd
;

446 
	}
}

448 
	$usb_ho°_˛aim_p‹t
(
USBHo°Devi˚
 *
s
)

450 #ifde‡
USBDEVFS_CLAIM_PORT


451 *
h
, 
hub_«me
[64], 
löe
[1024];

452 
hub_addr
, 
ªt
;

454 
	`¢¥ötf
(
hub_«me
, (hub_name), "%d-%s",

455 
s
->
m©ch
.
bus_num
, s->m©ch.
p‹t
);

458 
h
 = 
	`°ºchr
(
hub_«me
, '.');

459 i‡(
h
 !
NULL
) {

460 
s
->
hub_p‹t
 = 
	`©oi
(
h
+1);

461 *
h
 = '\0';

464 
	`¢¥ötf
(
hub_«me
, (hub_name), "usb%d",

465 
s
->
m©ch
.
bus_num
);

466 
s
->
hub_p‹t
 = 
	`©oi
(s->
m©ch
.
p‹t
);

469 i‡(!
	`usb_ho°_ªad_fûe
(
löe
, (line), "devnum",

470 
hub_«me
)) {

473 i‡(
	`ssˇnf
(
löe
, "%d", &
hub_addr
) != 1) {

477 
s
->
hub_fd
 = 
	`usb_ho°_›í_devi˚
(s->
m©ch
.
bus_num
, 
hub_addr
);

478 i‡(
s
->
hub_fd
 < 0) {

482 
ªt
 = 
	`io˘l
(
s
->
hub_fd
, 
USBDEVFS_CLAIM_PORT
, &s->
hub_p‹t
);

483 i‡(
ªt
 < 0) {

484 
	`˛o£
(
s
->
hub_fd
);

485 
s
->
hub_fd
 = -1;

489 
	`åa˚_usb_ho°_˛aim_p‹t
(
s
->
m©ch
.
bus_num
, 
hub_addr
, s->
hub_p‹t
);

494 
	}
}

496 
	$usb_ho°_ªÀa£_p‹t
(
USBHo°Devi˚
 *
s
)

498 i‡(
s
->
hub_fd
 == -1) {

501 #ifde‡
USBDEVFS_RELEASE_PORT


502 
	`io˘l
(
s
->
hub_fd
, 
USBDEVFS_RELEASE_PORT
, &s->
hub_p‹t
);

504 
	`˛o£
(
s
->
hub_fd
);

505 
s
->
hub_fd
 = -1;

506 
	}
}

508 
	$usb_ho°_disc⁄√˘_iÁ˚s
(
USBHo°Devi˚
 *
dev
, 
nb_öãrÁ˚s
)

511 #ifde‡
USBDEVFS_DISCONNECT


512 
usbdevfs_io˘l
 
˘æ
;

513 
ªt
, 
öãrÁ˚
;

515 
öãrÁ˚
 = 0; i¡îÁ˚ < 
nb_öãrÁ˚s
; interface++) {

516 
˘æ
.
io˘l_code
 = 
USBDEVFS_DISCONNECT
;

517 
˘æ
.
i‚o
 = 
öãrÁ˚
;

518 
˘æ
.
d©a
 = 0;

519 
ªt
 = 
	`io˘l
(
dev
->
fd
, 
USBDEVFS_IOCTL
, &
˘æ
);

520 i‡(
ªt
 < 0 && 
î∫o
 !
ENODATA
) {

521 
	`≥º‹
("USBDEVFS_DISCONNECT");

527 
	}
}

529 
	$usb_löux_gë_num_öãrÁ˚s
(
USBHo°Devi˚
 *
s
)

531 
devi˚_«me
[64], 
löe
[1024];

532 
num_öãrÁ˚s
 = 0;

534 
	`•rötf
(
devi˚_«me
, "%d-%s", 
s
->
bus_num
, s->
p‹t
);

535 i‡(!
	`usb_ho°_ªad_fûe
(
löe
, (line), "bNumInterfaces",

536 
devi˚_«me
)) {

539 i‡(
	`ssˇnf
(
löe
, "%d", &
num_öãrÁ˚s
) != 1) {

542  
num_öãrÁ˚s
;

543 
	}
}

545 
	$usb_ho°_˛aim_öãrÁ˚s
(
USBHo°Devi˚
 *
dev
, 
c⁄figuøti⁄
)

547 c⁄° *
›
 = 
NULL
;

548 
dev_des¸_Àn
, 
c⁄fig_des¸_Àn
;

549 
öãrÁ˚
, 
nb_öãrÁ˚s
;

550 
ªt
, 
i
;

552 
i
 = 0; i < 
USB_MAX_INTERFACES
; i++) {

553 
dev
->dev.
Æt£âög
[
i
] = 0;

556 i‡(
c⁄figuøti⁄
 == 0) {

557 
dev
->dev.
nöãrÁ˚s
 = 0;

558 
dev
->dev.
c⁄figuøti⁄
 = 0;

562 
	`DPRINTF
("husb: cœimög i¡îÁ˚s. c⁄fig %d\n", 
c⁄figuøti⁄
);

564 
i
 = 0;

565 
dev_des¸_Àn
 = 
dev
->
des¸
[0];

566 i‡(
dev_des¸_Àn
 > 
dev
->
des¸_Àn
) {

567 
	`Ârötf
(
°dîr
, "husb: update iface failed. descrÅoo short\n");

571 
i
 +
dev_des¸_Àn
;

572 
i
 < 
dev
->
des¸_Àn
) {

573 
	`DPRINTF
("husb: i is %d, descr_len is %d, dl %d, dt %d\n",

574 
i
, 
dev
->
des¸_Àn
,

575 
dev
->
des¸
[
i
], dev->descr[i+1]);

577 i‡(
dev
->
des¸
[
i
+1] !
USB_DT_CONFIG
) {

578 
i
 +
dev
->
des¸
[i];

581 
c⁄fig_des¸_Àn
 = 
dev
->
des¸
[
i
];

583 
	`DPRINTF
("husb: c⁄fig #%dÇìd %d\n", 
dev
->
des¸
[
i
 + 5], 
c⁄figuøti⁄
);

585 i‡(
c⁄figuøti⁄
 =
dev
->
des¸
[
i
 + 5]) {

586 
c⁄figuøti⁄
 = 
dev
->
des¸
[
i
 + 5];

590 
i
 +
c⁄fig_des¸_Àn
;

593 i‡(
i
 >
dev
->
des¸_Àn
) {

594 
	`Ârötf
(
°dîr
,

598 
nb_öãrÁ˚s
 = 
dev
->
des¸
[
i
 + 4];

600 i‡(
	`usb_ho°_disc⁄√˘_iÁ˚s
(
dev
, 
nb_öãrÁ˚s
) < 0) {

601 
Áû
;

605 
öãrÁ˚
 = 0; i¡îÁ˚ < 
nb_öãrÁ˚s
; interface++) {

606 
›
 = "USBDEVFS_CLAIMINTERFACE";

607 
ªt
 = 
	`io˘l
(
dev
->
fd
, 
USBDEVFS_CLAIMINTERFACE
, &
öãrÁ˚
);

608 i‡(
ªt
 < 0) {

609 
Áû
;

613 
	`åa˚_usb_ho°_˛aim_öãrÁ˚s
(
dev
->
bus_num
, dev->
addr
,

614 
nb_öãrÁ˚s
, 
c⁄figuøti⁄
);

616 
dev
->dev.
nöãrÁ˚s
 = 
nb_öãrÁ˚s
;

617 
dev
->dev.
c⁄figuøti⁄
 = configuration;

620 
Áû
:

621 i‡(
î∫o
 =
ENODEV
) {

622 
	`do_disc⁄√˘
(
dev
);

624 
	`≥º‹
(
›
);

626 
	}
}

628 
	$usb_ho°_ªÀa£_öãrÁ˚s
(
USBHo°Devi˚
 *
s
)

630 
ªt
, 
i
;

632 
	`åa˚_usb_ho°_ªÀa£_öãrÁ˚s
(
s
->
bus_num
, s->
addr
);

634 
i
 = 0; i < 
s
->
dev
.
nöãrÁ˚s
; i++) {

635 
ªt
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_RELEASEINTERFACE
, &
i
);

636 i‡(
ªt
 < 0) {

637 
	`≥º‹
("USBDEVFS_RELEASEINTERFACE");

642 
	}
}

644 
	$usb_ho°_h™dÀ_ª£t
(
USBDevi˚
 *
dev
)

646 
USBHo°Devi˚
 *
s
 = 
	`DO_UPCAST
(USBHo°Devi˚, 
dev
, dev);

648 
	`åa˚_usb_ho°_ª£t
(
s
->
bus_num
, s->
addr
);

650 
	`usb_ho°_do_ª£t
(
s
);;

652 
	`usb_ho°_˛aim_öãrÁ˚s
(
s
, 0);

653 
	`usb_löux_upd©e_ídp_èbÀ
(
s
);

654 
	}
}

656 
	$usb_ho°_h™dÀ_de°roy
(
USBDevi˚
 *
dev
)

658 
USBHo°Devi˚
 *
s
 = (USBHo°Devi˚ *)
dev
;

660 
	`usb_ho°_ªÀa£_p‹t
(
s
);

661 
	`usb_ho°_˛o£
(
s
);

662 
	`QTAILQ_REMOVE
(&
ho°devs
, 
s
, 
√xt
);

663 
	`qemu_ªmove_exô_nŸifõr
(&
s
->
exô
);

664 
	}
}

669 
AsyncURB
 *
	$usb_ho°_Æloc_iso
(
USBHo°Devi˚
 *
s
, 
pid
, 
uöt8_t
 
ï
)

671 
AsyncURB
 *
aurb
;

672 
i
, 
j
, 
Àn
 = 
	`usb_ï_gë_max_∑ckë_size
(&
s
->
dev
, 
pid
, 
ï
);

674 
aurb
 = 
	`g_mÆloc0
(
s
->
iso_urb_cou¡
 * (*aurb));

675 
i
 = 0; i < 
s
->
iso_urb_cou¡
; i++) {

676 
aurb
[
i
].
urb
.
ídpoöt
 = 
ï
;

677 
aurb
[
i
].
urb
.
buf„r_Àngth
 = 
ISO_FRAME_DESC_PER_URB
 * 
Àn
;

678 
aurb
[
i
].
urb
.
buf„r
 = 
	`g_mÆloc
◊urb[i].urb.
buf„r_Àngth
);

679 
aurb
[
i
].
urb
.
ty≥
 = 
USBDEVFS_URB_TYPE_ISO
;

680 
aurb
[
i
].
urb
.
Êags
 = 
USBDEVFS_URB_ISO_ASAP
;

681 
aurb
[
i
].
urb
.
numbî_of_∑ckës
 = 
ISO_FRAME_DESC_PER_URB
;

682 
j
 = 0 ; j < 
ISO_FRAME_DESC_PER_URB
; j++)

683 
aurb
[
i
].
urb
.
iso_‰ame_desc
[
j
].
Àngth
 = 
Àn
;

684 i‡(
pid
 =
USB_TOKEN_IN
) {

685 
aurb
[
i
].
urb
.
ídpoöt
 |= 0x80;

687 
aurb
[
i
].
iso_‰ame_idx
 = 
ISO_FRAME_DESC_PER_URB
;

690 
	`£t_iso_urb
(
s
, 
pid
, 
ï
, 
aurb
);

692  
aurb
;

693 
	}
}

695 
	$usb_ho°_°›_n_‰ì_iso
(
USBHo°Devi˚
 *
s
, 
pid
, 
uöt8_t
 
ï
)

697 
AsyncURB
 *
aurb
;

698 
i
, 
ªt
, 
kûÀd
 = 0, 
‰ì
 = 1;

700 
aurb
 = 
	`gë_iso_urb
(
s
, 
pid
, 
ï
);

701 i‡(!
aurb
) {

705 
i
 = 0; i < 
s
->
iso_urb_cou¡
; i++) {

707 i‡(
aurb
[
i
].
iso_‰ame_idx
 == -1) {

708 
ªt
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_DISCARDURB
, &
aurb
[
i
]);

709 i‡(
ªt
 < 0) {

710 
	`≥º‹
("USBDEVFS_DISCARDURB");

711 
‰ì
 = 0;

714 
kûÀd
++;

719 i‡(
kûÀd
) {

720 
	`async_com∂ëe
(
s
);

723 
i
 = 0; i < 
s
->
iso_urb_cou¡
; i++) {

724 
	`g_‰ì
(
aurb
[
i
].
urb
.
buf„r
);

727 i‡(
‰ì
)

728 
	`g_‰ì
(
aurb
);

730 
	`¥ötf
("husb:Üeaking iso urbs because of discard failure\n");

731 
	`£t_iso_urb
(
s
, 
pid
, 
ï
, 
NULL
);

732 
	`£t_iso_urb_idx
(
s
, 
pid
, 
ï
, 0);

733 
	`˛ór_iso_°¨ãd
(
s
, 
pid
, 
ï
);

734 
	}
}

736 
	$urb_°©us_to_usb_ªt
(
°©us
)

738 
°©us
) {

739 -
EPIPE
:

740  
USB_RET_STALL
;

741 -
EOVERFLOW
:

742  
USB_RET_BABBLE
;

744  
USB_RET_IOERROR
;

746 
	}
}

748 
	$usb_ho°_h™dÀ_iso_d©a
(
USBHo°Devi˚
 *
s
, 
USBPackë
 *
p
, 
ö
)

750 
AsyncURB
 *
aurb
;

751 
i
, 
j
, 
ªt
, 
max_∑ckë_size
, 
off£t
, 
Àn
 = 0;

752 
uöt8_t
 *
buf
;

754 
max_∑ckë_size
 = 
p
->
ï
->max_packet_size;

755 i‡(
max_∑ckë_size
 == 0)

756  
USB_RET_NAK
;

758 
aurb
 = 
	`gë_iso_urb
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
);

759 i‡(!
aurb
) {

760 
aurb
 = 
	`usb_ho°_Æloc_iso
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
);

763 
i
 = 
	`gë_iso_urb_idx
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
);

764 
j
 = 
aurb
[
i
].
iso_‰ame_idx
;

765 i‡(
j
 >0 && j < 
ISO_FRAME_DESC_PER_URB
) {

766 i‡(
ö
) {

768 i‡(
aurb
[
i
].
urb
.
°©us
) {

769 
Àn
 = 
	`urb_°©us_to_usb_ªt
(
aurb
[
i
].
urb
.
°©us
);

771 
aurb
[
i
].
iso_‰ame_idx
 = 
ISO_FRAME_DESC_PER_URB
 - 1;

773 } i‡(
aurb
[
i
].
urb
.
iso_‰ame_desc
[
j
].
°©us
) {

774 
Àn
 = 
	`urb_°©us_to_usb_ªt
(

775 
aurb
[
i
].
urb
.
iso_‰ame_desc
[
j
].
°©us
);

777 } i‡(
aurb
[
i
].
urb
.
iso_‰ame_desc
[
j
].
a˘uÆ_Àngth


778 > 
p
->
iov
.
size
) {

779 
	`¥ötf
("husb:Ñeceived iso data isÜargerÅhenÖacket\n");

780 
Àn
 = 
USB_RET_BABBLE
;

783 
Àn
 = 
aurb
[
i
].
urb
.
iso_‰ame_desc
[
j
].
a˘uÆ_Àngth
;

784 
buf
 = 
aurb
[
i
].
urb
.
buf„r
 +

785 
j
 * 
aurb
[
i
].
urb
.
iso_‰ame_desc
[0].
Àngth
;

786 
	`usb_∑ckë_c›y
(
p
, 
buf
, 
Àn
);

789 
Àn
 = 
p
->
iov
.
size
;

790 
off£t
 = (
j
 =0Ë? 0 : 
	`gë_iso_buf„r_u£d
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
);

793 i‡(
Àn
 > 
max_∑ckë_size
) {

794 
	`¥ötf
("husb: send iso data isÜargerÅhen maxÖacket size\n");

795  
USB_RET_NAK
;

799 
	`usb_∑ckë_c›y
(
p
, 
aurb
[
i
].
urb
.
buf„r
 + 
off£t
, 
Àn
);

800 
aurb
[
i
].
urb
.
iso_‰ame_desc
[
j
].
Àngth
 = 
Àn
;

801 
off£t
 +
Àn
;

802 
	`£t_iso_buf„r_u£d
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
, 
off£t
);

805 i‡(!
	`is_iso_°¨ãd
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
Ë&& 
i
 =1 && 
j
 == 8) {

806 
	`£t_iso_°¨ãd
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
);

809 
aurb
[
i
].
iso_‰ame_idx
++;

810 i‡(
aurb
[
i
].
iso_‰ame_idx
 =
ISO_FRAME_DESC_PER_URB
) {

811 
i
 = (ò+ 1Ë% 
s
->
iso_urb_cou¡
;

812 
	`£t_iso_urb_idx
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
, 
i
);

815 i‡(
ö
) {

816 
	`£t_iso_°¨ãd
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
);

818 
	`DPRINTF
("hubs: iso outÉrrorÇo free buffer, droppingÖacket\n");

822 i‡(
	`is_iso_°¨ãd
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
)) {

824 
i
 = 0; i < 
s
->
iso_urb_cou¡
; i++) {

825 i‡(
aurb
[
i
].
iso_‰ame_idx
 =
ISO_FRAME_DESC_PER_URB
) {

826 
ªt
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_SUBMITURB
, &
aurb
[
i
]);

827 i‡(
ªt
 < 0) {

828 
	`≥º‹
("USBDEVFS_SUBMITURB");

829 i‡(!
ö
 || 
Àn
 == 0) {

830 
î∫o
) {

831 
ETIMEDOUT
:

832 
Àn
 = 
USB_RET_NAK
;

834 
EPIPE
:

836 
Àn
 = 
USB_RET_STALL
;

841 
aurb
[
i
].
iso_‰ame_idx
 = -1;

842 
	`ch™ge_iso_öÊight
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
, 1);

847  
Àn
;

848 
	}
}

850 
	$usb_ho°_h™dÀ_d©a
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
)

852 
USBHo°Devi˚
 *
s
 = 
	`DO_UPCAST
(USBHo°Devi˚, 
dev
, dev);

853 
usbdevfs_urb
 *
urb
;

854 
AsyncURB
 *
aurb
;

855 
ªt
, 
ªm
, 
¥em
, 
v
;

856 
uöt8_t
 *
pbuf
;

857 
uöt8_t
 
ï
;

859 
	`åa˚_usb_ho°_ªq_d©a
(
s
->
bus_num
, s->
addr
, 
p
,

860 
p
->
pid
 =
USB_TOKEN_IN
,

861 
p
->
ï
->
ƒ
,Ö->
iov
.
size
);

863 i‡(!
	`is_vÆid
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
)) {

864 
	`åa˚_usb_ho°_ªq_com∂ëe
(
s
->
bus_num
, s->
addr
, 
p
, 
USB_RET_NAK
);

865  
USB_RET_NAK
;

868 i‡(
p
->
pid
 =
USB_TOKEN_IN
) {

869 
ï
 = 
p
->ï->
ƒ
 | 0x80;

871 
ï
 = 
p
->ï->
ƒ
;

874 i‡(
	`is_hÆãd
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
)) {

875 
¨g
 = 
ï
;

876 
ªt
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_CLEAR_HALT
, &
¨g
);

877 i‡(
ªt
 < 0) {

878 
	`≥º‹
("USBDEVFS_CLEAR_HALT");

879 
	`åa˚_usb_ho°_ªq_com∂ëe
(
s
->
bus_num
, s->
addr
, 
p
, 
USB_RET_NAK
);

880  
USB_RET_NAK
;

882 
	`˛ór_hÆt
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
);

885 i‡(
	`is_isoc
(
s
, 
p
->
pid
,Ö->
ï
->
ƒ
)) {

886  
	`usb_ho°_h™dÀ_iso_d©a
(
s
, 
p
,Ö->
pid
 =
USB_TOKEN_IN
);

889 
v
 = 0;

890 
¥em
 = 0;

891 
pbuf
 = 
NULL
;

892 
ªm
 = 
p
->
iov
.
size
;

894 i‡(
¥em
 =0 && 
ªm
 > 0) {

895 
	`as£π
(
v
 < 
p
->
iov
.
niov
);

896 
¥em
 = 
p
->
iov
.iov[
v
].
iov_Àn
;

897 
pbuf
 = 
p
->
iov
.iov[
v
].
iov_ba£
;

898 
	`as£π
(
¥em
 <
ªm
);

899 
v
++;

901 
aurb
 = 
	`async_Æloc
(
s
);

902 
aurb
->
∑ckë
 = 
p
;

904 
urb
 = &
aurb
->urb;

905 
urb
->
ídpoöt
 = 
ï
;

906 
urb
->
ty≥
 = 
	`usb_ho°_usbfs_ty≥
(
s
, 
p
);

907 
urb
->
u£rc⁄ãxt
 = 
s
;

908 
urb
->
buf„r
 = 
pbuf
;

909 
urb
->
buf„r_Àngth
 = 
¥em
;

911 i‡(
urb
->
buf„r_Àngth
 > 
MAX_USBFS_BUFFER_SIZE
) {

912 
urb
->
buf„r_Àngth
 = 
MAX_USBFS_BUFFER_SIZE
;

914 
pbuf
 +
urb
->
buf„r_Àngth
;

915 
¥em
 -
urb
->
buf„r_Àngth
;

916 
ªm
 -
urb
->
buf„r_Àngth
;

917 i‡(
ªm
) {

918 
aurb
->
m‹e
 = 1;

921 
	`åa˚_usb_ho°_urb_submô
(
s
->
bus_num
, s->
addr
, 
aurb
,

922 
urb
->
buf„r_Àngth
, 
aurb
->
m‹e
);

923 
ªt
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_SUBMITURB
, 
urb
);

925 
	`DPRINTF
("husb: data submit:Ép 0x%x,Üen %u, more %d,Öacket %p,áurb %p\n",

926 
urb
->
ídpoöt
, urb->
buf„r_Àngth
, 
aurb
->
m‹e
, 
p
,áurb);

928 i‡(
ªt
 < 0) {

929 
	`≥º‹
("USBDEVFS_SUBMITURB");

930 
	`async_‰ì
(
aurb
);

932 
î∫o
) {

933 
ETIMEDOUT
:

934 
	`åa˚_usb_ho°_ªq_com∂ëe
(
s
->
bus_num
, s->
addr
, 
p
,

935 
USB_RET_NAK
);

936  
USB_RET_NAK
;

937 
EPIPE
:

939 
	`åa˚_usb_ho°_ªq_com∂ëe
(
s
->
bus_num
, s->
addr
, 
p
,

940 
USB_RET_STALL
);

941  
USB_RET_STALL
;

944 } 
ªm
 > 0);

946  
USB_RET_ASYNC
;

947 
	}
}

949 
	$˘æ_îr‹
()

951 i‡(
î∫o
 =
ETIMEDOUT
) {

952  
USB_RET_NAK
;

954  
USB_RET_STALL
;

956 
	}
}

958 
	$usb_ho°_£t_addªss
(
USBHo°Devi˚
 *
s
, 
addr
)

960 
	`åa˚_usb_ho°_£t_addªss
(
s
->
bus_num
, s->
addr
,áddr);

961 
s
->
dev
.
addr
 =áddr;

963 
	}
}

965 
	$usb_ho°_£t_c⁄fig
(
USBHo°Devi˚
 *
s
, 
c⁄fig
)

967 
ªt
, 
fú°
 = 1;

969 
	`åa˚_usb_ho°_£t_c⁄fig
(
s
->
bus_num
, s->
addr
, 
c⁄fig
);

971 
	`usb_ho°_ªÀa£_öãrÁ˚s
(
s
);

973 
agaö
:

974 
ªt
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_SETCONFIGURATION
, &
c⁄fig
);

976 
	`DPRINTF
("husb: cå»£àc⁄fig %dÑë %dÉºnÿ%d\n", 
c⁄fig
, 
ªt
, 
î∫o
);

978 i‡(
ªt
 < 0 && 
î∫o
 =
EBUSY
 && 
fú°
) {

980 
cou¡
 = 
	`usb_löux_gë_num_öãrÁ˚s
(
s
);

981 i‡(
cou¡
 > 0) {

982 
	`DPRINTF
("husb: busy -> disc⁄√˘ög %d i¡îÁ˚s\n", 
cou¡
);

983 
	`usb_ho°_disc⁄√˘_iÁ˚s
(
s
, 
cou¡
);

984 
fú°
 = 0;

985 
agaö
;

989 i‡(
ªt
 < 0) {

990  
	`˘æ_îr‹
();

992 
	`usb_ho°_˛aim_öãrÁ˚s
(
s
, 
c⁄fig
);

993 
	`usb_löux_upd©e_ídp_èbÀ
(
s
);

995 
	}
}

997 
	$usb_ho°_£t_öãrÁ˚
(
USBHo°Devi˚
 *
s
, 
iÁ˚
, 
Æt
)

999 
usbdevfs_£töãrÁ˚
 
si
;

1000 
i
, 
ªt
;

1002 
	`åa˚_usb_ho°_£t_öãrÁ˚
(
s
->
bus_num
, s->
addr
, 
iÁ˚
, 
Æt
);

1004 
i
 = 1; i <
USB_MAX_ENDPOINTS
; i++) {

1005 i‡(
	`is_isoc
(
s
, 
USB_TOKEN_IN
, 
i
)) {

1006 
	`usb_ho°_°›_n_‰ì_iso
(
s
, 
USB_TOKEN_IN
, 
i
);

1008 i‡(
	`is_isoc
(
s
, 
USB_TOKEN_OUT
, 
i
)) {

1009 
	`usb_ho°_°›_n_‰ì_iso
(
s
, 
USB_TOKEN_OUT
, 
i
);

1013 i‡(
iÁ˚
 >
USB_MAX_INTERFACES
) {

1014  
USB_RET_STALL
;

1017 
si
.
öãrÁ˚
 = 
iÁ˚
;

1018 
si
.
Æt£âög
 = 
Æt
;

1019 
ªt
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_SETINTERFACE
, &
si
);

1021 
	`DPRINTF
("husb: ctrl set iface %dáltset %dÑet %dÉrrno %d\n",

1022 
iÁ˚
, 
Æt
, 
ªt
, 
î∫o
);

1024 i‡(
ªt
 < 0) {

1025  
	`˘æ_îr‹
();

1028 
s
->
dev
.
Æt£âög
[
iÁ˚
] = 
Æt
;

1029 
	`usb_löux_upd©e_ídp_èbÀ
(
s
);

1031 
	}
}

1033 
	$usb_ho°_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
dev
, 
USBPackë
 *
p
,

1034 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

1036 
USBHo°Devi˚
 *
s
 = 
	`DO_UPCAST
(USBHo°Devi˚, 
dev
, dev);

1037 
usbdevfs_urb
 *
urb
;

1038 
AsyncURB
 *
aurb
;

1039 
ªt
;

1047 
	`åa˚_usb_ho°_ªq_c⁄åﬁ
(
s
->
bus_num
, s->
addr
, 
p
, 
ªque°
, 
vÆue
, 
ödex
);

1048 
	`as£π
(
p
->
ªsu…
 == 0);

1050 
ªque°
) {

1051 
Devi˚OutReque°
 | 
USB_REQ_SET_ADDRESS
:

1052 
ªt
 = 
	`usb_ho°_£t_addªss
(
s
, 
vÆue
);

1053 
	`åa˚_usb_ho°_ªq_emuœãd
(
s
->
bus_num
, s->
addr
, 
p
, 
ªt
);

1054  
ªt
;

1056 
Devi˚OutReque°
 | 
USB_REQ_SET_CONFIGURATION
:

1057 
ªt
 = 
	`usb_ho°_£t_c⁄fig
(
s
, 
vÆue
 & 0xff);

1058 
	`åa˚_usb_ho°_ªq_emuœãd
(
s
->
bus_num
, s->
addr
, 
p
, 
ªt
);

1059  
ªt
;

1061 
I¡îÁ˚OutReque°
 | 
USB_REQ_SET_INTERFACE
:

1062 
ªt
 = 
	`usb_ho°_£t_öãrÁ˚
(
s
, 
ödex
, 
vÆue
);

1063 
	`åa˚_usb_ho°_ªq_emuœãd
(
s
->
bus_num
, s->
addr
, 
p
, 
ªt
);

1064  
ªt
;

1066 
EndpoötOutReque°
 | 
USB_REQ_CLEAR_FEATURE
:

1067 i‡(
vÆue
 == 0) {

1068 
pid
 = (
ödex
 & 
USB_DIR_IN
Ë? 
USB_TOKEN_IN
 : 
USB_TOKEN_OUT
;

1069 
	`io˘l
(
s
->
fd
, 
USBDEVFS_CLEAR_HALT
, &
ödex
);

1070 
	`˛ór_hÆt
(
s
, 
pid
, 
ödex
 & 0x0f);

1071 
	`åa˚_usb_ho°_ªq_emuœãd
(
s
->
bus_num
, s->
addr
, 
p
, 0);

1078 i‡(
Àngth
 > (
dev
->
d©a_buf
)) {

1079 
	`Ârötf
(
°dîr
, "husb: ctrl bufferÅoo small (%d > %zu)\n",

1080 
Àngth
, (
dev
->
d©a_buf
));

1081  
USB_RET_STALL
;

1084 
aurb
 = 
	`async_Æloc
(
s
);

1085 
aurb
->
∑ckë
 = 
p
;

1093 
urb
 = &
aurb
->urb;

1095 
urb
->
ty≥
 = 
USBDEVFS_URB_TYPE_CONTROL
;

1096 
urb
->
ídpoöt
 = 
p
->
ï
->
ƒ
;

1098 
urb
->
buf„r
 = &
dev
->
£tup_buf
;

1099 
urb
->
buf„r_Àngth
 = 
Àngth
 + 8;

1101 
urb
->
u£rc⁄ãxt
 = 
s
;

1103 
	`åa˚_usb_ho°_urb_submô
(
s
->
bus_num
, s->
addr
, 
aurb
,

1104 
urb
->
buf„r_Àngth
, 
aurb
->
m‹e
);

1105 
ªt
 = 
	`io˘l
(
s
->
fd
, 
USBDEVFS_SUBMITURB
, 
urb
);

1107 
	`DPRINTF
("husb: submô cål.Üí %uáurb %p\n", 
urb
->
buf„r_Àngth
, 
aurb
);

1109 i‡(
ªt
 < 0) {

1110 
	`DPRINTF
("husb: submô faûed.Éºnÿ%d\n", 
î∫o
);

1111 
	`async_‰ì
(
aurb
);

1113 
î∫o
) {

1114 
ETIMEDOUT
:

1115  
USB_RET_NAK
;

1116 
EPIPE
:

1118  
USB_RET_STALL
;

1122  
USB_RET_ASYNC
;

1123 
	}
}

1126 
	$usb_löux_upd©e_ídp_èbÀ
(
USBHo°Devi˚
 *
s
)

1128 c⁄° *
äame
[] = {

1129 [
USB_ENDPOINT_XFER_CONTROL
] = "control",

1130 [
USB_ENDPOINT_XFER_ISOC
] = "isoc",

1131 [
USB_ENDPOINT_XFER_BULK
] = "bulk",

1132 [
USB_ENDPOINT_XFER_INT
] = "int",

1134 
uöt8_t
 
devï
, 
ty≥
;

1135 
uöt16_t
 
mps
, 
v
, 
p
;

1136 
ï
, 
pid
;

1137 
i
, 
c⁄figuøti⁄
 = -1, 
öãrÁ˚
 = -1, 
Æt£âög
 = -1;

1138 
ídp_d©a
 *
ïd
;

1139 
USBDes¸ùt‹
 *
d
;

1140 
boﬁ
 
a˘ive
 = 
Ál£
;

1142 
	`usb_ï_ª£t
(&
s
->
dev
);

1144 
i
 = 0;; i +
d
->
bLígth
) {

1145 i‡(
i
+2 >
s
->
des¸_Àn
) {

1148 
d
 = (*)(
s
->
des¸
 + 
i
);

1149 i‡(
d
->
bLígth
 < 2) {

1150 
	`åa˚_usb_ho°_∑r£_îr‹
(
s
->
bus_num
, s->
addr
,

1152 
îr‹
;

1154 i‡(
i
 + 
d
->
bLígth
 > 
s
->
des¸_Àn
) {

1155 
	`åa˚_usb_ho°_∑r£_îr‹
(
s
->
bus_num
, s->
addr
,

1157 
îr‹
;

1159 
d
->
bDes¸ùt‹Ty≥
) {

1161 
	`åa˚_usb_ho°_∑r£_îr‹
(
s
->
bus_num
, s->
addr
,

1163 
îr‹
;

1164 
USB_DT_DEVICE
:

1165 i‡(
d
->
bLígth
 < 0x12) {

1166 
	`åa˚_usb_ho°_∑r£_îr‹
(
s
->
bus_num
, s->
addr
,

1168 
îr‹
;

1170 
v
 = (
d
->
u
.
devi˚
.
idVíd‹_hi
 << 8Ë| d->u.devi˚.
idVíd‹_lo
;

1171 
p
 = (
d
->
u
.
devi˚
.
idProdu˘_hi
 << 8Ë| d->u.devi˚.
idProdu˘_lo
;

1172 
	`åa˚_usb_ho°_∑r£_devi˚
(
s
->
bus_num
, s->
addr
, 
v
, 
p
);

1174 
USB_DT_CONFIG
:

1175 i‡(
d
->
bLígth
 < 0x09) {

1176 
	`åa˚_usb_ho°_∑r£_îr‹
(
s
->
bus_num
, s->
addr
,

1178 
îr‹
;

1180 
c⁄figuøti⁄
 = 
d
->
u
.
c⁄fig
.
bC⁄figuøti⁄VÆue
;

1181 
a˘ive
 = (
c⁄figuøti⁄
 =
s
->
dev
.configuration);

1182 
	`åa˚_usb_ho°_∑r£_c⁄fig
(
s
->
bus_num
, s->
addr
,

1183 
c⁄figuøti⁄
, 
a˘ive
);

1185 
USB_DT_INTERFACE
:

1186 i‡(
d
->
bLígth
 < 0x09) {

1187 
	`åa˚_usb_ho°_∑r£_îr‹
(
s
->
bus_num
, s->
addr
,

1189 
îr‹
;

1191 
öãrÁ˚
 = 
d
->
u
.öãrÁ˚.
bI¡îÁ˚Numbî
;

1192 
Æt£âög
 = 
d
->
u
.
öãrÁ˚
.
bA…î«ãSëtög
;

1193 
a˘ive
 = (
c⁄figuøti⁄
 =
s
->
dev
.configuration) &&

1194 (
Æt£âög
 =
s
->
dev
.Æt£âög[
öãrÁ˚
]);

1195 
	`åa˚_usb_ho°_∑r£_öãrÁ˚
(
s
->
bus_num
, s->
addr
,

1196 
öãrÁ˚
, 
Æt£âög
, 
a˘ive
);

1198 
USB_DT_ENDPOINT
:

1199 i‡(
d
->
bLígth
 < 0x07) {

1200 
	`åa˚_usb_ho°_∑r£_îr‹
(
s
->
bus_num
, s->
addr
,

1202 
îr‹
;

1204 
devï
 = 
d
->
u
.
ídpoöt
.
bEndpoötAddªss
;

1205 
pid
 = (
devï
 & 
USB_DIR_IN
Ë? 
USB_TOKEN_IN
 : 
USB_TOKEN_OUT
;

1206 
ï
 = 
devï
 & 0xf;

1207 i‡(
ï
 == 0) {

1208 
	`åa˚_usb_ho°_∑r£_îr‹
(
s
->
bus_num
, s->
addr
,

1210 
îr‹
;

1213 
ty≥
 = 
d
->
u
.
ídpoöt
.
bmAâribuãs
 & 0x3;

1214 
mps
 = 
d
->
u
.
ídpoöt
.
wMaxPackëSize_lo
 |

1215 (
d
->
u
.
ídpoöt
.
wMaxPackëSize_hi
 << 8);

1216 
	`åa˚_usb_ho°_∑r£_ídpoöt
(
s
->
bus_num
, s->
addr
, 
ï
,

1217 (
devï
 & 
USB_DIR_IN
) ? "in" : "out",

1218 
äame
[
ty≥
], 
a˘ive
);

1220 i‡(
a˘ive
) {

1221 
	`usb_ï_£t_max_∑ckë_size
(&
s
->
dev
, 
pid
, 
ï
, 
mps
);

1222 
	`as£π
(
	`usb_ï_gë_ty≥
(&
s
->
dev
, 
pid
, 
ï
) ==

1223 
USB_ENDPOINT_XFER_INVALID
);

1224 
	`usb_ï_£t_ty≥
(&
s
->
dev
, 
pid
, 
ï
, 
ty≥
);

1225 
	`usb_ï_£t_i‚um
(&
s
->
dev
, 
pid
, 
ï
, 
öãrÁ˚
);

1226 i‡((
s
->
›ti⁄s
 & (1 << 
USB_HOST_OPT_PIPELINE
)) &&

1227 (
ty≥
 =
USB_ENDPOINT_XFER_BULK
)) {

1228 
	`usb_ï_£t_pùñöe
(&
s
->
dev
, 
pid
, 
ï
, 
åue
);

1231 
ïd
 = 
	`gë_ídp
(
s
, 
pid
, 
ï
);

1232 
ïd
->
hÆãd
 = 0;

1237 
	`åa˚_usb_ho°_∑r£_unknown
(
s
->
bus_num
, s->
addr
,

1238 
d
->
bLígth
, d->
bDes¸ùt‹Ty≥
);

1244 
îr‹
:

1245 
	`usb_ï_ª£t
(&
s
->
dev
);

1247 
	}
}

1257 
	$usb_löux_fuŒ_•ìd_com∑t
(
USBHo°Devi˚
 *
dev
)

1259 
i
, 
∑ckë_size
;

1265 
i
 = 0; (ò+ 5Ë< 
dev
->
des¸_Àn
; i +dev->
des¸
[i]) {

1266 i‡(
dev
->
des¸
[
i
 + 1] =
USB_DT_ENDPOINT
) {

1267 
dev
->
des¸
[
i
 + 3] & 0x3) {

1275 
∑ckë_size
 = 
dev
->
des¸
[
i
 + 4] + (dev->descr[i + 5] << 8);

1276 i‡(
∑ckë_size
 > 64)

1283 
	}
}

1285 
	$usb_ho°_›í
(
USBHo°Devi˚
 *
dev
, 
bus_num
,

1286 
addr
, c⁄° *
p‹t
,

1287 c⁄° *
¥od_«me
, 
•ìd
)

1289 
fd
 = -1, 
ªt
;

1291 
	`åa˚_usb_ho°_›í_°¨ãd
(
bus_num
, 
addr
);

1293 i‡(
dev
->
fd
 != -1) {

1294 
Áû
;

1297 
fd
 = 
	`usb_ho°_›í_devi˚
(
bus_num
, 
addr
);

1298 i‡(
fd
 < 0) {

1299 
Áû
;

1301 
	`DPRINTF
("husb: o≥√d %s\n", 
buf
);

1303 
dev
->
bus_num
 = bus_num;

1304 
dev
->
addr
 =áddr;

1305 
	`°r˝y
(
dev
->
p‹t
,Öort);

1306 
dev
->
fd
 = fd;

1309 
dev
->
des¸_Àn
 = 
	`ªad
(
fd
, dev->
des¸
, (dev->descr));

1310 i‡(
dev
->
des¸_Àn
 <= 0) {

1311 
	`≥º‹
("husb:Ñeading device data failed");

1312 
Áû
;

1315 #ifde‡
DEBUG


1317 
x
;

1318 
	`¥ötf
("=== begin dumping device descriptor data ===\n");

1319 
x
 = 0; x < 
dev
->
des¸_Àn
; x++) {

1320 
	`¥ötf
("%02x ", 
dev
->
des¸
[
x
]);

1322 
	`¥ötf
("\n===Énd dumping device descriptor data ===\n");

1328 i‡(!
	`usb_ho°_˛aim_öãrÁ˚s
(
dev
, 0)) {

1329 
Áû
;

1332 
	`usb_ï_öô
(&
dev
->dev);

1333 
ªt
 = 
	`usb_löux_upd©e_ídp_èbÀ
(
dev
);

1334 i‡(
ªt
) {

1335 
Áû
;

1338 i‡(
•ìd
 == -1) {

1339 
usbdevfs_c⁄√˘öfo
 
ci
;

1341 
ªt
 = 
	`io˘l
(
fd
, 
USBDEVFS_CONNECTINFO
, &
ci
);

1342 i‡(
ªt
 < 0) {

1343 
	`≥º‹
("usb_host_device_open: USBDEVFS_CONNECTINFO");

1344 
Áû
;

1347 i‡(
ci
.
¶ow
) {

1348 
•ìd
 = 
USB_SPEED_LOW
;

1350 
•ìd
 = 
USB_SPEED_HIGH
;

1353 
dev
->dev.
•ìd
 = speed;

1354 
dev
->dev.
•ìdmask
 = (1 << 
•ìd
);

1355 i‡(
dev
->dev.
•ìd
 =
USB_SPEED_HIGH
 && 
	`usb_löux_fuŒ_•ìd_com∑t
(dev)) {

1356 
dev
->dev.
•ìdmask
 |
USB_SPEED_MASK_FULL
;

1359 
	`åa˚_usb_ho°_›í_suc˚ss
(
bus_num
, 
addr
);

1361 i‡(!
¥od_«me
 ||Örod_name[0] == '\0') {

1362 
	`¢¥ötf
(
dev
->dev.
¥odu˘_desc
, (dev->dev.product_desc),

1363 "ho°:%d.%d", 
bus_num
, 
addr
);

1365 
	`p°r˝y
(
dev
->dev.
¥odu˘_desc
, (dev->dev.product_desc),

1366 
¥od_«me
);

1369 
ªt
 = 
	`usb_devi˚_©èch
(&
dev
->dev);

1370 i‡(
ªt
) {

1371 
Áû
;

1375 
	`qemu_£t_fd_h™dÀr
(
dev
->
fd
, 
NULL
, 
async_com∂ëe
, dev);

1379 
Áû
:

1380 
	`åa˚_usb_ho°_›í_Áûuª
(
bus_num
, 
addr
);

1381 i‡(
dev
->
fd
 != -1) {

1382 
	`˛o£
(
dev
->
fd
);

1383 
dev
->
fd
 = -1;

1386 
	}
}

1388 
	$usb_ho°_˛o£
(
USBHo°Devi˚
 *
dev
)

1390 
i
;

1392 i‡(
dev
->
fd
 == -1) {

1396 
	`åa˚_usb_ho°_˛o£
(
dev
->
bus_num
, dev->
addr
);

1398 
	`qemu_£t_fd_h™dÀr
(
dev
->
fd
, 
NULL
, NULL, NULL);

1399 
dev
->
˛osög
 = 1;

1400 
i
 = 1; i <
USB_MAX_ENDPOINTS
; i++) {

1401 i‡(
	`is_isoc
(
dev
, 
USB_TOKEN_IN
, 
i
)) {

1402 
	`usb_ho°_°›_n_‰ì_iso
(
dev
, 
USB_TOKEN_IN
, 
i
);

1404 i‡(
	`is_isoc
(
dev
, 
USB_TOKEN_OUT
, 
i
)) {

1405 
	`usb_ho°_°›_n_‰ì_iso
(
dev
, 
USB_TOKEN_OUT
, 
i
);

1408 
	`async_com∂ëe
(
dev
);

1409 
dev
->
˛osög
 = 0;

1410 i‡(
dev
->dev.
©èched
) {

1411 
	`usb_devi˚_dëach
(&
dev
->dev);

1413 
	`usb_ho°_do_ª£t
(
dev
);

1414 
	`˛o£
(
dev
->
fd
);

1415 
dev
->
fd
 = -1;

1417 
	}
}

1419 
	$usb_ho°_exô_nŸifõr
(
NŸifõr
 *
n
, *
d©a
)

1421 
USBHo°Devi˚
 *
s
 = 
	`c⁄èöî_of
(
n
, USBHo°Devi˚, 
exô
);

1423 
	`usb_ho°_ªÀa£_p‹t
(
s
);

1424 i‡(
s
->
fd
 != -1) {

1425 
	`usb_ho°_do_ª£t
(
s
);;

1427 
	}
}

1445 
	$usb_ho°_po°_lﬂd_bh
(*
›aque
)

1447 
USBHo°Devi˚
 *
dev
 = 
›aque
;

1449 i‡(
dev
->
fd
 != -1) {

1450 
	`usb_ho°_˛o£
(
dev
);

1452 i‡(
dev
->dev.
©èched
) {

1453 
	`usb_devi˚_dëach
(&
dev
->dev);

1455 
	`usb_ho°_auto_check
(
NULL
);

1456 
	}
}

1458 
	$usb_ho°_po°_lﬂd
(*
›aque
, 
vîsi⁄_id
)

1460 
USBHo°Devi˚
 *
dev
 = 
›aque
;

1462 
	`qemu_bh_scheduÀ
(
dev
->
bh
);

1464 
	}
}

1466 
	$usb_ho°_öô‚
(
USBDevi˚
 *
dev
)

1468 
USBHo°Devi˚
 *
s
 = 
	`DO_UPCAST
(USBHo°Devi˚, 
dev
, dev);

1470 
dev
->
auto_©èch
 = 0;

1471 
s
->
fd
 = -1;

1472 
s
->
hub_fd
 = -1;

1474 
	`QTAILQ_INSERT_TAIL
(&
ho°devs
, 
s
, 
√xt
);

1475 
s
->
exô
.
nŸify
 = 
usb_ho°_exô_nŸifõr
;

1476 
	`qemu_add_exô_nŸifõr
(&
s
->
exô
);

1477 
s
->
bh
 = 
	`qemu_bh_√w
(
usb_ho°_po°_lﬂd_bh
, s);

1478 
	`usb_ho°_auto_check
(
NULL
);

1480 i‡(
s
->
m©ch
.
bus_num
 !0 && s->m©ch.
p‹t
 !
NULL
) {

1481 
	`usb_ho°_˛aim_p‹t
(
s
);

1483 
	`add_boŸ_devi˚_∑th
(
s
->
boŸödex
, &
dev
->
qdev
, 
NULL
);

1485 
	}
}

1487 c⁄° 
VMSèãDes¸ùti⁄
 
	gvm°©e_usb_ho°
 = {

1488 .
«me
 = "usb-host",

1489 .
	gvîsi⁄_id
 = 1,

1490 .
	gmöimum_vîsi⁄_id
 = 1,

1491 .
	gpo°_lﬂd
 = 
usb_ho°_po°_lﬂd
,

1492 .
	gfõlds
 = (
VMSèãFõld
[]) {

1493 
VMSTATE_USB_DEVICE
(
dev
, 
USBHo°Devi˚
),

1494 
VMSTATE_END_OF_LIST
()

1498 
Pr›îty
 
	gusb_ho°_dev_¥›îtõs
[] = {

1499 
DEFINE_PROP_UINT32
("ho°bus", 
USBHo°Devi˚
, 
m©ch
.
bus_num
, 0),

1500 
DEFINE_PROP_UINT32
("ho°addr", 
USBHo°Devi˚
, 
m©ch
.
addr
, 0),

1501 
DEFINE_PROP_STRING
("ho°p‹t", 
USBHo°Devi˚
, 
m©ch
.
p‹t
),

1502 
DEFINE_PROP_HEX32
("víd‹id", 
USBHo°Devi˚
, 
m©ch
.
víd‹_id
, 0),

1503 
DEFINE_PROP_HEX32
("¥odu˘id", 
USBHo°Devi˚
, 
m©ch
.
¥odu˘_id
, 0),

1504 
DEFINE_PROP_UINT32
("isobufs", 
USBHo°Devi˚
, 
iso_urb_cou¡
, 4),

1505 
DEFINE_PROP_INT32
("boŸödex", 
USBHo°Devi˚
, 
boŸödex
, -1),

1506 
DEFINE_PROP_BIT
("pùñöe", 
USBHo°Devi˚
, 
›ti⁄s
,

1507 
USB_HOST_OPT_PIPELINE
, 
åue
),

1508 
DEFINE_PROP_END_OF_LIST
(),

1511 
	$usb_ho°_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1513 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1514 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

1516 
uc
->
öô
 = 
usb_ho°_öô‚
;

1517 
uc
->
¥odu˘_desc
 = "USB Host Device";

1518 
uc
->
ˇn˚l_∑ckë
 = 
usb_ho°_async_ˇn˚l
;

1519 
uc
->
h™dÀ_d©a
 = 
usb_ho°_h™dÀ_d©a
;

1520 
uc
->
h™dÀ_c⁄åﬁ
 = 
usb_ho°_h™dÀ_c⁄åﬁ
;

1521 
uc
->
h™dÀ_ª£t
 = 
usb_ho°_h™dÀ_ª£t
;

1522 
uc
->
h™dÀ_de°roy
 = 
usb_ho°_h™dÀ_de°roy
;

1523 
dc
->
vmsd
 = &
vm°©e_usb_ho°
;

1524 
dc
->
¥›s
 = 
usb_ho°_dev_¥›îtõs
;

1525 
	}
}

1527 
Ty≥Info
 
	gusb_ho°_dev_öfo
 = {

1528 .
«me
 = "usb-host",

1529 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

1530 .
	gö°™˚_size
 = (
USBHo°Devi˚
),

1531 .
	g˛ass_öô
 = 
usb_ho°_˛ass_öô‚
,

1534 
	$usb_ho°_ªgi°î_ty≥s
()

1536 
	`ty≥_ªgi°î_°©ic
(&
usb_ho°_dev_öfo
);

1537 
	`usb_Àgacy_ªgi°î
("usb-ho°", "ho°", 
usb_ho°_devi˚_›í
);

1538 
	}
}

1540 
	$ty≥_öô
(
usb_ho°_ªgi°î_ty≥s
)

1542 
USBDevi˚
 *
	$usb_ho°_devi˚_›í
(
USBBus
 *
bus
, c⁄° *
dev«me
)

1544 
USBAutoFûãr
 
fûãr
;

1545 
USBDevi˚
 *
dev
;

1546 *
p
;

1548 
dev
 = 
	`usb_¸óã
(
bus
, "usb-host");

1550 i‡(
	`°r°r
(
dev«me
, "auto:")) {

1551 i‡(
	`∑r£_fûãr
(
dev«me
, &
fûãr
) < 0) {

1552 
Áû
;

1555 i‡((
p
 = 
	`°rchr
(
dev«me
, '.'))) {

1556 
fûãr
.
bus_num
 = 
	`°πoul
(
dev«me
, 
NULL
, 0);

1557 
fûãr
.
addr
 = 
	`°πoul
(
p
 + 1, 
NULL
, 0);

1558 
fûãr
.
víd‹_id
 = 0;

1559 
fûãr
.
¥odu˘_id
 = 0;

1560 } i‡((
p
 = 
	`°rchr
(
dev«me
, ':'))) {

1561 
fûãr
.
bus_num
 = 0;

1562 
fûãr
.
addr
 = 0;

1563 
fûãr
.
víd‹_id
 = 
	`°πoul
(
dev«me
, 
NULL
, 16);

1564 
fûãr
.
¥odu˘_id
 = 
	`°πoul
(
p
 + 1, 
NULL
, 16);

1566 
Áû
;

1570 
	`qdev_¥›_£t_uöt32
(&
dev
->
qdev
, "ho°bus", 
fûãr
.
bus_num
);

1571 
	`qdev_¥›_£t_uöt32
(&
dev
->
qdev
, "ho°addr", 
fûãr
.
addr
);

1572 
	`qdev_¥›_£t_uöt32
(&
dev
->
qdev
, "víd‹id", 
fûãr
.
víd‹_id
);

1573 
	`qdev_¥›_£t_uöt32
(&
dev
->
qdev
, "¥odu˘id", 
fûãr
.
¥odu˘_id
);

1574 
	`qdev_öô_noÁû
(&
dev
->
qdev
);

1575  
dev
;

1577 
Áû
:

1578 
	`qdev_‰ì
(&
dev
->
qdev
);

1579  
NULL
;

1580 
	}
}

1582 
	$usb_ho°_devi˚_˛o£
(c⁄° *
dev«me
)

1585 
¥odu˘_«me
[
PRODUCT_NAME_SZ
];

1586 
bus_num
, 
addr
;

1587 
USBHo°Devi˚
 *
s
;

1589 i‡(
	`°r°r
(
dev«me
, "auto:")) {

1590  
	`usb_ho°_auto_dñ
(
dev«me
);

1592 i‡(
	`usb_ho°_föd_devi˚
(&
bus_num
, &
addr
, 
¥odu˘_«me
,

1593 (
¥odu˘_«me
), 
dev«me
) < 0) {

1596 
s
 = 
	`ho°dev_föd
(
bus_num
, 
addr
);

1597 i‡(
s
) {

1598 
	`usb_devi˚_dñëe_addr
(
s
->
bus_num
, s->
dev
.
addr
);

1604 
	}
}

1616 
	$usb_ho°_ªad_fûe
(*
löe
, 
size_t
 
löe_size
,

1617 c⁄° *
devi˚_fûe
, c⁄° *
devi˚_«me
)

1619 
FILE
 *
f
;

1620 
ªt
 = 0;

1621 
fûíame
[
PATH_MAX
];

1623 
	`¢¥ötf
(
fûíame
, 
PATH_MAX
, "/sys/bus/usb/devi˚s/%s/%s", 
devi˚_«me
,

1624 
devi˚_fûe
);

1625 
f
 = 
	`f›í
(
fûíame
, "r");

1626 i‡(
f
) {

1627 
ªt
 = 
	`fgës
(
löe
, 
löe_size
, 
f
Ë!
NULL
;

1628 
	`f˛o£
(
f
);

1631  
ªt
;

1632 
	}
}

1641 
	$usb_ho°_sˇn
(*
›aque
, 
USBSˇnFunc
 *
func
)

1643 
DIR
 *
dú
 = 
NULL
;

1644 
löe
[1024];

1645 
bus_num
, 
addr
, 
•ìd
, 
˛ass_id
, 
¥odu˘_id
, 
víd‹_id
;

1646 
ªt
 = 0;

1647 
p‹t
[
MAX_PORTLEN
];

1648 
¥odu˘_«me
[512];

1649 
dúít
 *
de
;

1651 
dú
 = 
	`›ídú
("/sys/bus/usb/devices");

1652 i‡(!
dú
) {

1653 
	`≥º‹
("husb: opendir /sys/bus/usb/devices");

1654 
	`Ârötf
(
°dîr
, "husb:Ölease make sure sysfs is mountedát /sys\n");

1655 
the_íd
;

1658 (
de
 = 
	`ªaddú
(
dú
))) {

1659 i‡(
de
->
d_«me
[0] !'.' && !
	`°rchr
(de->d_name, ':')) {

1660 i‡(
	`ssˇnf
(
de
->
d_«me
, "%d-%7[0-9.]", &
bus_num
, 
p‹t
) < 2) {

1664 i‡(!
	`usb_ho°_ªad_fûe
(
löe
, ÷öe), "devnum", 
de
->
d_«me
)) {

1665 
the_íd
;

1667 i‡(
	`ssˇnf
(
löe
, "%d", &
addr
) != 1) {

1668 
the_íd
;

1670 i‡(!
	`usb_ho°_ªad_fûe
(
löe
, (line), "bDeviceClass",

1671 
de
->
d_«me
)) {

1672 
the_íd
;

1674 i‡(
	`ssˇnf
(
löe
, "%x", &
˛ass_id
) != 1) {

1675 
the_íd
;

1678 i‡(!
	`usb_ho°_ªad_fûe
(
löe
, (line), "idVendor",

1679 
de
->
d_«me
)) {

1680 
the_íd
;

1682 i‡(
	`ssˇnf
(
löe
, "%x", &
víd‹_id
) != 1) {

1683 
the_íd
;

1685 i‡(!
	`usb_ho°_ªad_fûe
(
löe
, (line), "idProduct",

1686 
de
->
d_«me
)) {

1687 
the_íd
;

1689 i‡(
	`ssˇnf
(
löe
, "%x", &
¥odu˘_id
) != 1) {

1690 
the_íd
;

1692 i‡(!
	`usb_ho°_ªad_fûe
(
löe
, (line), "product",

1693 
de
->
d_«me
)) {

1694 *
¥odu˘_«me
 = 0;

1696 i‡(
	`°æí
(
löe
) > 0) {

1697 
löe
[
	`°æí
(line) - 1] = '\0';

1699 
	`p°r˝y
(
¥odu˘_«me
, ’rodu˘_«me), 
löe
);

1702 i‡(!
	`usb_ho°_ªad_fûe
(
löe
, ÷öe), "•ìd", 
de
->
d_«me
)) {

1703 
the_íd
;

1705 i‡(!
	`°rcmp
(
löe
, "5000\n")) {

1706 
•ìd
 = 
USB_SPEED_SUPER
;

1707 } i‡(!
	`°rcmp
(
löe
, "480\n")) {

1708 
•ìd
 = 
USB_SPEED_HIGH
;

1709 } i‡(!
	`°rcmp
(
löe
, "1.5\n")) {

1710 
•ìd
 = 
USB_SPEED_LOW
;

1712 
•ìd
 = 
USB_SPEED_FULL
;

1715 
ªt
 = 
	`func
(
›aque
, 
bus_num
, 
addr
, 
p‹t
, 
˛ass_id
, 
víd‹_id
,

1716 
¥odu˘_id
, 
¥odu˘_«me
, 
•ìd
);

1717 i‡(
ªt
) {

1718 
the_íd
;

1722 
the_íd
:

1723 i‡(
dú
) {

1724 
	`˛o£dú
(
dú
);

1726  
ªt
;

1727 
	}
}

1729 
QEMUTimî
 *
	gusb_auto_timî
;

1731 
	$usb_ho°_auto_sˇn
(*
›aque
, 
bus_num
,

1732 
addr
, c⁄° *
p‹t
,

1733 
˛ass_id
, 
víd‹_id
, 
¥odu˘_id
,

1734 c⁄° *
¥odu˘_«me
, 
•ìd
)

1736 
USBAutoFûãr
 *
f
;

1737 
USBHo°Devi˚
 *
s
;

1740 i‡(
˛ass_id
 == 9)

1743 
	`QTAILQ_FOREACH
(
s
, &
ho°devs
, 
√xt
) {

1744 
f
 = &
s
->
m©ch
;

1746 i‡(
f
->
bus_num
 > 0 && f->bus_num != bus_num) {

1749 i‡(
f
->
addr
 > 0 && f->addr !=áddr) {

1752 i‡(
f
->
p‹t
 !
NULL
 && (p‹à=NULL || 
	`°rcmp
(f->port,Öort) != 0)) {

1756 i‡(
f
->
víd‹_id
 > 0 && f->vendor_id != vendor_id) {

1760 i‡(
f
->
¥odu˘_id
 > 0 && f->product_id !=Öroduct_id) {

1764 
s
->
£í
++;

1765 i‡(
s
->
îrcou¡
 >= 3) {

1770 i‡(
s
->
fd
 != -1) {

1773 
	`DPRINTF
("husb:áutÿ›í: bus_num %dádd∏%d\n", 
bus_num
, 
addr
);

1775 i‡(
	`usb_ho°_›í
(
s
, 
bus_num
, 
addr
, 
p‹t
, 
¥odu˘_«me
, 
•ìd
) < 0) {

1776 
s
->
îrcou¡
++;

1782 
	}
}

1784 
	$usb_ho°_auto_check
(*
unu£d
)

1786 
USBHo°Devi˚
 *
s
;

1787 
unc⁄√˘ed
 = 0;

1789 i‡(
	`run°©e_is_ru¬ög
()) {

1790 
	`usb_ho°_sˇn
(
NULL
, 
usb_ho°_auto_sˇn
);

1792 
	`QTAILQ_FOREACH
(
s
, &
ho°devs
, 
√xt
) {

1793 i‡(
s
->
fd
 == -1) {

1794 
unc⁄√˘ed
++;

1796 i‡(
s
->
£í
 == 0) {

1797 
s
->
îrcou¡
 = 0;

1799 
s
->
£í
 = 0;

1802 i‡(
unc⁄√˘ed
 == 0) {

1804 i‡(
usb_auto_timî
) {

1805 
	`qemu_dñ_timî
(
usb_auto_timî
);

1806 
	`åa˚_usb_ho°_auto_sˇn_dißbÀd
();

1812 i‡(!
usb_auto_timî
) {

1813 
usb_auto_timî
 = 
	`qemu_√w_timî_ms
(
π_˛ock
, 
usb_ho°_auto_check
, 
NULL
);

1814 i‡(!
usb_auto_timî
) {

1817 
	`åa˚_usb_ho°_auto_sˇn_íabÀd
();

1819 
	`qemu_mod_timî
(
usb_auto_timî
, 
	`qemu_gë_˛ock_ms
(
π_˛ock
) + 2000);

1820 
	}
}

1835 
	$∑r£_fûãr
(c⁄° *
•ec
, 
USBAutoFûãr
 *
f
)

1837 íum { 
BUS
, 
DEV
, 
VID
, 
PID
, 
DONE
 };

1838 c⁄° *
p
 = 
•ec
;

1839 
i
;

1841 
f
->
bus_num
 = 0;

1842 
f
->
addr
 = 0;

1843 
f
->
víd‹_id
 = 0;

1844 
f
->
¥odu˘_id
 = 0;

1846 
i
 = 
BUS
; i < 
DONE
; i++) {

1847 
p
 = 
	`°Ωbrk
(p, ":.");

1848 i‡(!
p
) {

1851 
p
++;

1853 i‡(*
p
 == '*') {

1856 
i
) {

1857 
BUS
: 
f
->
bus_num
 = 
	`°πﬁ
(
p
, 
NULL
, 10); ;

1858 
DEV
: 
f
->
addr
 = 
	`°πﬁ
(
p
, 
NULL
, 10); ;

1859 
VID
: 
f
->
víd‹_id
 = 
	`°πﬁ
(
p
, 
NULL
, 16); ;

1860 
PID
: 
f
->
¥odu˘_id
 = 
	`°πﬁ
(
p
, 
NULL
, 16); ;

1864 i‡(
i
 < 
DEV
) {

1865 
	`Ârötf
(
°dîr
, "husb: invÆidáutÿfûã∏•e¯%s\n", 
•ec
);

1870 
	}
}

1875 
	susb_˛ass_öfo
 {

1876 
	m˛ass
;

1877 c⁄° *
	m˛ass_«me
;

1880 c⁄° 
usb_˛ass_öfo
 
	gusb_˛ass_öfo
[] = {

1881 { 
USB_CLASS_AUDIO
, "Audio"},

1882 { 
USB_CLASS_COMM
, "Communication"},

1883 { 
USB_CLASS_HID
, "HID"},

1884 { 
USB_CLASS_HUB
, "Hub" },

1885 { 
USB_CLASS_PHYSICAL
, "Physical" },

1886 { 
USB_CLASS_PRINTER
, "Printer" },

1887 { 
USB_CLASS_MASS_STORAGE
, "Storage" },

1888 { 
USB_CLASS_CDC_DATA
, "Data" },

1889 { 
USB_CLASS_APP_SPEC
, "Application Specific" },

1890 { 
USB_CLASS_VENDOR_SPEC
, "Vendor Specific" },

1891 { 
USB_CLASS_STILL_IMAGE
, "Still Image" },

1892 { 
USB_CLASS_CSCID
, "Smart Card" },

1893 { 
USB_CLASS_CONTENT_SEC
, "Content Security" },

1894 { -1, 
NULL
 }

1897 c⁄° *
	$usb_˛ass_°r
(
uöt8_t
 
˛ass
)

1899 c⁄° 
usb_˛ass_öfo
 *
p
;

1900 
p
 = 
usb_˛ass_öfo
;Ö->
˛ass
 != -1;Ö++) {

1901 i‡(
p
->
˛ass
 == class) {

1905  
p
->
˛ass_«me
;

1906 
	}
}

1908 
	$usb_öfo_devi˚
(
M⁄ô‹
 *
m⁄
, 
bus_num
,

1909 
addr
, c⁄° *
p‹t
,

1910 
˛ass_id
, 
víd‹_id
, 
¥odu˘_id
,

1911 c⁄° *
¥odu˘_«me
,

1912 
•ìd
)

1914 c⁄° *
˛ass_°r
, *
•ìd_°r
;

1916 
•ìd
) {

1917 
USB_SPEED_LOW
:

1918 
•ìd_°r
 = "1.5";

1920 
USB_SPEED_FULL
:

1921 
•ìd_°r
 = "12";

1923 
USB_SPEED_HIGH
:

1924 
•ìd_°r
 = "480";

1926 
USB_SPEED_SUPER
:

1927 
•ìd_°r
 = "5000";

1930 
•ìd_°r
 = "?";

1934 
	`m⁄ô‹_¥ötf
(
m⁄
, " Bus %d, Addr %d, Port %s, Speed %s Mb/s\n",

1935 
bus_num
, 
addr
, 
p‹t
, 
•ìd_°r
);

1936 
˛ass_°r
 = 
	`usb_˛ass_°r
(
˛ass_id
);

1937 i‡(
˛ass_°r
) {

1938 
	`m⁄ô‹_¥ötf
(
m⁄
, " %s:", 
˛ass_°r
);

1940 
	`m⁄ô‹_¥ötf
(
m⁄
, " Cœs†%02x:", 
˛ass_id
);

1942 
	`m⁄ô‹_¥ötf
(
m⁄
, " USB devi˚ %04x:%04x", 
víd‹_id
, 
¥odu˘_id
);

1943 i‡(
¥odu˘_«me
[0] != '\0') {

1944 
	`m⁄ô‹_¥ötf
(
m⁄
, ", %s", 
¥odu˘_«me
);

1946 
	`m⁄ô‹_¥ötf
(
m⁄
, "\n");

1947 
	}
}

1949 
	$usb_ho°_öfo_devi˚
(*
›aque
, 
bus_num
, 
addr
,

1950 c⁄° *
∑th
, 
˛ass_id
,

1951 
víd‹_id
, 
¥odu˘_id
,

1952 c⁄° *
¥odu˘_«me
,

1953 
•ìd
)

1955 
M⁄ô‹
 *
m⁄
 = 
›aque
;

1957 
	`usb_öfo_devi˚
(
m⁄
, 
bus_num
, 
addr
, 
∑th
, 
˛ass_id
, 
víd‹_id
, 
¥odu˘_id
,

1958 
¥odu˘_«me
, 
•ìd
);

1960 
	}
}

1962 
	$dec2°r
(
vÆ
, *
°r
, 
size_t
 
size
)

1964 i‡(
vÆ
 == 0) {

1965 
	`¢¥ötf
(
°r
, 
size
, "*");

1967 
	`¢¥ötf
(
°r
, 
size
, "%d", 
vÆ
);

1969 
	}
}

1971 
	$hex2°r
(
vÆ
, *
°r
, 
size_t
 
size
)

1973 i‡(
vÆ
 == 0) {

1974 
	`¢¥ötf
(
°r
, 
size
, "*");

1976 
	`¢¥ötf
(
°r
, 
size
, "%04x", 
vÆ
);

1978 
	}
}

1980 
	$usb_ho°_öfo
(
M⁄ô‹
 *
m⁄
)

1982 
USBAutoFûãr
 *
f
;

1983 
USBHo°Devi˚
 *
s
;

1985 
	`usb_ho°_sˇn
(
m⁄
, 
usb_ho°_öfo_devi˚
);

1987 i‡(
	`QTAILQ_EMPTY
(&
ho°devs
)) {

1991 
	`m⁄ô‹_¥ötf
(
m⁄
, " Auto filters:\n");

1992 
	`QTAILQ_FOREACH
(
s
, &
ho°devs
, 
√xt
) {

1993 
bus
[10], 
addr
[10], 
vid
[10], 
pid
[10];

1994 
f
 = &
s
->
m©ch
;

1995 
	`dec2°r
(
f
->
bus_num
, 
bus
, (bus));

1996 
	`dec2°r
(
f
->
addr
,áddr, (addr));

1997 
	`hex2°r
(
f
->
víd‹_id
, 
vid
, (vid));

1998 
	`hex2°r
(
f
->
¥odu˘_id
, 
pid
, (pid));

1999 
	`m⁄ô‹_¥ötf
(
m⁄
, " Bus %s, Addr %s, Port %s, ID %s:%s\n",

2000 
bus
, 
addr
, 
f
->
p‹t
 ? f->p‹à: "*", 
vid
, 
pid
);

2002 
	}
}

	@host-stub.c

33 
	~"qemu-comm⁄.h
"

34 
	~"c⁄sﬁe.h
"

35 
	~"hw/usb.h
"

36 
	~"m⁄ô‹.h
"

38 
	$usb_ho°_öfo
(
M⁄ô‹
 *
m⁄
)

40 
	`m⁄ô‹_¥ötf
(
m⁄
, "USB host devicesÇot supported\n");

41 
	}
}

44 
USBDevi˚
 *
	$usb_ho°_devi˚_›í
(
USBBus
 *
bus
, c⁄° *
dev«me
)

46  
NULL
;

47 
	}
}

49 
	$usb_ho°_devi˚_˛o£
(c⁄° *
dev«me
)

52 
	}
}

	@libhw.c

22 
	~"qemu-comm⁄.h
"

23 
	~"˝u-comm⁄.h
"

24 
	~"hw/usb.h
"

25 
	~"dma.h
"

27 
	$usb_∑ckë_m≠
(
USBPackë
 *
p
, 
QEMUSGLi°
 *
sgl
)

29 
DMADúe˘i⁄
 
dú
 = (
p
->
pid
 =
USB_TOKEN_IN
) ?

30 
DMA_DIRECTION_FROM_DEVICE
 : 
DMA_DIRECTION_TO_DEVICE
;

31 
dma_addr_t
 
Àn
;

32 *
mem
;

33 
i
;

35 
i
 = 0; i < 
sgl
->
nsg
; i++) {

36 
Àn
 = 
sgl
->
sg
[
i
].len;

37 
mem
 = 
	`dma_mem‹y_m≠
(
sgl
->
dma
, sgl->
sg
[
i
].
ba£
, &
Àn
, 
dú
);

38 i‡(!
mem
) {

39 
îr
;

41 
	`qemu_iovec_add
(&
p
->
iov
, 
mem
, 
Àn
);

42 i‡(
Àn
 !
sgl
->
sg
[
i
].len) {

43 
îr
;

48 
îr
:

49 
	`usb_∑ckë_unm≠
(
p
, 
sgl
);

51 
	}
}

53 
	$usb_∑ckë_unm≠
(
USBPackë
 *
p
, 
QEMUSGLi°
 *
sgl
)

55 
DMADúe˘i⁄
 
dú
 = (
p
->
pid
 =
USB_TOKEN_IN
) ?

56 
DMA_DIRECTION_FROM_DEVICE
 : 
DMA_DIRECTION_TO_DEVICE
;

57 
i
;

59 
i
 = 0; i < 
p
->
iov
.
niov
; i++) {

60 
	`dma_mem‹y_unm≠
(
sgl
->
dma
, 
p
->
iov
.iov[
i
].
iov_ba£
,

61 
p
->
iov
.iov[
i
].
iov_Àn
, 
dú
,

62 
p
->
iov
.iov[
i
].
iov_Àn
);

64 
	}
}

	@redirect.c

28 
	~"qemu-comm⁄.h
"

29 
	~"qemu-timî.h
"

30 
	~"m⁄ô‹.h
"

31 
	~"sy£mu.h
"

33 
	~<dúít.h
>

34 
	~<sys/io˘l.h
>

35 
	~<sig«l.h
>

36 
	~<usbªdú∑r£r.h
>

37 
	~<usbªdúfûãr.h
>

39 
	~"hw/usb.h
"

41 
	#MAX_ENDPOINTS
 32

	)

42 
	#NO_INTERFACE_INFO
 255

	)

43 
	#EP2I
(
ï_addªss
Ë((”p_addªs†& 0x80Ë>> 3Ë| (ï_addªs†& 0x0f))

	)

44 
	#I2EP
(
i
Ë(((ò& 0x10Ë<< 3Ë| (ò& 0x0f))

	)

46 
AsyncURB
 
	tAsyncURB
;

47 
USBRedúDevi˚
 
	tUSBRedúDevi˚
;

50 
	sbuf_∑ckë
 {

51 
uöt8_t
 *
	md©a
;

52 
	mÀn
;

53 
	m°©us
;

54 
QTAILQ_ENTRY
(
buf_∑ckë
)
	m√xt
;

57 
	sídp_d©a
 {

58 
uöt8_t
 
	mty≥
;

59 
uöt8_t
 
	möãrvÆ
;

60 
uöt8_t
 
	möãrÁ˚
;

61 
uöt8_t
 
	miso_°¨ãd
;

62 
uöt8_t
 
	miso_îr‹
;

63 
uöt8_t
 
	möãºu±_°¨ãd
;

64 
uöt8_t
 
	möãºu±_îr‹
;

65 
uöt8_t
 
	mbuÂq_¥efûÀd
;

66 
uöt8_t
 
	mbuÂq_dr›pög_∑ckës
;

67 
QTAILQ_HEAD
(, 
buf_∑ckë
Ë
	mbuÂq
;

68 
	mbuÂq_size
;

69 
	mbuÂq_èrgë_size
;

72 
	sUSBRedúDevi˚
 {

73 
USBDevi˚
 
	mdev
;

75 
Ch¨DrivîSèã
 *
	mcs
;

76 
uöt8_t
 
	mdebug
;

77 *
	mfûãr_°r
;

78 
öt32_t
 
	mboŸödex
;

80 c⁄° 
uöt8_t
 *
	mªad_buf
;

81 
	mªad_buf_size
;

83 
QEMUBH
 *
	m›í_˛o£_bh
;

85 
QEMUTimî
 *
	m©èch_timî
;

86 
öt64_t
 
	m√xt_©èch_time
;

87 
usbªdú∑r£r
 *
	m∑r£r
;

88 
ídp_d©a
 
	mídpoöt
[
MAX_ENDPOINTS
];

89 
uöt32_t
 
	m∑ckë_id
;

90 
QTAILQ_HEAD
(, 
AsyncURB
Ë
	masyncq
;

92 
usb_ªdú_devi˚_c⁄√˘_hódî
 
	mdevi˚_öfo
;

93 
usb_ªdú_öãrÁ˚_öfo_hódî
 
	möãrÁ˚_öfo
;

94 
usbªdúfûãr_ruÀ
 *
	mfûãr_ruÀs
;

95 
	mfûãr_ruÀs_cou¡
;

98 
	sAsyncURB
 {

99 
USBRedúDevi˚
 *
	mdev
;

100 
USBPackë
 *
	m∑ckë
;

101 
uöt32_t
 
	m∑ckë_id
;

102 
	mgë
;

104 
usb_ªdú_c⁄åﬁ_∑ckë_hódî
 
	mc⁄åﬁ_∑ckë
;

105 
usb_ªdú_bulk_∑ckë_hódî
 
	mbulk_∑ckë
;

106 
usb_ªdú_öãºu±_∑ckë_hódî
 
	möãºu±_∑ckë
;

108 
QTAILQ_ENTRY
(
AsyncURB
)
	m√xt
;

111 
usbªdú_hñlo
(*
¥iv
, 
usb_ªdú_hñlo_hódî
 *
h
);

112 
usbªdú_devi˚_c⁄√˘
(*
¥iv
,

113 
usb_ªdú_devi˚_c⁄√˘_hódî
 *
devi˚_c⁄√˘
);

114 
usbªdú_devi˚_disc⁄√˘
(*
¥iv
);

115 
usbªdú_öãrÁ˚_öfo
(*
¥iv
,

116 
usb_ªdú_öãrÁ˚_öfo_hódî
 *
öãrÁ˚_öfo
);

117 
usbªdú_ï_öfo
(*
¥iv
,

118 
usb_ªdú_ï_öfo_hódî
 *
ï_öfo
);

119 
usbªdú_c⁄figuøti⁄_°©us
(*
¥iv
, 
uöt32_t
 
id
,

120 
usb_ªdú_c⁄figuøti⁄_°©us_hódî
 *
c⁄figuøti⁄_°©us
);

121 
usbªdú_Æt_£âög_°©us
(*
¥iv
, 
uöt32_t
 
id
,

122 
usb_ªdú_Æt_£âög_°©us_hódî
 *
Æt_£âög_°©us
);

123 
usbªdú_iso_°ªam_°©us
(*
¥iv
, 
uöt32_t
 
id
,

124 
usb_ªdú_iso_°ªam_°©us_hódî
 *
iso_°ªam_°©us
);

125 
usbªdú_öãºu±_ª˚ivög_°©us
(*
¥iv
, 
uöt32_t
 
id
,

126 
usb_ªdú_öãºu±_ª˚ivög_°©us_hódî


127 *
öãºu±_ª˚ivög_°©us
);

128 
usbªdú_bulk_°ªams_°©us
(*
¥iv
, 
uöt32_t
 
id
,

129 
usb_ªdú_bulk_°ªams_°©us_hódî
 *
bulk_°ªams_°©us
);

130 
usbªdú_c⁄åﬁ_∑ckë
(*
¥iv
, 
uöt32_t
 
id
,

131 
usb_ªdú_c⁄åﬁ_∑ckë_hódî
 *
c⁄åﬁ_∑ckë
,

132 
uöt8_t
 *
d©a
, 
d©a_Àn
);

133 
usbªdú_bulk_∑ckë
(*
¥iv
, 
uöt32_t
 
id
,

134 
usb_ªdú_bulk_∑ckë_hódî
 *
bulk_∑ckë
,

135 
uöt8_t
 *
d©a
, 
d©a_Àn
);

136 
usbªdú_iso_∑ckë
(*
¥iv
, 
uöt32_t
 
id
,

137 
usb_ªdú_iso_∑ckë_hódî
 *
iso_∑ckë
,

138 
uöt8_t
 *
d©a
, 
d©a_Àn
);

139 
usbªdú_öãºu±_∑ckë
(*
¥iv
, 
uöt32_t
 
id
,

140 
usb_ªdú_öãºu±_∑ckë_hódî
 *
öãºu±_hódî
,

141 
uöt8_t
 *
d©a
, 
d©a_Àn
);

143 
usbªdú_h™dÀ_°©us
(
USBRedúDevi˚
 *
dev
,

144 
°©us
, 
a˘uÆ_Àn
);

150 
	#ERROR
(...) \

152 i‡(
dev
->
debug
 >
usbªdú∑r£r_îr‹
) { \

153 
	`îr‹_ªp‹t
("usb-ªdúÉº‹: " 
__VA_ARGS__
); \

155 } 0)

	)

156 
	#WARNING
(...) \

158 i‡(
dev
->
debug
 >
usbªdú∑r£r_w¨nög
) { \

159 
	`îr‹_ªp‹t
("usb-ªdú w¨nög: " 
__VA_ARGS__
); \

161 } 0)

	)

162 
	#INFO
(...) \

164 i‡(
dev
->
debug
 >
usbªdú∑r£r_öfo
) { \

165 
	`îr‹_ªp‹t
("usb-ªdú: " 
__VA_ARGS__
); \

167 } 0)

	)

168 
	#DPRINTF
(...) \

170 i‡(
dev
->
debug
 >
usbªdú∑r£r_debug
) { \

171 
	`îr‹_ªp‹t
("usb-ªdú: " 
__VA_ARGS__
); \

173 } 0)

	)

174 
	#DPRINTF2
(...) \

176 i‡(
dev
->
debug
 >
usbªdú∑r£r_debug_d©a
) { \

177 
	`îr‹_ªp‹t
("usb-ªdú: " 
__VA_ARGS__
); \

179 } 0)

	)

181 
	$usbªdú_log
(*
¥iv
, 
Àvñ
, c⁄° *
msg
)

183 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

185 i‡(
dev
->
debug
 < 
Àvñ
) {

189 
	`îr‹_ªp‹t
("%s", 
msg
);

190 
	}
}

192 
	$usbªdú_log_d©a
(
USBRedúDevi˚
 *
dev
, c⁄° *
desc
,

193 c⁄° 
uöt8_t
 *
d©a
, 
Àn
)

195 
i
, 
j
, 
n
;

197 i‡(
dev
->
debug
 < 
usbªdú∑r£r_debug_d©a
) {

201 
i
 = 0; i < 
Àn
; i +
j
) {

202 
buf
[128];

204 
n
 = 
	`•rötf
(
buf
, "%s", 
desc
);

205 
j
 = 0; j < 8 && 
i
 + j < 
Àn
; j++) {

206 
n
 +
	`•rötf
(
buf
 +Ç, " %02X", 
d©a
[
i
 + 
j
]);

208 
	`îr‹_ªp‹t
("%s", 
buf
);

210 
	}
}

216 
	$usbªdú_ªad
(*
¥iv
, 
uöt8_t
 *
d©a
, 
cou¡
)

218 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

220 i‡(
dev
->
ªad_buf_size
 < 
cou¡
) {

221 
cou¡
 = 
dev
->
ªad_buf_size
;

224 
	`mem˝y
(
d©a
, 
dev
->
ªad_buf
, 
cou¡
);

226 
dev
->
ªad_buf_size
 -
cou¡
;

227 i‡(
dev
->
ªad_buf_size
) {

228 
dev
->
ªad_buf
 +
cou¡
;

230 
dev
->
ªad_buf
 = 
NULL
;

233  
cou¡
;

234 
	}
}

236 
	$usbªdú_wrôe
(*
¥iv
, 
uöt8_t
 *
d©a
, 
cou¡
)

238 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

240 i‡(!
dev
->
cs
->
›íed
) {

244  
	`qemu_chr_„_wrôe
(
dev
->
cs
, 
d©a
, 
cou¡
);

245 
	}
}

251 
AsyncURB
 *
	$async_Æloc
(
USBRedúDevi˚
 *
dev
, 
USBPackë
 *
p
)

253 
AsyncURB
 *
aurb
 = (AsyncURB *Ë
	`g_mÆloc0
((AsyncURB));

254 
aurb
->
dev
 = dev;

255 
aurb
->
∑ckë
 = 
p
;

256 
aurb
->
∑ckë_id
 = 
dev
->packet_id;

257 
	`QTAILQ_INSERT_TAIL
(&
dev
->
asyncq
, 
aurb
, 
√xt
);

258 
dev
->
∑ckë_id
++;

260  
aurb
;

261 
	}
}

263 
	$async_‰ì
(
USBRedúDevi˚
 *
dev
, 
AsyncURB
 *
aurb
)

265 
	`QTAILQ_REMOVE
(&
dev
->
asyncq
, 
aurb
, 
√xt
);

266 
	`g_‰ì
(
aurb
);

267 
	}
}

269 
AsyncURB
 *
	$async_föd
(
USBRedúDevi˚
 *
dev
, 
uöt32_t
 
∑ckë_id
)

271 
AsyncURB
 *
aurb
;

273 
	`QTAILQ_FOREACH
(
aurb
, &
dev
->
asyncq
, 
√xt
) {

274 i‡(
aurb
->
∑ckë_id
 ==Öacket_id) {

275  
aurb
;

278 
	`DPRINTF
("couldÇŸ födásyn¯urb f‹Öackë_id %u\n", 
∑ckë_id
);

279  
NULL
;

280 
	}
}

282 
	$usbªdú_ˇn˚l_∑ckë
(
USBDevi˚
 *
udev
, 
USBPackë
 *
p
)

284 
USBRedúDevi˚
 *
dev
 = 
	`DO_UPCAST
(USBRedúDevi˚, dev, 
udev
);

285 
AsyncURB
 *
aurb
;

287 
	`QTAILQ_FOREACH
(
aurb
, &
dev
->
asyncq
, 
√xt
) {

288 i‡(
p
 !
aurb
->
∑ckë
) {

292 
	`DPRINTF
("asyn¯ˇn˚»id %u\n", 
aurb
->
∑ckë_id
);

293 
	`usbªdú∑r£r_£nd_ˇn˚l_d©a_∑ckë
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
);

294 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

297 
aurb
->
∑ckë
 = 
NULL
;

300 
	}
}

302 
	$buÂ_Æloc
(
USBRedúDevi˚
 *
dev
,

303 
uöt8_t
 *
d©a
, 
Àn
, 
°©us
, uöt8_à
ï
)

305 
buf_∑ckë
 *
buÂ
;

307 i‡(!
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_dr›pög_∑ckës
 &&

308 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_size
 >

309 2 * 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_èrgë_size
) {

310 
	`DPRINTF
("buÂq ovîÊow, dr›pögÖackë†ï %02X\n", 
ï
);

311 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_dr›pög_∑ckës
 = 1;

315 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_dr›pög_∑ckës
) {

316 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_size
 >

317 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_èrgë_size
) {

318 
	`‰ì
(
d©a
);

321 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_dr›pög_∑ckës
 = 0;

324 
buÂ
 = 
	`g_mÆloc
((
buf_∑ckë
));

325 
buÂ
->
d©a
 = data;

326 
buÂ
->
Àn
 =Üen;

327 
buÂ
->
°©us
 = status;

328 
	`QTAILQ_INSERT_TAIL
(&
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq
, 
buÂ
, 
√xt
);

329 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_size
++;

330 
	}
}

332 
	$buÂ_‰ì
(
USBRedúDevi˚
 *
dev
, 
buf_∑ckë
 *
buÂ
,

333 
uöt8_t
 
ï
)

335 
	`QTAILQ_REMOVE
(&
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq
, 
buÂ
, 
√xt
);

336 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_size
--;

337 
	`‰ì
(
buÂ
->
d©a
);

338 
	`g_‰ì
(
buÂ
);

339 
	}
}

341 
	$usbªdú_‰ì_buÂq
(
USBRedúDevi˚
 *
dev
, 
uöt8_t
 
ï
)

343 
buf_∑ckë
 *
buf
, *
buf_√xt
;

345 
	`QTAILQ_FOREACH_SAFE
(
buf
, &
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq
, 
√xt
, 
buf_√xt
) {

346 
	`buÂ_‰ì
(
dev
, 
buf
, 
ï
);

348 
	}
}

354 
	$usbªdú_h™dÀ_ª£t
(
USBDevi˚
 *
udev
)

356 
USBRedúDevi˚
 *
dev
 = 
	`DO_UPCAST
(USBRedúDevi˚, dev, 
udev
);

358 
	`DPRINTF
("reset device\n");

359 
	`usbªdú∑r£r_£nd_ª£t
(
dev
->
∑r£r
);

360 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

361 
	}
}

363 
	$usbªdú_h™dÀ_iso_d©a
(
USBRedúDevi˚
 *
dev
, 
USBPackë
 *
p
,

364 
uöt8_t
 
ï
)

366 
°©us
, 
Àn
;

367 i‡(!
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_°¨ãd
 &&

368 !
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_îr‹
) {

369 
usb_ªdú_°¨t_iso_°ªam_hódî
 
°¨t_iso
 = {

370 .
ídpoöt
 = 
ï
,

372 
pkts_≥r_£c
;

374 i‡(
dev
->dev.
•ìd
 =
USB_SPEED_HIGH
) {

375 
pkts_≥r_£c
 = 8000 / 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãrvÆ
;

377 
pkts_≥r_£c
 = 1000 / 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãrvÆ
;

380 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_èrgë_size
 = (
pkts_≥r_£c
 * 60) / 1000;

384 
°¨t_iso
.
pkts_≥r_urb
 = 
pkts_≥r_£c
 / 100;

385 i‡(
°¨t_iso
.
pkts_≥r_urb
 < 1) {

386 
°¨t_iso
.
pkts_≥r_urb
 = 1;

387 } i‡(
°¨t_iso
.
pkts_≥r_urb
 > 32) {

388 
°¨t_iso
.
pkts_≥r_urb
 = 32;

391 
°¨t_iso
.
no_urbs
 = (
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_èrgë_size
 +

392 
°¨t_iso
.
pkts_≥r_urb
 - 1) /

393 
°¨t_iso
.
pkts_≥r_urb
;

396 i‡(!(
ï
 & 
USB_DIR_IN
)) {

397 
°¨t_iso
.
no_urbs
 *= 2;

399 i‡(
°¨t_iso
.
no_urbs
 > 16) {

400 
°¨t_iso
.
no_urbs
 = 16;

404 
	`usbªdú∑r£r_£nd_°¨t_iso_°ªam
(
dev
->
∑r£r
, 0, &
°¨t_iso
);

405 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

406 
	`DPRINTF
("iso stream startedÖkts/sec %dÖkts/urb %d urbs %dÉp %02X\n",

407 
pkts_≥r_£c
, 
°¨t_iso
.
pkts_≥r_urb
, sèπ_iso.
no_urbs
, 
ï
);

408 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_°¨ãd
 = 1;

409 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_¥efûÀd
 = 0;

410 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_dr›pög_∑ckës
 = 0;

413 i‡(
ï
 & 
USB_DIR_IN
) {

414 
buf_∑ckë
 *
is›
;

416 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_°¨ãd
 &&

417 !
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_¥efûÀd
) {

418 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_size
 <

419 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_èrgë_size
) {

420  
	`usbªdú_h™dÀ_°©us
(
dev
, 0, 0);

422 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_¥efûÀd
 = 1;

425 
is›
 = 
	`QTAILQ_FIRST
(&
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq
);

426 i‡(
is›
 =
NULL
) {

427 
	`DPRINTF
("iso-token-inÉp %02X,Ço isop, iso_error: %d\n",

428 
ï
, 
dev
->
ídpoöt
[
	`EP2I
”p)].
iso_îr‹
);

430 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_¥efûÀd
 = 0;

432 
°©us
 = 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_îr‹
;

433 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_îr‹
 = 0;

434  
°©us
 ? 
USB_RET_IOERROR
 : 0;

436 
	`DPRINTF2
("iso-tokí-öÉ∞%02X sètu†%dÜí %d queue-size: %d\n", 
ï
,

437 
is›
->
°©us
, is›->
Àn
, 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_size
);

439 
°©us
 = 
is›
->status;

440 i‡(
°©us
 !
usb_ªdú_suc˚ss
) {

441 
	`buÂ_‰ì
(
dev
, 
is›
, 
ï
);

442  
USB_RET_IOERROR
;

445 
Àn
 = 
is›
->len;

446 i‡(
Àn
 > 
p
->
iov
.
size
) {

447 
	`ERROR
("received iso data isÜargerÅhenÖacketÉp %02X (%d > %d)\n",

448 
ï
, 
Àn
, ()
p
->
iov
.
size
);

449 
	`buÂ_‰ì
(
dev
, 
is›
, 
ï
);

450  
USB_RET_BABBLE
;

452 
	`usb_∑ckë_c›y
(
p
, 
is›
->
d©a
, 
Àn
);

453 
	`buÂ_‰ì
(
dev
, 
is›
, 
ï
);

454  
Àn
;

458 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_°¨ãd
) {

459 
usb_ªdú_iso_∑ckë_hódî
 
iso_∑ckë
 = {

460 .
ídpoöt
 = 
ï
,

461 .
Àngth
 = 
p
->
iov
.
size


463 
uöt8_t
 
buf
[
p
->
iov
.
size
];

465 
	`usb_∑ckë_c›y
(
p
, 
buf
,Ö->
iov
.
size
);

466 
	`usbªdú∑r£r_£nd_iso_∑ckë
(
dev
->
∑r£r
, 0, &
iso_∑ckë
,

467 
buf
, 
p
->
iov
.
size
);

468 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

470 
°©us
 = 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_îr‹
;

471 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_îr‹
 = 0;

472 
	`DPRINTF2
("iso-tokí-ouàï %02X sètu†%dÜí %zd\n", 
ï
, 
°©us
,

473 
p
->
iov
.
size
);

474  
	`usbªdú_h™dÀ_°©us
(
dev
, 
°©us
, 
p
->
iov
.
size
);

476 
	}
}

478 
	$usbªdú_°›_iso_°ªam
(
USBRedúDevi˚
 *
dev
, 
uöt8_t
 
ï
)

480 
usb_ªdú_°›_iso_°ªam_hódî
 
°›_iso_°ªam
 = {

481 .
ídpoöt
 = 
ï


483 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_°¨ãd
) {

484 
	`usbªdú∑r£r_£nd_°›_iso_°ªam
(
dev
->
∑r£r
, 0, &
°›_iso_°ªam
);

485 
	`DPRINTF
("isÿ°ªam st›≥dÉ∞%02X\n", 
ï
);

486 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_°¨ãd
 = 0;

488 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_îr‹
 = 0;

489 
	`usbªdú_‰ì_buÂq
(
dev
, 
ï
);

490 
	}
}

492 
	$usbªdú_h™dÀ_bulk_d©a
(
USBRedúDevi˚
 *
dev
, 
USBPackë
 *
p
,

493 
uöt8_t
 
ï
)

495 
AsyncURB
 *
aurb
 = 
	`async_Æloc
(
dev
, 
p
);

496 
usb_ªdú_bulk_∑ckë_hódî
 
bulk_∑ckë
;

498 
	`DPRINTF
("bulk-ouàï %02XÜí %zd id %u\n", 
ï
,

499 
p
->
iov
.
size
, 
aurb
->
∑ckë_id
);

501 
bulk_∑ckë
.
ídpoöt
 = 
ï
;

502 
bulk_∑ckë
.
Àngth
 = 
p
->
iov
.
size
;

503 
bulk_∑ckë
.
°ªam_id
 = 0;

504 
aurb
->
bulk_∑ckë
 = bulk_packet;

506 i‡(
ï
 & 
USB_DIR_IN
) {

507 
	`usbªdú∑r£r_£nd_bulk_∑ckë
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
,

508 &
bulk_∑ckë
, 
NULL
, 0);

510 
uöt8_t
 
buf
[
p
->
iov
.
size
];

511 
	`usb_∑ckë_c›y
(
p
, 
buf
,Ö->
iov
.
size
);

512 
	`usbªdú_log_d©a
(
dev
, "bulk d©®out:", 
buf
, 
p
->
iov
.
size
);

513 
	`usbªdú∑r£r_£nd_bulk_∑ckë
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
,

514 &
bulk_∑ckë
, 
buf
, 
p
->
iov
.
size
);

516 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

517  
USB_RET_ASYNC
;

518 
	}
}

520 
	$usbªdú_h™dÀ_öãºu±_d©a
(
USBRedúDevi˚
 *
dev
,

521 
USBPackë
 *
p
, 
uöt8_t
 
ï
)

523 i‡(
ï
 & 
USB_DIR_IN
) {

525 
buf_∑ckë
 *
öç
;

526 
°©us
, 
Àn
;

528 i‡(!
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_°¨ãd
 &&

529 !
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_îr‹
) {

530 
usb_ªdú_°¨t_öãºu±_ª˚ivög_hódî
 
°¨t_öt
 = {

531 .
ídpoöt
 = 
ï
,

534 
	`usbªdú∑r£r_£nd_°¨t_öãºu±_ª˚ivög
(
dev
->
∑r£r
, 0,

535 &
°¨t_öt
);

536 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

537 
	`DPRINTF
("öãºu±Ñecv sèπedÉ∞%02X\n", 
ï
);

538 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_°¨ãd
 = 1;

541 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_èrgë_size
 = 1000;

542 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq_dr›pög_∑ckës
 = 0;

545 
öç
 = 
	`QTAILQ_FIRST
(&
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
buÂq
);

546 i‡(
öç
 =
NULL
) {

547 
	`DPRINTF2
("öãºu±-tokí-öÉ∞%02X,Çÿöç\n", 
ï
);

549 
°©us
 = 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_îr‹
;

550 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_îr‹
 = 0;

551 i‡(
°©us
) {

552  
	`usbªdú_h™dÀ_°©us
(
dev
, 
°©us
, 0);

554  
USB_RET_NAK
;

556 
	`DPRINTF
("öãºu±-tokí-öÉ∞%02X sètu†%dÜí %d\n", 
ï
,

557 
öç
->
°©us
, i¡p->
Àn
);

559 
°©us
 = 
öç
->status;

560 i‡(
°©us
 !
usb_ªdú_suc˚ss
) {

561 
	`buÂ_‰ì
(
dev
, 
öç
, 
ï
);

562  
	`usbªdú_h™dÀ_°©us
(
dev
, 
°©us
, 0);

565 
Àn
 = 
öç
->len;

566 i‡(
Àn
 > 
p
->
iov
.
size
) {

567 
	`ERROR
("ª˚ived i¡ d©®i†œrgîÅhíÖackëÉ∞%02X\n", 
ï
);

568 
	`buÂ_‰ì
(
dev
, 
öç
, 
ï
);

569  
USB_RET_BABBLE
;

571 
	`usb_∑ckë_c›y
(
p
, 
öç
->
d©a
, 
Àn
);

572 
	`buÂ_‰ì
(
dev
, 
öç
, 
ï
);

573  
Àn
;

576 
AsyncURB
 *
aurb
 = 
	`async_Æloc
(
dev
, 
p
);

577 
usb_ªdú_öãºu±_∑ckë_hódî
 
öãºu±_∑ckë
;

578 
uöt8_t
 
buf
[
p
->
iov
.
size
];

580 
	`DPRINTF
("öãºu±-ouàï %02XÜí %zd id %u\n", 
ï
, 
p
->
iov
.
size
,

581 
aurb
->
∑ckë_id
);

583 
öãºu±_∑ckë
.
ídpoöt
 = 
ï
;

584 
öãºu±_∑ckë
.
Àngth
 = 
p
->
iov
.
size
;

585 
aurb
->
öãºu±_∑ckë
 = interrupt_packet;

587 
	`usb_∑ckë_c›y
(
p
, 
buf
,Ö->
iov
.
size
);

588 
	`usbªdú_log_d©a
(
dev
, "öãºu± d©®out:", 
buf
, 
p
->
iov
.
size
);

589 
	`usbªdú∑r£r_£nd_öãºu±_∑ckë
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
,

590 &
öãºu±_∑ckë
, 
buf
, 
p
->
iov
.
size
);

591 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

592  
USB_RET_ASYNC
;

594 
	}
}

596 
	$usbªdú_°›_öãºu±_ª˚ivög
(
USBRedúDevi˚
 *
dev
,

597 
uöt8_t
 
ï
)

599 
usb_ªdú_°›_öãºu±_ª˚ivög_hódî
 
°›_öãºu±_ªcv
 = {

600 .
ídpoöt
 = 
ï


602 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_°¨ãd
) {

603 
	`usbªdú∑r£r_£nd_°›_öãºu±_ª˚ivög
(
dev
->
∑r£r
, 0,

604 &
°›_öãºu±_ªcv
);

605 
	`DPRINTF
("öãºu±Ñecv st›≥dÉ∞%02X\n", 
ï
);

606 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_°¨ãd
 = 0;

608 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_îr‹
 = 0;

609 
	`usbªdú_‰ì_buÂq
(
dev
, 
ï
);

610 
	}
}

612 
	$usbªdú_h™dÀ_d©a
(
USBDevi˚
 *
udev
, 
USBPackë
 *
p
)

614 
USBRedúDevi˚
 *
dev
 = 
	`DO_UPCAST
(USBRedúDevi˚, dev, 
udev
);

615 
uöt8_t
 
ï
;

617 
ï
 = 
p
->ï->
ƒ
;

618 i‡(
p
->
pid
 =
USB_TOKEN_IN
) {

619 
ï
 |
USB_DIR_IN
;

622 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
ty≥
) {

623 
USB_ENDPOINT_XFER_CONTROL
:

624 
	`ERROR
("h™dÀ_d©®ˇŒed f‹ c⁄åﬁÅøns„∏⁄É∞%02X\n", 
ï
);

625  
USB_RET_NAK
;

626 
USB_ENDPOINT_XFER_ISOC
:

627  
	`usbªdú_h™dÀ_iso_d©a
(
dev
, 
p
, 
ï
);

628 
USB_ENDPOINT_XFER_BULK
:

629  
	`usbªdú_h™dÀ_bulk_d©a
(
dev
, 
p
, 
ï
);

630 
USB_ENDPOINT_XFER_INT
:

631  
	`usbªdú_h™dÀ_öãºu±_d©a
(
dev
, 
p
, 
ï
);

633 
	`ERROR
("h™dÀ_d©®ï %02X ha†unknow¿ty≥ %d\n", 
ï
,

634 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
ty≥
);

635  
USB_RET_NAK
;

637 
	}
}

639 
	$usbªdú_£t_c⁄fig
(
USBRedúDevi˚
 *
dev
, 
USBPackë
 *
p
,

640 
c⁄fig
)

642 
usb_ªdú_£t_c⁄figuøti⁄_hódî
 
£t_c⁄fig
;

643 
AsyncURB
 *
aurb
 = 
	`async_Æloc
(
dev
, 
p
);

644 
i
;

646 
	`DPRINTF
("£àc⁄fig %d id %u\n", 
c⁄fig
, 
aurb
->
∑ckë_id
);

648 
i
 = 0; i < 
MAX_ENDPOINTS
; i++) {

649 
dev
->
ídpoöt
[
i
].
ty≥
) {

650 
USB_ENDPOINT_XFER_ISOC
:

651 
	`usbªdú_°›_iso_°ªam
(
dev
, 
	`I2EP
(
i
));

653 
USB_ENDPOINT_XFER_INT
:

654 i‡(
i
 & 0x10) {

655 
	`usbªdú_°›_öãºu±_ª˚ivög
(
dev
, 
	`I2EP
(
i
));

659 
	`usbªdú_‰ì_buÂq
(
dev
, 
	`I2EP
(
i
));

662 
£t_c⁄fig
.
c⁄figuøti⁄
 = 
c⁄fig
;

663 
	`usbªdú∑r£r_£nd_£t_c⁄figuøti⁄
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
,

664 &
£t_c⁄fig
);

665 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

666  
USB_RET_ASYNC
;

667 
	}
}

669 
	$usbªdú_gë_c⁄fig
(
USBRedúDevi˚
 *
dev
, 
USBPackë
 *
p
)

671 
AsyncURB
 *
aurb
 = 
	`async_Æloc
(
dev
, 
p
);

673 
	`DPRINTF
("gë c⁄fig id %u\n", 
aurb
->
∑ckë_id
);

675 
aurb
->
gë
 = 1;

676 
	`usbªdú∑r£r_£nd_gë_c⁄figuøti⁄
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
);

677 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

678  
USB_RET_ASYNC
;

679 
	}
}

681 
	$usbªdú_£t_öãrÁ˚
(
USBRedúDevi˚
 *
dev
, 
USBPackë
 *
p
,

682 
öãrÁ˚
, 
Æt
)

684 
usb_ªdú_£t_Æt_£âög_hódî
 
£t_Æt
;

685 
AsyncURB
 *
aurb
 = 
	`async_Æloc
(
dev
, 
p
);

686 
i
;

688 
	`DPRINTF
("£àöãrÁ˚ %dá… %d id %u\n", 
öãrÁ˚
, 
Æt
,

689 
aurb
->
∑ckë_id
);

691 
i
 = 0; i < 
MAX_ENDPOINTS
; i++) {

692 i‡(
dev
->
ídpoöt
[
i
].
öãrÁ˚
 == interface) {

693 
dev
->
ídpoöt
[
i
].
ty≥
) {

694 
USB_ENDPOINT_XFER_ISOC
:

695 
	`usbªdú_°›_iso_°ªam
(
dev
, 
	`I2EP
(
i
));

697 
USB_ENDPOINT_XFER_INT
:

698 i‡(
i
 & 0x10) {

699 
	`usbªdú_°›_öãºu±_ª˚ivög
(
dev
, 
	`I2EP
(
i
));

703 
	`usbªdú_‰ì_buÂq
(
dev
, 
	`I2EP
(
i
));

707 
£t_Æt
.
öãrÁ˚
 = interface;

708 
£t_Æt
.
Æt
 =ált;

709 
	`usbªdú∑r£r_£nd_£t_Æt_£âög
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
,

710 &
£t_Æt
);

711 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

712  
USB_RET_ASYNC
;

713 
	}
}

715 
	$usbªdú_gë_öãrÁ˚
(
USBRedúDevi˚
 *
dev
, 
USBPackë
 *
p
,

716 
öãrÁ˚
)

718 
usb_ªdú_gë_Æt_£âög_hódî
 
gë_Æt
;

719 
AsyncURB
 *
aurb
 = 
	`async_Æloc
(
dev
, 
p
);

721 
	`DPRINTF
("gë i¡îÁ˚ %d id %u\n", 
öãrÁ˚
, 
aurb
->
∑ckë_id
);

723 
gë_Æt
.
öãrÁ˚
 = interface;

724 
aurb
->
gë
 = 1;

725 
	`usbªdú∑r£r_£nd_gë_Æt_£âög
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
,

726 &
gë_Æt
);

727 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

728  
USB_RET_ASYNC
;

729 
	}
}

731 
	$usbªdú_h™dÀ_c⁄åﬁ
(
USBDevi˚
 *
udev
, 
USBPackë
 *
p
,

732 
ªque°
, 
vÆue
, 
ödex
, 
Àngth
, 
uöt8_t
 *
d©a
)

734 
USBRedúDevi˚
 *
dev
 = 
	`DO_UPCAST
(USBRedúDevi˚, dev, 
udev
);

735 
usb_ªdú_c⁄åﬁ_∑ckë_hódî
 
c⁄åﬁ_∑ckë
;

736 
AsyncURB
 *
aurb
;

739 
ªque°
) {

740 
Devi˚OutReque°
 | 
USB_REQ_SET_ADDRESS
:

741 
	`DPRINTF
("£àaddªs†%d\n", 
vÆue
);

742 
dev
->dev.
addr
 = 
vÆue
;

744 
Devi˚OutReque°
 | 
USB_REQ_SET_CONFIGURATION
:

745  
	`usbªdú_£t_c⁄fig
(
dev
, 
p
, 
vÆue
 & 0xff);

746 
Devi˚Reque°
 | 
USB_REQ_GET_CONFIGURATION
:

747  
	`usbªdú_gë_c⁄fig
(
dev
, 
p
);

748 
I¡îÁ˚OutReque°
 | 
USB_REQ_SET_INTERFACE
:

749  
	`usbªdú_£t_öãrÁ˚
(
dev
, 
p
, 
ödex
, 
vÆue
);

750 
I¡îÁ˚Reque°
 | 
USB_REQ_GET_INTERFACE
:

751  
	`usbªdú_gë_öãrÁ˚
(
dev
, 
p
, 
ödex
);

755 
aurb
 = 
	`async_Æloc
(
dev
, 
p
);

758 
	`DPRINTF
("ctrl-outÅype 0x%xÑeq 0x%x val 0x%x index %dÜen %d id %u\n",

759 
ªque°
 >> 8,Ñeque° & 0xff, 
vÆue
, 
ödex
, 
Àngth
,

760 
aurb
->
∑ckë_id
);

762 
c⁄åﬁ_∑ckë
.
ªque°
 =Ñequest & 0xFF;

763 
c⁄åﬁ_∑ckë
.
ªque°ty≥
 = 
ªque°
 >> 8;

764 
c⁄åﬁ_∑ckë
.
ídpoöt
 = c⁄åﬁ_∑ckë.
ªque°ty≥
 & 
USB_DIR_IN
;

765 
c⁄åﬁ_∑ckë
.
vÆue
 = value;

766 
c⁄åﬁ_∑ckë
.
ödex
 = index;

767 
c⁄åﬁ_∑ckë
.
Àngth
 =Üength;

768 
aurb
->
c⁄åﬁ_∑ckë
 = control_packet;

770 i‡(
c⁄åﬁ_∑ckë
.
ªque°ty≥
 & 
USB_DIR_IN
) {

771 
	`usbªdú∑r£r_£nd_c⁄åﬁ_∑ckë
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
,

772 &
c⁄åﬁ_∑ckë
, 
NULL
, 0);

774 
	`usbªdú_log_d©a
(
dev
, "˘æ d©®out:", 
d©a
, 
Àngth
);

775 
	`usbªdú∑r£r_£nd_c⁄åﬁ_∑ckë
(
dev
->
∑r£r
, 
aurb
->
∑ckë_id
,

776 &
c⁄åﬁ_∑ckë
, 
d©a
, 
Àngth
);

778 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

779  
USB_RET_ASYNC
;

780 
	}
}

791 
	$usbªdú_›í_˛o£_bh
(*
›aque
)

793 
USBRedúDevi˚
 *
dev
 = 
›aque
;

794 
uöt32_t
 
ˇps
[
USB_REDIR_CAPS_SIZE
] = { 0, };

795 
vîsi⁄
[32];

797 
	`°r˝y
(
vîsi⁄
, "qemu usb-redir guest ");

798 
	`p°rˇt
(
vîsi⁄
, (vîsi⁄), 
	`qemu_gë_vîsi⁄
());

800 
	`usbªdú_devi˚_disc⁄√˘
(
dev
);

802 i‡(
dev
->
∑r£r
) {

803 
	`usbªdú∑r£r_de°roy
(
dev
->
∑r£r
);

804 
dev
->
∑r£r
 = 
NULL
;

807 i‡(
dev
->
cs
->
›íed
) {

808 
dev
->
∑r£r
 = 
	`qemu_oom_check
(
	`usbªdú∑r£r_¸óã
());

809 
dev
->
∑r£r
->
¥iv
 = dev;

810 
dev
->
∑r£r
->
log_func
 = 
usbªdú_log
;

811 
dev
->
∑r£r
->
ªad_func
 = 
usbªdú_ªad
;

812 
dev
->
∑r£r
->
wrôe_func
 = 
usbªdú_wrôe
;

813 
dev
->
∑r£r
->
hñlo_func
 = 
usbªdú_hñlo
;

814 
dev
->
∑r£r
->
devi˚_c⁄√˘_func
 = 
usbªdú_devi˚_c⁄√˘
;

815 
dev
->
∑r£r
->
devi˚_disc⁄√˘_func
 = 
usbªdú_devi˚_disc⁄√˘
;

816 
dev
->
∑r£r
->
öãrÁ˚_öfo_func
 = 
usbªdú_öãrÁ˚_öfo
;

817 
dev
->
∑r£r
->
ï_öfo_func
 = 
usbªdú_ï_öfo
;

818 
dev
->
∑r£r
->
c⁄figuøti⁄_°©us_func
 = 
usbªdú_c⁄figuøti⁄_°©us
;

819 
dev
->
∑r£r
->
Æt_£âög_°©us_func
 = 
usbªdú_Æt_£âög_°©us
;

820 
dev
->
∑r£r
->
iso_°ªam_°©us_func
 = 
usbªdú_iso_°ªam_°©us
;

821 
dev
->
∑r£r
->
öãºu±_ª˚ivög_°©us_func
 =

822 
usbªdú_öãºu±_ª˚ivög_°©us
;

823 
dev
->
∑r£r
->
bulk_°ªams_°©us_func
 = 
usbªdú_bulk_°ªams_°©us
;

824 
dev
->
∑r£r
->
c⁄åﬁ_∑ckë_func
 = 
usbªdú_c⁄åﬁ_∑ckë
;

825 
dev
->
∑r£r
->
bulk_∑ckë_func
 = 
usbªdú_bulk_∑ckë
;

826 
dev
->
∑r£r
->
iso_∑ckë_func
 = 
usbªdú_iso_∑ckë
;

827 
dev
->
∑r£r
->
öãºu±_∑ckë_func
 = 
usbªdú_öãºu±_∑ckë
;

828 
dev
->
ªad_buf
 = 
NULL
;

829 
dev
->
ªad_buf_size
 = 0;

831 
	`usbªdú∑r£r_ˇps_£t_ˇp
(
ˇps
, 
usb_ªdú_ˇp_c⁄√˘_devi˚_vîsi⁄
);

832 
	`usbªdú∑r£r_ˇps_£t_ˇp
(
ˇps
, 
usb_ªdú_ˇp_fûãr
);

833 
	`usbªdú∑r£r_öô
(
dev
->
∑r£r
, 
vîsi⁄
, 
ˇps
, 
USB_REDIR_CAPS_SIZE
, 0);

834 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

836 
	}
}

838 
	$usbªdú_do_©èch
(*
›aque
)

840 
USBRedúDevi˚
 *
dev
 = 
›aque
;

842 i‡(
	`usb_devi˚_©èch
(&
dev
->dev) != 0) {

843 
	`usbªdú_devi˚_disc⁄√˘
(
dev
);

844 i‡(
	`usbªdú∑r£r_≥î_has_ˇp
(
dev
->
∑r£r
, 
usb_ªdú_ˇp_fûãr
)) {

845 
	`usbªdú∑r£r_£nd_fûãr_ªje˘
(
dev
->
∑r£r
);

846 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

849 
	}
}

855 
	$usbªdú_ch¨dev_ˇn_ªad
(*
›aque
)

857 
USBRedúDevi˚
 *
dev
 = 
›aque
;

859 i‡(
dev
->
∑r£r
) {

866 
	}
}

868 
	$usbªdú_ch¨dev_ªad
(*
›aque
, c⁄° 
uöt8_t
 *
buf
, 
size
)

870 
USBRedúDevi˚
 *
dev
 = 
›aque
;

873 
	`as£π
(
dev
->
ªad_buf
 =
NULL
);

875 
dev
->
ªad_buf
 = 
buf
;

876 
dev
->
ªad_buf_size
 = 
size
;

878 
	`usbªdú∑r£r_do_ªad
(
dev
->
∑r£r
);

880 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

881 
	}
}

883 
	$usbªdú_ch¨dev_evít
(*
›aque
, 
evít
)

885 
USBRedúDevi˚
 *
dev
 = 
›aque
;

887 
evít
) {

888 
CHR_EVENT_OPENED
:

889 
CHR_EVENT_CLOSED
:

890 
	`qemu_bh_scheduÀ
(
dev
->
›í_˛o£_bh
);

893 
	}
}

899 
	$usbªdú_öô‚
(
USBDevi˚
 *
udev
)

901 
USBRedúDevi˚
 *
dev
 = 
	`DO_UPCAST
(USBRedúDevi˚, dev, 
udev
);

902 
i
;

904 i‡(
dev
->
cs
 =
NULL
) {

905 
	`qîr‹_ªp‹t
(
QERR_MISSING_PARAMETER
, "chardev");

909 i‡(
dev
->
fûãr_°r
) {

910 
i
 = 
	`usbªdúfûãr_°rög_to_ruÀs
(
dev
->
fûãr_°r
, ":", "|",

911 &
dev
->
fûãr_ruÀs
,

912 &
dev
->
fûãr_ruÀs_cou¡
);

913 i‡(
i
) {

914 
	`qîr‹_ªp‹t
(
QERR_INVALID_PARAMETER_VALUE
, "filter",

920 
dev
->
›í_˛o£_bh
 = 
	`qemu_bh_√w
(
usbªdú_›í_˛o£_bh
, dev);

921 
dev
->
©èch_timî
 = 
	`qemu_√w_timî_ms
(
vm_˛ock
, 
usbªdú_do_©èch
, dev);

923 
	`QTAILQ_INIT
(&
dev
->
asyncq
);

924 
i
 = 0; i < 
MAX_ENDPOINTS
; i++) {

925 
	`QTAILQ_INIT
(&
dev
->
ídpoöt
[
i
].
buÂq
);

929 
udev
->
auto_©èch
 = 0;

932 
	`qemu_chr_„_›í
(
dev
->
cs
);

933 
	`qemu_chr_add_h™dÀrs
(
dev
->
cs
, 
usbªdú_ch¨dev_ˇn_ªad
,

934 
usbªdú_ch¨dev_ªad
, 
usbªdú_ch¨dev_evít
, 
dev
);

936 
	`add_boŸ_devi˚_∑th
(
dev
->
boŸödex
, &
udev
->
qdev
, 
NULL
);

938 
	}
}

940 
	$usbªdú_˛ónup_devi˚_queues
(
USBRedúDevi˚
 *
dev
)

942 
AsyncURB
 *
aurb
, *
√xt_aurb
;

943 
i
;

945 
	`QTAILQ_FOREACH_SAFE
(
aurb
, &
dev
->
asyncq
, 
√xt
, 
√xt_aurb
) {

946 
	`async_‰ì
(
dev
, 
aurb
);

948 
i
 = 0; i < 
MAX_ENDPOINTS
; i++) {

949 
	`usbªdú_‰ì_buÂq
(
dev
, 
	`I2EP
(
i
));

951 
	}
}

953 
	$usbªdú_h™dÀ_de°roy
(
USBDevi˚
 *
udev
)

955 
USBRedúDevi˚
 *
dev
 = 
	`DO_UPCAST
(USBRedúDevi˚, dev, 
udev
);

957 
	`qemu_chr_„_˛o£
(
dev
->
cs
);

958 
	`qemu_chr_dñëe
(
dev
->
cs
);

960 
	`qemu_bh_dñëe
(
dev
->
›í_˛o£_bh
);

962 
	`qemu_dñ_timî
(
dev
->
©èch_timî
);

963 
	`qemu_‰ì_timî
(
dev
->
©èch_timî
);

965 
	`usbªdú_˛ónup_devi˚_queues
(
dev
);

967 i‡(
dev
->
∑r£r
) {

968 
	`usbªdú∑r£r_de°roy
(
dev
->
∑r£r
);

971 
	`‰ì
(
dev
->
fûãr_ruÀs
);

972 
	}
}

974 
	$usbªdú_check_fûãr
(
USBRedúDevi˚
 *
dev
)

976 i‡(
dev
->
öãrÁ˚_öfo
.
öãrÁ˚_cou¡
 =
NO_INTERFACE_INFO
) {

977 
	`ERROR
("No interface info for device\n");

978 
îr‹
;

981 i‡(
dev
->
fûãr_ruÀs
) {

982 i‡(!
	`usbªdú∑r£r_≥î_has_ˇp
(
dev
->
∑r£r
,

983 
usb_ªdú_ˇp_c⁄√˘_devi˚_vîsi⁄
)) {

984 
	`ERROR
("Device filter specifiedándÖeer doesÇot haveÅhe "

986 
îr‹
;

989 i‡(
	`usbªdúfûãr_check
(

990 
dev
->
fûãr_ruÀs
,

991 
dev
->
fûãr_ruÀs_cou¡
,

992 
dev
->
devi˚_öfo
.
devi˚_˛ass
,

993 
dev
->
devi˚_öfo
.
devi˚_sub˛ass
,

994 
dev
->
devi˚_öfo
.
devi˚_¥Ÿocﬁ
,

995 
dev
->
öãrÁ˚_öfo
.
öãrÁ˚_˛ass
,

996 
dev
->
öãrÁ˚_öfo
.
öãrÁ˚_sub˛ass
,

997 
dev
->
öãrÁ˚_öfo
.
öãrÁ˚_¥Ÿocﬁ
,

998 
dev
->
öãrÁ˚_öfo
.
öãrÁ˚_cou¡
,

999 
dev
->
devi˚_öfo
.
víd‹_id
,

1000 
dev
->
devi˚_öfo
.
¥odu˘_id
,

1001 
dev
->
devi˚_öfo
.
devi˚_vîsi⁄_bcd
,

1003 
îr‹
;

1009 
îr‹
:

1010 
	`usbªdú_devi˚_disc⁄√˘
(
dev
);

1011 i‡(
	`usbªdú∑r£r_≥î_has_ˇp
(
dev
->
∑r£r
, 
usb_ªdú_ˇp_fûãr
)) {

1012 
	`usbªdú∑r£r_£nd_fûãr_ªje˘
(
dev
->
∑r£r
);

1013 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

1016 
	}
}

1022 
	$usbªdú_h™dÀ_°©us
(
USBRedúDevi˚
 *
dev
,

1023 
°©us
, 
a˘uÆ_Àn
)

1025 
°©us
) {

1026 
usb_ªdú_suc˚ss
:

1027  
a˘uÆ_Àn
;

1028 
usb_ªdú_°Æl
:

1029  
USB_RET_STALL
;

1030 
usb_ªdú_ˇn˚Œed
:

1031 
	`WARNING
("returning cancelledÖacketÅo HC?\n");

1032  
USB_RET_NAK
;

1033 
usb_ªdú_övÆ
:

1034 
	`WARNING
("got invalidÖaramÉrror from usb-host?\n");

1035  
USB_RET_NAK
;

1036 
usb_ªdú_babbÀ
:

1037  
USB_RET_BABBLE
;

1038 
usb_ªdú_i€º‹
:

1039 
usb_ªdú_timeout
:

1041  
USB_RET_IOERROR
;

1043 
	}
}

1045 
	$usbªdú_hñlo
(*
¥iv
, 
usb_ªdú_hñlo_hódî
 *
h
)

1047 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1050 i‡(
	`usbªdú∑r£r_≥î_has_ˇp
(
dev
->
∑r£r
, 
usb_ªdú_ˇp_fûãr
) &&

1051 
dev
->
fûãr_ruÀs
) {

1052 
	`usbªdú∑r£r_£nd_fûãr_fûãr
(
dev
->
∑r£r
, dev->
fûãr_ruÀs
,

1053 
dev
->
fûãr_ruÀs_cou¡
);

1054 
	`usbªdú∑r£r_do_wrôe
(
dev
->
∑r£r
);

1056 
	}
}

1058 
	$usbªdú_devi˚_c⁄√˘
(*
¥iv
,

1059 
usb_ªdú_devi˚_c⁄√˘_hódî
 *
devi˚_c⁄√˘
)

1061 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1062 c⁄° *
•ìd
;

1064 i‡(
	`qemu_timî_≥ndög
(
dev
->
©èch_timî
Ë|| dev->dev.
©èched
) {

1065 
	`ERROR
("Received device connect whileálready connected\n");

1069 
devi˚_c⁄√˘
->
•ìd
) {

1070 
usb_ªdú_•ìd_low
:

1071 
•ìd
 = "low speed";

1072 
dev
->dev.
•ìd
 = 
USB_SPEED_LOW
;

1074 
usb_ªdú_•ìd_fuŒ
:

1075 
•ìd
 = "full speed";

1076 
dev
->dev.
•ìd
 = 
USB_SPEED_FULL
;

1078 
usb_ªdú_•ìd_high
:

1079 
•ìd
 = "high speed";

1080 
dev
->dev.
•ìd
 = 
USB_SPEED_HIGH
;

1082 
usb_ªdú_•ìd_su≥r
:

1083 
•ìd
 = "super speed";

1084 
dev
->dev.
•ìd
 = 
USB_SPEED_SUPER
;

1087 
•ìd
 = "unknown speed";

1088 
dev
->dev.
•ìd
 = 
USB_SPEED_FULL
;

1091 i‡(
	`usbªdú∑r£r_≥î_has_ˇp
(
dev
->
∑r£r
,

1092 
usb_ªdú_ˇp_c⁄√˘_devi˚_vîsi⁄
)) {

1093 
	`INFO
("attaching %s device %04x:%04x version %d.%d class %02x\n",

1094 
•ìd
, 
devi˚_c⁄√˘
->
víd‹_id
, devi˚_c⁄√˘->
¥odu˘_id
,

1095 ((
devi˚_c⁄√˘
->
devi˚_vîsi⁄_bcd
 & 0xf000) >> 12) * 10 +

1096 ((
devi˚_c⁄√˘
->
devi˚_vîsi⁄_bcd
 & 0x0f00) >> 8),

1097 ((
devi˚_c⁄√˘
->
devi˚_vîsi⁄_bcd
 & 0x00f0) >> 4) * 10 +

1098 ((
devi˚_c⁄√˘
->
devi˚_vîsi⁄_bcd
 & 0x000f) >> 0),

1099 
devi˚_c⁄√˘
->
devi˚_˛ass
);

1101 
	`INFO
("©èchög %†devi˚ %04x:%04x cœs†%02x\n", 
•ìd
,

1102 
devi˚_c⁄√˘
->
víd‹_id
, devi˚_c⁄√˘->
¥odu˘_id
,

1103 
devi˚_c⁄√˘
->
devi˚_˛ass
);

1106 
dev
->dev.
•ìdmask
 = (1 << dev->dev.
•ìd
);

1107 
dev
->
devi˚_öfo
 = *
devi˚_c⁄√˘
;

1109 i‡(
	`usbªdú_check_fûãr
(
dev
)) {

1110 
	`WARNING
("Device %04x:%04xÑejected by device filter,Çotáttaching\n",

1111 
devi˚_c⁄√˘
->
víd‹_id
, devi˚_c⁄√˘->
¥odu˘_id
);

1115 
	`qemu_mod_timî
(
dev
->
©èch_timî
, dev->
√xt_©èch_time
);

1116 
	}
}

1118 
	$usbªdú_devi˚_disc⁄√˘
(*
¥iv
)

1120 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1121 
i
;

1124 
	`qemu_dñ_timî
(
dev
->
©èch_timî
);

1126 i‡(
dev
->dev.
©èched
) {

1127 
	`usb_devi˚_dëach
(&
dev
->dev);

1132 
dev
->
√xt_©èch_time
 = 
	`qemu_gë_˛ock_ms
(
vm_˛ock
) + 200;

1136 
	`usbªdú_˛ónup_devi˚_queues
(
dev
);

1137 
	`mem£t
(
dev
->
ídpoöt
, 0, (dev->endpoint));

1138 
i
 = 0; i < 
MAX_ENDPOINTS
; i++) {

1139 
	`QTAILQ_INIT
(&
dev
->
ídpoöt
[
i
].
buÂq
);

1141 
	`usb_ï_öô
(&
dev
->dev);

1142 
dev
->
öãrÁ˚_öfo
.
öãrÁ˚_cou¡
 = 
NO_INTERFACE_INFO
;

1143 
dev
->dev.
addr
 = 0;

1144 
dev
->dev.
•ìd
 = 0;

1145 
	}
}

1147 
	$usbªdú_öãrÁ˚_öfo
(*
¥iv
,

1148 
usb_ªdú_öãrÁ˚_öfo_hódî
 *
öãrÁ˚_öfo
)

1150 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1152 
dev
->
öãrÁ˚_öfo
 = *interface_info;

1158 i‡(
	`qemu_timî_≥ndög
(
dev
->
©èch_timî
Ë|| dev->dev.
©èched
) {

1159 i‡(
	`usbªdú_check_fûãr
(
dev
)) {

1160 
	`ERROR
("DeviceÇoÜonger matches filteráfter interface info "

1164 
	}
}

1166 
	$usbªdú_ï_öfo
(*
¥iv
,

1167 
usb_ªdú_ï_öfo_hódî
 *
ï_öfo
)

1169 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1170 
USBEndpoöt
 *
usb_ï
;

1171 
i
;

1173 
i
 = 0; i < 
MAX_ENDPOINTS
; i++) {

1174 
dev
->
ídpoöt
[
i
].
ty≥
 = 
ï_öfo
->type[i];

1175 
dev
->
ídpoöt
[
i
].
öãrvÆ
 = 
ï_öfo
->interval[i];

1176 
dev
->
ídpoöt
[
i
].
öãrÁ˚
 = 
ï_öfo
->interface[i];

1177 
dev
->
ídpoöt
[
i
].
ty≥
) {

1178 
usb_ªdú_ty≥_övÆid
:

1180 
usb_ªdú_ty≥_iso
:

1181 
usb_ªdú_ty≥_öãºu±
:

1182 i‡(
dev
->
ídpoöt
[
i
].
öãrvÆ
 == 0) {

1183 
	`ERROR
("Received 0 interval for isoc or irqÉndpoint\n");

1184 
	`usbªdú_devi˚_disc⁄√˘
(
dev
);

1187 
usb_ªdú_ty≥_c⁄åﬁ
:

1188 
usb_ªdú_ty≥_bulk
:

1189 
	`DPRINTF
("ï: %02XÅy≥: %d i¡îÁ˚: %d\n", 
	`I2EP
(
i
),

1190 
dev
->
ídpoöt
[
i
].
ty≥
, dev->ídpoöt[i].
öãrÁ˚
);

1193 
	`ERROR
("Received invalidÉndpointÅype\n");

1194 
	`usbªdú_devi˚_disc⁄√˘
(
dev
);

1197 
usb_ï
 = 
	`usb_ï_gë
(&
dev
->dev,

1198 (
i
 & 0x10Ë? 
USB_TOKEN_IN
 : 
USB_TOKEN_OUT
,

1199 
i
 & 0x0f);

1200 
usb_ï
->
ty≥
 = 
dev
->
ídpoöt
[
i
].type;

1201 
usb_ï
->
i‚um
 = 
dev
->
ídpoöt
[
i
].
öãrÁ˚
;

1203 
	}
}

1205 
	$usbªdú_c⁄figuøti⁄_°©us
(*
¥iv
, 
uöt32_t
 
id
,

1206 
usb_ªdú_c⁄figuøti⁄_°©us_hódî
 *
c⁄fig_°©us
)

1208 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1209 
AsyncURB
 *
aurb
;

1210 
Àn
 = 0;

1212 
	`DPRINTF
("£àc⁄fig sètu†%d c⁄fig %d id %u\n", 
c⁄fig_°©us
->
°©us
,

1213 
c⁄fig_°©us
->
c⁄figuøti⁄
, 
id
);

1215 
aurb
 = 
	`async_föd
(
dev
, 
id
);

1216 i‡(!
aurb
) {

1219 i‡(
aurb
->
∑ckë
) {

1220 i‡(
aurb
->
gë
) {

1221 
dev
->dev.
d©a_buf
[0] = 
c⁄fig_°©us
->
c⁄figuøti⁄
;

1222 
Àn
 = 1;

1224 
aurb
->
∑ckë
->
ªsu…
 =

1225 
	`usbªdú_h™dÀ_°©us
(
dev
, 
c⁄fig_°©us
->
°©us
, 
Àn
);

1226 
	`usb_gíîic_async_˘æ_com∂ëe
(&
dev
->dev, 
aurb
->
∑ckë
);

1228 
	`async_‰ì
(
dev
, 
aurb
);

1229 
	}
}

1231 
	$usbªdú_Æt_£âög_°©us
(*
¥iv
, 
uöt32_t
 
id
,

1232 
usb_ªdú_Æt_£âög_°©us_hódî
 *
Æt_£âög_°©us
)

1234 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1235 
AsyncURB
 *
aurb
;

1236 
Àn
 = 0;

1238 
	`DPRINTF
("alt status %d intf %dált %d id: %u\n",

1239 
Æt_£âög_°©us
->
°©us
,

1240 
Æt_£âög_°©us
->
öãrÁ˚
,

1241 
Æt_£âög_°©us
->
Æt
, 
id
);

1243 
aurb
 = 
	`async_föd
(
dev
, 
id
);

1244 i‡(!
aurb
) {

1247 i‡(
aurb
->
∑ckë
) {

1248 i‡(
aurb
->
gë
) {

1249 
dev
->dev.
d©a_buf
[0] = 
Æt_£âög_°©us
->
Æt
;

1250 
Àn
 = 1;

1252 
aurb
->
∑ckë
->
ªsu…
 =

1253 
	`usbªdú_h™dÀ_°©us
(
dev
, 
Æt_£âög_°©us
->
°©us
, 
Àn
);

1254 
	`usb_gíîic_async_˘æ_com∂ëe
(&
dev
->dev, 
aurb
->
∑ckë
);

1256 
	`async_‰ì
(
dev
, 
aurb
);

1257 
	}
}

1259 
	$usbªdú_iso_°ªam_°©us
(*
¥iv
, 
uöt32_t
 
id
,

1260 
usb_ªdú_iso_°ªam_°©us_hódî
 *
iso_°ªam_°©us
)

1262 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1263 
uöt8_t
 
ï
 = 
iso_°ªam_°©us
->
ídpoöt
;

1265 
	`DPRINTF
("isÿ°©u†%dÉ∞%02X id %u\n", 
iso_°ªam_°©us
->
°©us
,

1266 
ï
, 
id
);

1268 i‡(!
dev
->dev.
©èched
 || !dev->
ídpoöt
[
	`EP2I
(
ï
)].
iso_°¨ãd
) {

1272 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_îr‹
 = 
iso_°ªam_°©us
->
°©us
;

1273 i‡(
iso_°ªam_°©us
->
°©us
 =
usb_ªdú_°Æl
) {

1274 
	`DPRINTF
("isÿ°ªam st›≥d byÖì∏ï %02X\n", 
ï
);

1275 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_°¨ãd
 = 0;

1277 
	}
}

1279 
	$usbªdú_öãºu±_ª˚ivög_°©us
(*
¥iv
, 
uöt32_t
 
id
,

1280 
usb_ªdú_öãºu±_ª˚ivög_°©us_hódî


1281 *
öãºu±_ª˚ivög_°©us
)

1283 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1284 
uöt8_t
 
ï
 = 
öãºu±_ª˚ivög_°©us
->
ídpoöt
;

1286 
	`DPRINTF
("interruptÑecv status %dÉp %02X id %u\n",

1287 
öãºu±_ª˚ivög_°©us
->
°©us
, 
ï
, 
id
);

1289 i‡(!
dev
->dev.
©èched
 || !dev->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_°¨ãd
) {

1293 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_îr‹
 =

1294 
öãºu±_ª˚ivög_°©us
->
°©us
;

1295 i‡(
öãºu±_ª˚ivög_°©us
->
°©us
 =
usb_ªdú_°Æl
) {

1296 
	`DPRINTF
("öãºu±Ñe˚ivög st›≥d byÖì∏ï %02X\n", 
ï
);

1297 
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_°¨ãd
 = 0;

1299 
	}
}

1301 
	$usbªdú_bulk_°ªams_°©us
(*
¥iv
, 
uöt32_t
 
id
,

1302 
usb_ªdú_bulk_°ªams_°©us_hódî
 *
bulk_°ªams_°©us
)

1304 
	}
}

1306 
	$usbªdú_c⁄åﬁ_∑ckë
(*
¥iv
, 
uöt32_t
 
id
,

1307 
usb_ªdú_c⁄åﬁ_∑ckë_hódî
 *
c⁄åﬁ_∑ckë
,

1308 
uöt8_t
 *
d©a
, 
d©a_Àn
)

1310 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1311 
Àn
 = 
c⁄åﬁ_∑ckë
->
Àngth
;

1312 
AsyncURB
 *
aurb
;

1314 
	`DPRINTF
("˘æ-ö sètu†%dÜí %d id %u\n", 
c⁄åﬁ_∑ckë
->
°©us
,

1315 
Àn
, 
id
);

1317 
aurb
 = 
	`async_föd
(
dev
, 
id
);

1318 i‡(!
aurb
) {

1319 
	`‰ì
(
d©a
);

1323 
aurb
->
c⁄åﬁ_∑ckë
.
°©us
 = control_packet->status;

1324 
aurb
->
c⁄åﬁ_∑ckë
.
Àngth
 = control_packet->length;

1325 i‡(
	`memcmp
(&
aurb
->
c⁄åﬁ_∑ckë
, control_packet,

1326 (*
c⁄åﬁ_∑ckë
))) {

1327 
	`ERROR
("return controlÖacket mismatch,ÖleaseÑeportÅhis!\n");

1328 
Àn
 = 
USB_RET_NAK
;

1331 i‡(
aurb
->
∑ckë
) {

1332 
Àn
 = 
	`usbªdú_h™dÀ_°©us
(
dev
, 
c⁄åﬁ_∑ckë
->
°©us
,Üen);

1333 i‡(
Àn
 > 0) {

1334 
	`usbªdú_log_d©a
(
dev
, "˘æ d©®ö:", 
d©a
, 
d©a_Àn
);

1335 i‡(
d©a_Àn
 <(
dev
->dev.
d©a_buf
)) {

1336 
	`mem˝y
(
dev
->dev.
d©a_buf
, 
d©a
, 
d©a_Àn
);

1338 
	`ERROR
("ctrl bufferÅoo small (%d > %zu)\n",

1339 
d©a_Àn
, (
dev
->dev.
d©a_buf
));

1340 
Àn
 = 
USB_RET_STALL
;

1343 
aurb
->
∑ckë
->
ªsu…
 = 
Àn
;

1344 
	`usb_gíîic_async_˘æ_com∂ëe
(&
dev
->dev, 
aurb
->
∑ckë
);

1346 
	`async_‰ì
(
dev
, 
aurb
);

1347 
	`‰ì
(
d©a
);

1348 
	}
}

1350 
	$usbªdú_bulk_∑ckë
(*
¥iv
, 
uöt32_t
 
id
,

1351 
usb_ªdú_bulk_∑ckë_hódî
 *
bulk_∑ckë
,

1352 
uöt8_t
 *
d©a
, 
d©a_Àn
)

1354 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1355 
uöt8_t
 
ï
 = 
bulk_∑ckë
->
ídpoöt
;

1356 
Àn
 = 
bulk_∑ckë
->
Àngth
;

1357 
AsyncURB
 *
aurb
;

1359 
	`DPRINTF
("bulk-ö sètu†%dÉ∞%02XÜí %d id %u\n", 
bulk_∑ckë
->
°©us
,

1360 
ï
, 
Àn
, 
id
);

1362 
aurb
 = 
	`async_föd
(
dev
, 
id
);

1363 i‡(!
aurb
) {

1364 
	`‰ì
(
d©a
);

1368 i‡(
aurb
->
bulk_∑ckë
.
ídpoöt
 != bulk_packet->endpoint ||

1369 
aurb
->
bulk_∑ckë
.
°ªam_id
 != bulk_packet->stream_id) {

1370 
	`ERROR
("return bulkÖacket mismatch,ÖleaseÑeportÅhis!\n");

1371 
Àn
 = 
USB_RET_NAK
;

1374 i‡(
aurb
->
∑ckë
) {

1375 
Àn
 = 
	`usbªdú_h™dÀ_°©us
(
dev
, 
bulk_∑ckë
->
°©us
,Üen);

1376 i‡(
Àn
 > 0) {

1377 
	`usbªdú_log_d©a
(
dev
, "bulk d©®ö:", 
d©a
, 
d©a_Àn
);

1378 i‡(
d©a_Àn
 <
aurb
->
∑ckë
->
iov
.
size
) {

1379 
	`usb_∑ckë_c›y
(
aurb
->
∑ckë
, 
d©a
, 
d©a_Àn
);

1381 
	`ERROR
("bulk buf„∏toÿsmÆ»(%d > %zd)\n", 
d©a_Àn
,

1382 
aurb
->
∑ckë
->
iov
.
size
);

1383 
Àn
 = 
USB_RET_STALL
;

1386 
aurb
->
∑ckë
->
ªsu…
 = 
Àn
;

1387 
	`usb_∑ckë_com∂ëe
(&
dev
->dev, 
aurb
->
∑ckë
);

1389 
	`async_‰ì
(
dev
, 
aurb
);

1390 
	`‰ì
(
d©a
);

1391 
	}
}

1393 
	$usbªdú_iso_∑ckë
(*
¥iv
, 
uöt32_t
 
id
,

1394 
usb_ªdú_iso_∑ckë_hódî
 *
iso_∑ckë
,

1395 
uöt8_t
 *
d©a
, 
d©a_Àn
)

1397 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1398 
uöt8_t
 
ï
 = 
iso_∑ckë
->
ídpoöt
;

1400 
	`DPRINTF2
("iso-ö sètu†%dÉ∞%02XÜí %d id %u\n", 
iso_∑ckë
->
°©us
, 
ï
,

1401 
d©a_Àn
, 
id
);

1403 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
ty≥
 !
USB_ENDPOINT_XFER_ISOC
) {

1404 
	`ERROR
("ª˚ived isÿ∑ckë f‹Ç⁄ isÿídpoöà%02X\n", 
ï
);

1405 
	`‰ì
(
d©a
);

1409 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
iso_°¨ãd
 == 0) {

1410 
	`DPRINTF
("ª˚ived isÿ∑ckë f‹Ç⁄ sèπed såómÉ∞%02X\n", 
ï
);

1411 
	`‰ì
(
d©a
);

1416 
	`buÂ_Æloc
(
dev
, 
d©a
, 
d©a_Àn
, 
iso_∑ckë
->
°©us
, 
ï
);

1417 
	}
}

1419 
	$usbªdú_öãºu±_∑ckë
(*
¥iv
, 
uöt32_t
 
id
,

1420 
usb_ªdú_öãºu±_∑ckë_hódî
 *
öãºu±_∑ckë
,

1421 
uöt8_t
 *
d©a
, 
d©a_Àn
)

1423 
USBRedúDevi˚
 *
dev
 = 
¥iv
;

1424 
uöt8_t
 
ï
 = 
öãºu±_∑ckë
->
ídpoöt
;

1426 
	`DPRINTF
("interrupt-in status %dÉp %02XÜen %d id %u\n",

1427 
öãºu±_∑ckë
->
°©us
, 
ï
, 
d©a_Àn
, 
id
);

1429 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
ty≥
 !
USB_ENDPOINT_XFER_INT
) {

1430 
	`ERROR
("ª˚ived i¡Öackë f‹Ç⁄ i¡îru±Éndpoöà%02X\n", 
ï
);

1431 
	`‰ì
(
d©a
);

1435 i‡(
ï
 & 
USB_DIR_IN
) {

1436 i‡(
dev
->
ídpoöt
[
	`EP2I
(
ï
)].
öãºu±_°¨ãd
 == 0) {

1437 
	`DPRINTF
("ª˚ived i¡Öackë whûênŸ sèπedÉ∞%02X\n", 
ï
);

1438 
	`‰ì
(
d©a
);

1443 
	`buÂ_Æloc
(
dev
, 
d©a
, 
d©a_Àn
, 
öãºu±_∑ckë
->
°©us
, 
ï
);

1445 
Àn
 = 
öãºu±_∑ckë
->
Àngth
;

1447 
AsyncURB
 *
aurb
 = 
	`async_föd
(
dev
, 
id
);

1448 i‡(!
aurb
) {

1452 i‡(
aurb
->
öãºu±_∑ckë
.
ídpoöt
 != interrupt_packet->endpoint) {

1453 
	`ERROR
("return intÖacket mismatch,ÖleaseÑeportÅhis!\n");

1454 
Àn
 = 
USB_RET_NAK
;

1457 i‡(
aurb
->
∑ckë
) {

1458 
aurb
->
∑ckë
->
ªsu…
 = 
	`usbªdú_h™dÀ_°©us
(
dev
,

1459 
öãºu±_∑ckë
->
°©us
, 
Àn
);

1460 
	`usb_∑ckë_com∂ëe
(&
dev
->dev, 
aurb
->
∑ckë
);

1462 
	`async_‰ì
(
dev
, 
aurb
);

1464 
	}
}

1466 
Pr›îty
 
	gusbªdú_¥›îtõs
[] = {

1467 
DEFINE_PROP_CHR
("ch¨dev", 
USBRedúDevi˚
, 
cs
),

1468 
DEFINE_PROP_UINT8
("debug", 
USBRedúDevi˚
, 
debug
, 0),

1469 
DEFINE_PROP_STRING
("fûãr", 
USBRedúDevi˚
, 
fûãr_°r
),

1470 
DEFINE_PROP_INT32
("boŸödex", 
USBRedúDevi˚
, 
boŸödex
, -1),

1471 
DEFINE_PROP_END_OF_LIST
(),

1474 
	$usbªdú_˛ass_öô‚
(
Obje˘Cœss
 *
kœss
, *
d©a
)

1476 
USBDevi˚Cœss
 *
uc
 = 
	`USB_DEVICE_CLASS
(
kœss
);

1477 
Devi˚Cœss
 *
dc
 = 
	`DEVICE_CLASS
(
kœss
);

1479 
uc
->
öô
 = 
usbªdú_öô‚
;

1480 
uc
->
¥odu˘_desc
 = "USB Redirection Device";

1481 
uc
->
h™dÀ_de°roy
 = 
usbªdú_h™dÀ_de°roy
;

1482 
uc
->
ˇn˚l_∑ckë
 = 
usbªdú_ˇn˚l_∑ckë
;

1483 
uc
->
h™dÀ_ª£t
 = 
usbªdú_h™dÀ_ª£t
;

1484 
uc
->
h™dÀ_d©a
 = 
usbªdú_h™dÀ_d©a
;

1485 
uc
->
h™dÀ_c⁄åﬁ
 = 
usbªdú_h™dÀ_c⁄åﬁ
;

1486 
dc
->
¥›s
 = 
usbªdú_¥›îtõs
;

1487 
	}
}

1489 
Ty≥Info
 
	gusbªdú_dev_öfo
 = {

1490 .
«me
 = "usb-redir",

1491 .
	g∑ª¡
 = 
TYPE_USB_DEVICE
,

1492 .
	gö°™˚_size
 = (
USBRedúDevi˚
),

1493 .
	g˛ass_öô
 = 
usbªdú_˛ass_öô‚
,

1496 
	$usbªdú_ªgi°î_ty≥s
()

1498 
	`ty≥_ªgi°î_°©ic
(&
usbªdú_dev_öfo
);

1499 
	}
}

1501 
ty≥_öô
(
usbªdú_ªgi°î_ty≥s
)

	@/usr/include/audio/audio.h

33 #i‚de‡
_NCD_AUDIO_H_


34 
	#_NCD_AUDIO_H_


	)

36 
	~<audio/Amd.h
>

46 
INT32
 
	tAuI¡32
;

47 
CARD32
 
	tAuUöt32
;

48 
INT16
 
	tAuI¡16
;

49 
CARD16
 
	tAuUöt16
;

50 
INT8
 
	tAuI¡8
;

51 
CARD8
 
	tAuUöt8
;

53 
AuUöt32
 
	tAuID
;

54 
AuID
 
	tAuDevi˚ID
;

55 
AuID
 
	tAuBuckëID
;

56 
AuID
 
	tAuRadioID
;

57 
AuID
 
	tAuFlowID
;

59 
AuUöt32
 
	tAuTime
;

60 
AuUöt32
 
	tAuMask
;

61 
	tAuBoﬁ
;

62 
	tAuSètus
;

63 
AuI¡32
 
	tAuFixedPoöt
;

65 
	#AU_FIXED_POINT_SHIFT
 (16)

	)

66 
	#AU_FIXED_POINT_SCALE
 (1L << 16)

	)

67 
	#AU_FIXED_POINT_MASK
 (0xffff)

	)

103 
	#AuFixedPoötFromSum
(
a
,
b
) \

104 ((
AuI¡32
Ë(((AuI¡32Ë(
a
Ë<< 
AU_FIXED_POINT_SHIFT
Ë+ ((AuI¡32Ë(
b
))))

	)

106 
	#AuFixedPoötFromFø˘i⁄
(
¬n
,
ddd
) \

107 ((((
AuI¡32
Ë(
¬n
)Ë* 
AU_FIXED_POINT_SCALE
Ë/ ((AuI¡32Ë(
ddd
)))

	)

109 
	#AuFixedPoötRoundDown
(
Â
) \

110 ((
Â
Ë>> 
AU_FIXED_POINT_SHIFT
)

	)

111 
	#AuFixedPoötRoundUp
(
Â
) \

112 (
	`AuFixedPoötRoundDown
((
Â
Ë+ (
AU_FIXED_POINT_SCALE
 - 1L)))

	)

114 
	#AuFixedPoötI¡egølAddíd
(
Â
) \

115 (
	`AuFixedPoötRoundDown
 (
Â
))

	)

116 
	#AuFixedPoötFø˘i⁄ÆAddíd
(
Â
) \

117 ((
Â
Ë& 
AU_FIXED_POINT_MASK
)

	)

120 
	#AuN⁄e
 (0Ë

	)

121 
	#AuFÆ£
 (0)

	)

122 
	#AuTrue
 (1)

	)

133 
	#AuPrŸocﬁMaj‹Vîsi⁄
 2

	)

134 
	#AuPrŸocﬁMö‹Vîsi⁄
 2

	)

140 
	#AuNëw‹kI¡î√t
 0

	)

141 
	#AuNëw‹kDEC√t
 1

	)

142 
	#AuNëw‹kChaos
 2

	)

143 
	#AuNëw‹kNë«me
 254

	)

144 
	#AuNëw‹kLoˇl
 256

	)

145 
	#AuNëw‹kWûd
 65535

	)

151 
	#AuAc˚ssNoCh™ge
 0

	)

152 
	#AuAc˚ssE«bÀC⁄åﬁs
 1

	)

153 
	#AuAc˚ssDißbÀC⁄åﬁs
 2

	)

155 
	#AuAc˚ssAddU£r
 0

	)

156 
	#AuAc˚ssRemoveU£r
 1

	)

162 
	#AuClo£DownDe°roy
 0

	)

163 
	#AuClo£DownRëaöPîm™ít
 1

	)

164 
	#AuClo£DownRëaöTemp‹¨y
 2

	)

172 
	#AuAc˚ssImp‹tMask
 (1L << 0)

	)

173 
	#AuAc˚ssExp‹tMask
 (1L << 1)

	)

174 
	#AuAc˚ssDe°royMask
 (1L << 2)

	)

175 
	#AuAc˚ssLi°Mask
 (1L << 3)

	)

176 
	#AuAc˚ssAŒMasks
 ((1L << 4Ë- 1)

	)

182 
	#AuSåögL©ö1
 (1L)

	)

183 
	#AuSåögCompoundText
 (2LË

	)

189 
	#AuEvítTy≥EÀmítNŸify
 2

	)

190 
	#AuEvítTy≥GøbNŸify
 3

	)

191 
	#AuEvítTy≥M⁄ô‹NŸify
 4

	)

192 
	#AuEvítTy≥BuckëNŸify
 5

	)

193 
	#AuEvítTy≥Devi˚NŸify
 6

	)

195 
	#AuFú°EvítTy≥
 
AuEvítTy≥EÀmítNŸify


	)

196 
	#AuLa°EvítTy≥
 
AuEvítTy≥M⁄ô‹NŸify


	)

203 
	#AuSuc˚ss
 0

	)

204 
	#AuBadReque°
 1

	)

205 
	#AuBadVÆue
 2

	)

206 
	#AuBadDevi˚
 3

	)

207 
	#AuBadBuckë
 4

	)

208 
	#AuBadFlow
 5

	)

209 
	#AuBadEÀmít
 6

	)

211 
	#AuBadM©ch
 8

	)

213 
	#AuBadAc˚ss
 10

	)

214 
	#AuBadAŒoc
 11

	)

215 
	#AuBadC⁄√˘i⁄
 13

	)

216 
	#AuBadIDChoi˚
 14

	)

217 
	#AuBadName
 15

	)

218 
	#AuBadLígth
 16

	)

219 
	#AuBadIm∂emíèti⁄
 17

	)

221 
	#AuLa°Eº‹
 
AuBadIm∂emíèti⁄


	)

222 
	#AuFú°Exãnsi⁄Eº‹
 128

	)

223 
	#AuLa°Exãnsi⁄Eº‹
 255

	)

238 
	#AuF‹m©ULAW8
 1

	)

239 
	#AuF‹m©LöórUnsig√d8
 2

	)

240 
	#AuF‹m©LöórSig√d8
 3

	)

241 
	#AuF‹m©LöórSig√d16MSB
 4

	)

242 
	#AuF‹m©LöórUnsig√d16MSB
 5

	)

243 
	#AuF‹m©LöórSig√d16LSB
 6

	)

244 
	#AuF‹m©LöórUnsig√d16LSB
 7

	)

246 
	#AuSizeofF‹m©
(
fff
) \

247 (((
fff
Ë< 
AuF‹m©ULAW8
 || (fffË> 
AuF‹m©LöórUnsig√d16LSB
) ? 0 : \

248 (((
fff
Ë< 
AuF‹m©LöórSig√d16MSB
Ë? 1 : 2))

	)

251 
	#AuU∆imôedSam∂es
 0

	)

263 
	#AuCompComm⁄IDMask
 (1L << 0)

	)

264 
	#AuCompComm⁄KödMask
 (1L << 1)

	)

265 
	#AuCompComm⁄U£Mask
 (1L << 2)

	)

266 
	#AuCompComm⁄F‹m©Mask
 (1L << 3)

	)

267 
	#AuCompComm⁄NumTøcksMask
 (1L << 4)

	)

268 
	#AuCompComm⁄Ac˚ssMask
 (1L << 5)

	)

269 
	#AuCompComm⁄Des¸ùti⁄Mask
 (1L << 6)

	)

270 
	#AuCompComm⁄Masks
 ((1L << 7Ë- 1)

	)

271 
	#AuCompComm⁄AŒMasks
 
AuCompComm⁄Masks


	)

273 
	#AuCompDevi˚MöSam∂eR©eMask
 (1L << 16)

	)

274 
	#AuCompDevi˚MaxSam∂eR©eMask
 (1L << 17)

	)

275 
	#AuCompDevi˚Loˇti⁄Mask
 (1L << 18)

	)

276 
	#AuCompDevi˚GaöMask
 (1L << 19)

	)

277 
	#AuCompDevi˚LöeModeMask
 (1L << 20)

	)

278 
	#AuCompDevi˚I≈utModeMask
 
AuCompDevi˚LöeModeMask


	)

279 
	#AuCompDevi˚OuçutModeMask
 
AuCompDevi˚LöeModeMask


	)

280 
	#AuCompDevi˚ChûdªnMask
 (1L << 21)

	)

281 
	#AuCompDevi˚Masks
 (((1L << 22Ë- 1Ë& ~0xffff)

	)

282 
	#AuCompDevi˚AŒMasks
 (
AuCompDevi˚Masks
 | \

283 
AuCompComm⁄AŒMasks
)

	)

285 
	#AuCompBuckëSam∂eR©eMask
 (1L << 16)

	)

286 
	#AuCompBuckëNumSam∂esMask
 (1L << 17)

	)

287 
	#AuCompBuckëMasks
 (((1L << 18Ë- 1Ë& ~0xffff)

	)

288 
	#AuCompBuckëAŒMasks
 (
AuCompBuckëMasks
 | \

289 
AuCompComm⁄AŒMasks
)

	)

291 
	#AuCompRadioSèti⁄Mask
 (1L << 16)

	)

292 
	#AuCompRadioMasks
 ((1L << 17Ë- 1)

	)

293 
	#AuCompRadioAŒMasks
 (
AuCompRadioMasks
 | \

294 
AuCompComm⁄AŒMasks
)

	)

300 
	#AuComp⁄ítKödOthî
 0

	)

301 
	#AuComp⁄ítKödPhysiˇlI≈ut
 1

	)

302 
	#AuComp⁄ítKödPhysiˇlOuçut
 2

	)

303 
	#AuComp⁄ítKödBuckë
 3

	)

304 
	#AuComp⁄ítKödRadio
 4

	)

305 
	#AuComp⁄ítKödPhysiˇlFìdback
 5

	)

316 
	#AuComp⁄ítU£Imp‹tMask
 (1L << 0)

	)

317 
	#AuComp⁄ítU£Exp‹tMask
 (1L << 1)

	)

318 
	#AuComp⁄ítU£Ex˛usiveMask
 (1L << 2)

	)

319 
	#AuComp⁄ítU£AŒMasks
 ((1L << 3Ë- 1)

	)

326 
	#AuDevi˚Loˇti⁄Le·Mask
 (1L << 0)

	)

327 
	#AuDevi˚Loˇti⁄CíãrMask
 (1L << 1)

	)

328 
	#AuDevi˚Loˇti⁄RightMask
 (1L << 2)

	)

329 
	#AuDevi˚Loˇti⁄T›Mask
 (1L << 3)

	)

330 
	#AuDevi˚Loˇti⁄MiddÀMask
 (1L << 4)

	)

331 
	#AuDevi˚Loˇti⁄BŸtomMask
 (1L << 5)

	)

332 
	#AuDevi˚Loˇti⁄BackMask
 (1L << 6)

	)

333 
	#AuDevi˚Loˇti⁄Fr⁄tMask
 (1L << 7)

	)

334 
	#AuDevi˚Loˇti⁄I¡î«lMask
 (1L << 8)

	)

335 
	#AuDevi˚Loˇti⁄Exã∫ÆMask
 (1L << 9)

	)

336 
	#AuDevi˚Loˇti⁄AŒMasks
 ((1L << 10Ë- 1)

	)

346 
	#AuDevi˚I≈utModeN⁄e
 (0L)

	)

347 
	#AuDevi˚I≈utModeLöeIn
 (1L)

	)

348 
	#AuDevi˚I≈utModeMi¸›h⁄e
 (2L)

	)

351 
	#AuDevi˚LöeModeN⁄e
 
AuDevi˚I≈utModeN⁄e


	)

352 
	#AuDevi˚LöeModeLow
 
AuDevi˚I≈utModeLöeIn


	)

353 
	#AuDevi˚LöeModeHigh
 
AuDevi˚I≈utModeMi¸›h⁄e


	)

361 
	#AuDevi˚OuçutModeN⁄e
 (0L)

	)

362 
	#AuDevi˚OuçutModeS≥akî
 (1L)

	)

363 
	#AuDevi˚OuçutModeHódph⁄e
 (2L)

	)

364 
	#AuDevi˚OuçutModeLöeOut
 (4L)

	)

375 
	#AuEÀmítTy≥Imp‹tClõ¡
 0

	)

376 
	#AuEÀmítTy≥Imp‹tDevi˚
 1

	)

377 
	#AuEÀmítTy≥Imp‹tBuckë
 2

	)

378 
	#AuEÀmítTy≥Imp‹tWaveF‹m
 3

	)

379 
	#AuEÀmítTy≥Imp‹tRadio
 4

	)

380 
	#AuEÀmítTy≥BundÀ
 5

	)

381 
	#AuEÀmítTy≥Mu…ùlyC⁄°™t
 6

	)

382 
	#AuEÀmítTy≥AddC⁄°™t
 7

	)

383 
	#AuEÀmítTy≥Sum
 8

	)

384 
	#AuEÀmítTy≥Exp‹tClõ¡
 9

	)

385 
	#AuEÀmítTy≥Exp‹tDevi˚
 10

	)

386 
	#AuEÀmítTy≥Exp‹tBuckë
 11

	)

387 
	#AuEÀmítTy≥Exp‹tRadio
 12

	)

388 
	#AuEÀmítTy≥Exp‹tM⁄ô‹
 13

	)

391 
	#AU_MAX_ELEMENTS
 254

	)

392 
	#AuEÀmítAŒ
 255

	)

394 
	#AU_MAX_PARMS
 5

	)

395 
	#AuP¨msImp‹tClõ¡
 0

	)

396 
	#AuP¨msImp‹tDevi˚
 0

	)

397 
	#AuP¨msImp‹tBuckë
 1

	)

398 
	#AuP¨msImp‹tBuckëOff£t
 0

	)

399 
	#AuP¨msImp‹tWaveF‹m
 2

	)

400 
	#AuP¨msImp‹tWaveF‹mFªquícy
 0

	)

401 
	#AuP¨msImp‹tWaveF‹mNumSam∂es
 1

	)

402 
	#AuP¨msImp‹tRadio
 0

	)

403 
	#AuP¨msBundÀ
 0

	)

404 
	#AuP¨msMu…ùlyC⁄°™t
 1

	)

405 
	#AuP¨msMu…ùlyC⁄°™tC⁄°™t
 0

	)

406 
	#AuP¨msAddC⁄°™t
 1

	)

407 
	#AuP¨msAddC⁄°™tC⁄°™t
 0

	)

408 
	#AuP¨msSum
 0

	)

409 
	#AuP¨msExp‹tClõ¡
 0

	)

410 
	#AuP¨msExp‹tDevi˚
 0

	)

411 
	#AuP¨msExp‹tBuckë
 1

	)

412 
	#AuP¨msExp‹tBuckëOff£t
 0

	)

413 
	#AuP¨msExp‹tRadio
 0

	)

414 
	#AuP¨msExp‹tM⁄ô‹
 0

	)

420 
	#AuSèãSt›
 0

	)

421 
	#AuSèãSèπ
 1

	)

422 
	#AuSèãPau£
 2

	)

423 
	#AuSèãAny
 255

	)

425 
	#AuEÀmítA˘i⁄Ch™geSèã
 0

	)

426 
	#AuEÀmítA˘i⁄SídNŸify
 1

	)

427 
	#AuEÀmítA˘i⁄No›
 2

	)

433 
	#AuWaveF‹mSqu¨e
 0

	)

434 
	#AuWaveF‹mSöe
 1

	)

435 
	#AuWaveF‹mSaw
 2

	)

436 
	#AuWaveF‹mC⁄°™t
 3

	)

442 
	#AuEÀmítNŸifyKödLowW©î
 0

	)

443 
	#AuEÀmítNŸifyKödHighW©î
 1

	)

444 
	#AuEÀmítNŸifyKödSèã
 2

	)

449 
	#AuRós⁄U£r
 0

	)

450 
	#AuRós⁄Undîrun
 1

	)

451 
	#AuRós⁄Ovîrun
 2

	)

452 
	#AuRós⁄EOF
 3

	)

453 
	#AuRós⁄W©îm¨k
 4

	)

454 
	#AuRós⁄H¨dw¨e
 5

	)

455 
	#AuRós⁄Any
 255

	)

460 
	#AuGøbNŸifyKödReque°ed
 0

	)

461 
	#AuGøbNŸifyKödRñó£d
 1

	)

468 
	#AuTøns„rSèãRódy
 0

	)

469 
	#AuTøns„rSèãPídög
 1

	)

470 
	#AuTøns„rSèãEnd
 2

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

251 #i‚de‡
__USE_FILE_OFFSET64


252 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

253 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

254 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

255 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

256 
__c⁄°
 
dúít
 **))

257 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT
 (
sˇndú
,

261 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

262 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

263 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

264 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

265 
__c⁄°
 
dúít
 **)),

266 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

268 
	#sˇndú
 
sˇndú64


	)

272 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


275 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

276 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

277 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

278 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

279 
__c⁄°
 
dúít64
 **))

280 
	`__n⁄nuŒ
 ((1, 2));

284 #i‚de‡
__USE_FILE_OFFSET64


285 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

286 
__c⁄°
 
dúít
 **
__e2
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT_NTH
 (
Æphas‹t
,

291 (
__c⁄°
 
dúít
 **
__e1
,

292 
__c⁄°
 
dúít
 **
__e2
),

293 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 
	#Æphas‹t
 
Æphas‹t64


	)

299 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


300 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

301 
__c⁄°
 
dúít64
 **
__e2
)

302 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


312 #i‚de‡
__USE_FILE_OFFSET64


313 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

314 
size_t
 
__nbyãs
,

315 
__off_t
 *
__ª°ri˘
 
__ba£p
)

316 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

318 #ifde‡
__REDIRECT


319 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

320 (
__fd
, *
__ª°ri˘
 
__buf
,

321 
size_t
 
__nbyãs
,

322 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

323 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

325 
	#gëdúíåõs
 
gëdúíåõs64


	)

329 #ifde‡
__USE_LARGEFILE64


330 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

331 
size_t
 
__nbyãs
,

332 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

333 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

337 #ifde‡
__USE_GNU


339 #i‚de‡
__USE_FILE_OFFSET64


340 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

341 
__c⁄°
 
dúít
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 #ifde‡
__REDIRECT


345 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

346 (
__c⁄°
 
dúít
 **
__e1
,

347 
__c⁄°
 
dúít
 **
__e2
),

348 
vîsi⁄s‹t64
)

349 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

351 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

355 #ifde‡
__USE_LARGEFILE64


356 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

357 
__c⁄°
 
dúít64
 **
__e2
)

358 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

362 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/linux/usbdevice_fs.h

29 #i‚de‡
_LINUX_USBDEVICE_FS_H


30 
	#_LINUX_USBDEVICE_FS_H


	)

32 
	~<löux/ty≥s.h
>

33 
	~<löux/magic.h
>

39 
	susbdevfs_˘æå™s„r
 {

40 
__u8
 
	mbReque°Ty≥
;

41 
__u8
 
	mbReque°
;

42 
__u16
 
	mwVÆue
;

43 
__u16
 
	mwIndex
;

44 
__u16
 
	mwLígth
;

45 
__u32
 
	mtimeout
;

46 *
	md©a
;

49 
	susbdevfs_bulkå™s„r
 {

50 
	mï
;

51 
	mÀn
;

52 
	mtimeout
;

53 *
	md©a
;

56 
	susbdevfs_£töãrÁ˚
 {

57 
	möãrÁ˚
;

58 
	mÆt£âög
;

61 
	susbdevfs_disc⁄√˘sig«l
 {

62 
	msigƒ
;

63 *
	mc⁄ãxt
;

66 
	#USBDEVFS_MAXDRIVERNAME
 255

	)

68 
	susbdevfs_gëdrivî
 {

69 
	möãrÁ˚
;

70 
	mdrivî
[
USBDEVFS_MAXDRIVERNAME
 + 1];

73 
	susbdevfs_c⁄√˘öfo
 {

74 
	mdevnum
;

75 
	m¶ow
;

78 
	#USBDEVFS_URB_SHORT_NOT_OK
 0x01

	)

79 
	#USBDEVFS_URB_ISO_ASAP
 0x02

	)

80 
	#USBDEVFS_URB_BULK_CONTINUATION
 0x04

	)

81 
	#USBDEVFS_URB_NO_FSBR
 0x20

	)

82 
	#USBDEVFS_URB_ZERO_PACKET
 0x40

	)

83 
	#USBDEVFS_URB_NO_INTERRUPT
 0x80

	)

85 
	#USBDEVFS_URB_TYPE_ISO
 0

	)

86 
	#USBDEVFS_URB_TYPE_INTERRUPT
 1

	)

87 
	#USBDEVFS_URB_TYPE_CONTROL
 2

	)

88 
	#USBDEVFS_URB_TYPE_BULK
 3

	)

90 
	susbdevfs_iso_∑ckë_desc
 {

91 
	mÀngth
;

92 
	ma˘uÆ_Àngth
;

93 
	m°©us
;

96 
	susbdevfs_urb
 {

97 
	mty≥
;

98 
	mídpoöt
;

99 
	m°©us
;

100 
	mÊags
;

101 *
	mbuf„r
;

102 
	mbuf„r_Àngth
;

103 
	ma˘uÆ_Àngth
;

104 
	m°¨t_‰ame
;

105 
	mnumbî_of_∑ckës
;

106 
	mîr‹_cou¡
;

107 
	msigƒ
;

109 *
	mu£rc⁄ãxt
;

110 
usbdevfs_iso_∑ckë_desc
 
	miso_‰ame_desc
[0];

114 
	susbdevfs_io˘l
 {

115 
	mi‚o
;

116 
	mio˘l_code
;

118 *
	md©a
;

123 
	susbdevfs_hub_p‹töfo
 {

124 
	m≈‹ts
;

125 
	mp‹t
 [127];

129 
	#USBDEVFS_CONTROL
 
	`_IOWR
('U', 0, 
usbdevfs_˘æå™s„r
)

	)

130 
	#USBDEVFS_CONTROL32
 
	`_IOWR
('U', 0, 
usbdevfs_˘æå™s„r32
)

	)

131 
	#USBDEVFS_BULK
 
	`_IOWR
('U', 2, 
usbdevfs_bulkå™s„r
)

	)

132 
	#USBDEVFS_BULK32
 
	`_IOWR
('U', 2, 
usbdevfs_bulkå™s„r32
)

	)

133 
	#USBDEVFS_RESETEP
 
	`_IOR
('U', 3, )

	)

134 
	#USBDEVFS_SETINTERFACE
 
	`_IOR
('U', 4, 
usbdevfs_£töãrÁ˚
)

	)

135 
	#USBDEVFS_SETCONFIGURATION
 
	`_IOR
('U', 5, )

	)

136 
	#USBDEVFS_GETDRIVER
 
	`_IOW
('U', 8, 
usbdevfs_gëdrivî
)

	)

137 
	#USBDEVFS_SUBMITURB
 
	`_IOR
('U', 10, 
usbdevfs_urb
)

	)

138 
	#USBDEVFS_SUBMITURB32
 
	`_IOR
('U', 10, 
usbdevfs_urb32
)

	)

139 
	#USBDEVFS_DISCARDURB
 
	`_IO
('U', 11)

	)

140 
	#USBDEVFS_REAPURB
 
	`_IOW
('U', 12, *)

	)

141 
	#USBDEVFS_REAPURB32
 
	`_IOW
('U', 12, 
__u32
)

	)

142 
	#USBDEVFS_REAPURBNDELAY
 
	`_IOW
('U', 13, *)

	)

143 
	#USBDEVFS_REAPURBNDELAY32
 
	`_IOW
('U', 13, 
__u32
)

	)

144 
	#USBDEVFS_DISCSIGNAL
 
	`_IOR
('U', 14, 
usbdevfs_disc⁄√˘sig«l
)

	)

145 
	#USBDEVFS_DISCSIGNAL32
 
	`_IOR
('U', 14, 
usbdevfs_disc⁄√˘sig«l32
)

	)

146 
	#USBDEVFS_CLAIMINTERFACE
 
	`_IOR
('U', 15, )

	)

147 
	#USBDEVFS_RELEASEINTERFACE
 
	`_IOR
('U', 16, )

	)

148 
	#USBDEVFS_CONNECTINFO
 
	`_IOW
('U', 17, 
usbdevfs_c⁄√˘öfo
)

	)

149 
	#USBDEVFS_IOCTL
 
	`_IOWR
('U', 18, 
usbdevfs_io˘l
)

	)

150 
	#USBDEVFS_IOCTL32
 
	`_IOWR
('U', 18, 
usbdevfs_io˘l32
)

	)

151 
	#USBDEVFS_HUB_PORTINFO
 
	`_IOR
('U', 19, 
usbdevfs_hub_p‹töfo
)

	)

152 
	#USBDEVFS_RESET
 
	`_IO
('U', 20)

	)

153 
	#USBDEVFS_CLEAR_HALT
 
	`_IOR
('U', 21, )

	)

154 
	#USBDEVFS_DISCONNECT
 
	`_IO
('U', 22)

	)

155 
	#USBDEVFS_CONNECT
 
	`_IO
('U', 23)

	)

156 
	#USBDEVFS_CLAIM_PORT
 
	`_IOR
('U', 24, )

	)

157 
	#USBDEVFS_RELEASE_PORT
 
	`_IOR
('U', 25, )

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132646

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/audio/Amd.h

101 #i‚de‡
XMD_H


102 
	#XMD_H
 1

	)

104 #i‚de‡
AMD_H


105 
	#AMD_H
 1

	)

114 #ifde‡
CRAY


115 
	#WORD64


	)

117 #i‡
deföed
 (
_LP64
) || \

118 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

119 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

120 
deföed
(
__•¨c64__
) || \

121 
deföed
(
__s390x__
) || \

122 (
deföed
(
__hµa__
Ë&& deföed(
__LP64__
)) || \

123 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

124 
deföed
(
__powîpc64__
) || \

125 (
deföed
(
sgi
Ë&& (
	g_MIPS_SZLONG
 == 64))

126 
	#LONG64


	)

133 #ifde‡
WORD64


134 
	#MUSTCOPY


	)

152 #i‡((
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)Ë&& !deföed(
UNIXCPP
)Ë|| deföed(
ANSICPP
)

153 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

154 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

156 
	#SIZEOF
(
x
Ë
sz_
 
	)
x

164 #ifde‡
WORD64


165 
	tINT64
;

166 
	tCARD64
;

167 
	#B32
 :32

	)

168 
	#B16
 :16

	)

169 #ifde‡
UNSIGNEDBITFIELDS


170 
	tINT32
;

171 
	tINT16
;

173 #ifde‡
__STDC__


174 sig√d 
	tINT32
;

175 sig√d 
	tINT16
;

177 
	tINT32
;

178 
	tINT16
;

182 
	#B32


	)

183 
	#B16


	)

184 #ifde‡
LONG64


185 
	tINT64
;

186 
	tINT32
;

188 
	tINT32
;

190 
	tINT16
;

193 #i‡
deföed
(
__STDC__
Ë|| deföed(
sgi
Ë|| deföed(
AIXV3
)

194 sig√d 
	tINT8
;

196 
	tINT8
;

199 #ifde‡
LONG64


200 
	tCARD64
;

201 
	tCARD32
;

203 
	tCARD32
;

205 
	tCARD16
;

206 
	tCARD8
;

208 
CARD32
 
	tBITS32
;

209 
CARD16
 
	tBITS16
;

211 #i‚de‡
I_NEED_OS2_H


212 
CARD8
 
	tBYTE
;

213 
CARD8
 
	tBOOL
;

215 
	#BYTE
 
CARD8


	)

216 
	#BOOL
 
CARD8


	)

219 #i‚de‡
WIN32


220 
BOOL
 
	tAUBOOL
;

222 
	tAUBOOL
;

229 #i‡
deföed
(
WORD64
Ë&& deföed(
UNSIGNEDBITFIELDS
)

230 
	#cvtINT8toI¡
(
vÆ
Ë(((vÆË& 0x00000080Ë? ((vÆË| 0xffffffffffffff00Ë: (vÆ))

	)

231 
	#cvtINT16toI¡
(
vÆ
Ë(((vÆË& 0x00008000Ë? ((vÆË| 0xffffffffffff0000Ë: (vÆ))

	)

232 
	#cvtINT32toI¡
(
vÆ
Ë(((vÆË& 0x80000000Ë? ((vÆË| 0xffffffff00000000Ë: (vÆ))

	)

233 
	#cvtINT8toSh‹t
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

234 
	#cvtINT16toSh‹t
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

235 
	#cvtINT32toSh‹t
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

236 
	#cvtINT8toL⁄g
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

237 
	#cvtINT16toL⁄g
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

238 
	#cvtINT32toL⁄g
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

240 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

241 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

242 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

243 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

244 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

245 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

246 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

247 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

248 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

253 #ifde‡
MUSTCOPY


257 
	#NEXTPTR
(
p
,
t
Ë(((*ËpË+ 
	`SIZEOF
—))

	)

263 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/linux/magic.h

1 #i‚de‡
__LINUX_MAGIC_H__


2 
	#__LINUX_MAGIC_H__


	)

4 
	#ADFS_SUPER_MAGIC
 0xadf5

	)

5 
	#AFFS_SUPER_MAGIC
 0xadff

	)

6 
	#AFS_SUPER_MAGIC
 0x5346414F

	)

7 
	#AUTOFS_SUPER_MAGIC
 0x0187

	)

8 
	#CODA_SUPER_MAGIC
 0x73757245

	)

9 
	#CRAMFS_MAGIC
 0x28cd3d45

	)

10 
	#CRAMFS_MAGIC_WEND
 0x453dcd28

	)

11 
	#DEBUGFS_MAGIC
 0x64626720

	)

12 
	#SYSFS_MAGIC
 0x62656572

	)

13 
	#SECURITYFS_MAGIC
 0x73636673

	)

14 
	#SELINUX_MAGIC
 0xf97cff8c

	)

15 
	#RAMFS_MAGIC
 0x858458f6

	)

16 
	#TMPFS_MAGIC
 0x01021994

	)

17 
	#HUGETLBFS_MAGIC
 0x958458f6

	)

18 
	#SQUASHFS_MAGIC
 0x73717368

	)

19 
	#ECRYPTFS_SUPER_MAGIC
 0xf15f

	)

20 
	#EFS_SUPER_MAGIC
 0x414A53

	)

21 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

22 
	#EXT3_SUPER_MAGIC
 0xEF53

	)

23 
	#XENFS_SUPER_MAGIC
 0xabba1974

	)

24 
	#EXT4_SUPER_MAGIC
 0xEF53

	)

25 
	#BTRFS_SUPER_MAGIC
 0x9123683E

	)

26 
	#HPFS_SUPER_MAGIC
 0xf995e849

	)

27 
	#ISOFS_SUPER_MAGIC
 0x9660

	)

28 
	#JFFS2_SUPER_MAGIC
 0x72b6

	)

29 
	#ANON_INODE_FS_MAGIC
 0x09041934

	)

31 
	#MINIX_SUPER_MAGIC
 0x137F

	)

32 
	#MINIX_SUPER_MAGIC2
 0x138F

	)

33 
	#MINIX2_SUPER_MAGIC
 0x2468

	)

34 
	#MINIX2_SUPER_MAGIC2
 0x2478

	)

35 
	#MINIX3_SUPER_MAGIC
 0x4d5®

	)

37 
	#MSDOS_SUPER_MAGIC
 0x4d44

	)

38 
	#NCP_SUPER_MAGIC
 0x564¯

	)

39 
	#NFS_SUPER_MAGIC
 0x6969

	)

40 
	#OPENPROM_SUPER_MAGIC
 0x9Á1

	)

41 
	#PROC_SUPER_MAGIC
 0x9Á0

	)

42 
	#QNX4_SUPER_MAGIC
 0x002‡

	)

44 
	#REISERFS_SUPER_MAGIC
 0x52654973

	)

47 
	#REISERFS_SUPER_MAGIC_STRING
 "ReIsErFs"

	)

48 
	#REISER2FS_SUPER_MAGIC_STRING
 "ReIsEr2Fs"

	)

49 
	#REISER2FS_JR_SUPER_MAGIC_STRING
 "ReIsEr3Fs"

	)

51 
	#SMB_SUPER_MAGIC
 0x517B

	)

52 
	#USBDEVICE_SUPER_MAGIC
 0x9Á2

	)

53 
	#CGROUP_SUPER_MAGIC
 0x27e0eb

	)

55 
	#FUTEXFS_SUPER_MAGIC
 0xBAD1DEA

	)

57 
	#STACK_END_MAGIC
 0x57AC6E9D

	)

59 
	#DEVPTS_SUPER_MAGIC
 0x1cd1

	)

60 
	#SOCKFS_MAGIC
 0x534F434B

	)

61 
	#V9FS_MAGIC
 0x01021997

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

77 
	#FIONCLEX
 0x5450

	)

78 
	#FIOCLEX
 0x5451

	)

79 
	#FIOASYNC
 0x5452

	)

80 
	#TIOCSERCONFIG
 0x5453

	)

81 
	#TIOCSERGWILD
 0x5454

	)

82 
	#TIOCSERSWILD
 0x5455

	)

83 
	#TIOCGLCKTRMIOS
 0x5456

	)

84 
	#TIOCSLCKTRMIOS
 0x5457

	)

85 
	#TIOCSERGSTRUCT
 0x5458

	)

86 
	#TIOCSERGETLSR
 0x5459

	)

87 
	#TIOCSERGETMULTI
 0x545A

	)

88 
	#TIOCSERSETMULTI
 0x545B

	)

90 
	#TIOCMIWAIT
 0x545C

	)

91 
	#TIOCGICOUNT
 0x545D

	)

97 #i‚de‡
FIOQSIZE


98 
	#FIOQSIZE
 0x5460

	)

102 
	#TIOCPKT_DATA
 0

	)

103 
	#TIOCPKT_FLUSHREAD
 1

	)

104 
	#TIOCPKT_FLUSHWRITE
 2

	)

105 
	#TIOCPKT_STOP
 4

	)

106 
	#TIOCPKT_START
 8

	)

107 
	#TIOCPKT_NOSTOP
 16

	)

108 
	#TIOCPKT_DOSTOP
 32

	)

109 
	#TIOCPKT_IOCTL
 64

	)

111 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
81
1861
bus.c
core.c
desc.c
desc.h
dev-audio.c
dev-bluetooth.c
dev-hid.c
dev-hub.c
dev-network.c
dev-serial.c
dev-smartcard-reader.c
dev-storage.c
dev-uas.c
dev-wacom.c
hcd-ehci.c
hcd-musb.c
hcd-ohci.c
hcd-uhci.c
hcd-xhci.c
host-bsd.c
host-linux.c
host-stub.c
libhw.c
redirect.c
/usr/include/audio/audio.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/inttypes.h
/usr/include/linux/usbdevice_fs.h
/usr/include/linux/version.h
/usr/include/signal.h
/usr/include/sys/ioctl.h
/usr/include/audio/Amd.h
/usr/include/bits/dirent.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/linux/magic.h
/usr/include/linux/types.h
/usr/include/stdint.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/asm/ioctls.h
/usr/include/asm/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/local_lim.h
/usr/include/bits/predefs.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/linux/posix_types.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/limits.h
/usr/include/linux/stddef.h
/usr/include/asm-generic/int-ll64.h
/usr/include/linux/ioctl.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/ioctl.h
